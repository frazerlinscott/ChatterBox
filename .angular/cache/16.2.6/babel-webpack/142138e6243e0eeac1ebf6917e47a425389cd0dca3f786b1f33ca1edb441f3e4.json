{"ast":null,"code":"// import { ComponentFixture, TestBed } from '@angular/core/testing';\n// import { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\n// import { FormsModule } from '@angular/forms';\n// import { ChannelsComponent } from './channels.component';\n// import { ActivatedRoute } from '@angular/router'; // Import ActivatedRoute\n// import { of } from 'rxjs';\n// import { RouterTestingModule } from '@angular/router/testing'; // Import RouterTestingModule\n// describe('ChannelsComponent', () => {\n//   let component: ChannelsComponent;\n//   let fixture: ComponentFixture<ChannelsComponent>;\n//   let httpMock: HttpTestingController;\n//   beforeEach(() => {\n//     TestBed.configureTestingModule({\n//       declarations: [ChannelsComponent],\n//       imports: [HttpClientTestingModule, FormsModule, RouterTestingModule], // Add RouterTestingModule here\n//       providers: [\n//         // No need to provide ActivatedRoute\n//       ]\n//     });\n//     fixture = TestBed.createComponent(ChannelsComponent);\n//     component = fixture.componentInstance;\n//     fixture.detectChanges();\n//     httpMock = TestBed.inject(HttpTestingController);\n//   });\n//   it('should create', () => {\n//     expect(component).toBeTruthy();\n//   });\n// });\nimport { TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { FormsModule } from '@angular/forms';\nimport { ChannelsComponent } from './channels.component';\nimport { RouterTestingModule } from '@angular/router/testing';\nconst BACKEND_URL = \"http://localhost:3000\";\ndescribe('ChannelsComponent', () => {\n  let component;\n  let fixture;\n  let httpMock;\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      declarations: [ChannelsComponent],\n      imports: [HttpClientTestingModule, FormsModule, RouterTestingModule]\n    });\n    fixture = TestBed.createComponent(ChannelsComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n    httpMock = TestBed.inject(HttpTestingController);\n  });\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n  it('should add user to channel', () => {\n    // Set up a mock currentGroup with channels\n    component.currentGroup = {\n      channels: {\n        channel1: [],\n        channel2: []\n      }\n    };\n    // Set up loggedInUser\n    component.loggedInUser = {\n      username: 'testUser'\n    };\n    // Define the targetChannel you want to add the user to\n    const targetChannel = 'channel1';\n    // Call the addUserToChannel method\n    component.addUserToChannel(targetChannel);\n    // Expect that the user is added to the target channel\n    expect(component.currentGroup.channels[targetChannel]).toContain(component.loggedInUser.username);\n    // ... Additional expectations for the method's behavior\n    // Optionally, you can add expectations for the HTTP request if needed\n    const req = httpMock.expectOne(`${BACKEND_URL}/update-groups`);\n    expect(req.request.method).toBe('POST');\n    expect(req.request.body).toEqual(component.currentGroup);\n  });\n});","map":{"version":3,"names":["TestBed","HttpClientTestingModule","HttpTestingController","FormsModule","ChannelsComponent","RouterTestingModule","BACKEND_URL","describe","component","fixture","httpMock","beforeEach","configureTestingModule","declarations","imports","createComponent","componentInstance","detectChanges","inject","it","expect","toBeTruthy","currentGroup","channels","channel1","channel2","loggedInUser","username","targetChannel","addUserToChannel","toContain","req","expectOne","request","method","toBe","body","toEqual"],"sources":["/Users/frazerlinscott/Desktop/Software Frameworks/Assignments/Assignment1_SoftwareFrames_s2930588/src/app/channels/channels.component.spec.ts"],"sourcesContent":["// import { ComponentFixture, TestBed } from '@angular/core/testing';\n// import { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\n// import { FormsModule } from '@angular/forms';\n// import { ChannelsComponent } from './channels.component';\n// import { ActivatedRoute } from '@angular/router'; // Import ActivatedRoute\n// import { of } from 'rxjs';\n// import { RouterTestingModule } from '@angular/router/testing'; // Import RouterTestingModule\n\n// describe('ChannelsComponent', () => {\n//   let component: ChannelsComponent;\n//   let fixture: ComponentFixture<ChannelsComponent>;\n//   let httpMock: HttpTestingController;\n\n//   beforeEach(() => {\n//     TestBed.configureTestingModule({\n//       declarations: [ChannelsComponent],\n//       imports: [HttpClientTestingModule, FormsModule, RouterTestingModule], // Add RouterTestingModule here\n//       providers: [\n//         // No need to provide ActivatedRoute\n//       ]\n//     });\n//     fixture = TestBed.createComponent(ChannelsComponent);\n//     component = fixture.componentInstance;\n//     fixture.detectChanges();\n//     httpMock = TestBed.inject(HttpTestingController);\n//   });\n\n//   it('should create', () => {\n//     expect(component).toBeTruthy();\n//   });\n// });\n\n\nimport { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { FormsModule } from '@angular/forms';\nimport { ChannelsComponent } from './channels.component';\nimport { RouterTestingModule } from '@angular/router/testing';\n\n\nconst BACKEND_URL = \"http://localhost:3000\";\n\ndescribe('ChannelsComponent', () => {\n  let component: ChannelsComponent;\n  let fixture: ComponentFixture<ChannelsComponent>;\n  let httpMock: HttpTestingController;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      declarations: [ChannelsComponent],\n      imports: [HttpClientTestingModule, FormsModule, RouterTestingModule],\n    });\n    fixture = TestBed.createComponent(ChannelsComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n    httpMock = TestBed.inject(HttpTestingController);\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n\n  it('should add user to channel', () => {\n    // Set up a mock currentGroup with channels\n    component.currentGroup = {\n      channels: {\n        channel1: [],\n        channel2: [],\n      },\n    };\n\n    // Set up loggedInUser\n    component.loggedInUser = { username: 'testUser' };\n\n    // Define the targetChannel you want to add the user to\n    const targetChannel = 'channel1';\n\n    // Call the addUserToChannel method\n    component.addUserToChannel(targetChannel);\n\n    // Expect that the user is added to the target channel\n    expect(component.currentGroup.channels[targetChannel]).toContain(component.loggedInUser.username);\n\n    // ... Additional expectations for the method's behavior\n\n    // Optionally, you can add expectations for the HTTP request if needed\n    const req = httpMock.expectOne(`${BACKEND_URL}/update-groups`);\n    expect(req.request.method).toBe('POST');\n    expect(req.request.body).toEqual(component.currentGroup);\n  });\n});\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA,SAA2BA,OAAO,QAAQ,uBAAuB;AACjE,SAASC,uBAAuB,EAAEC,qBAAqB,QAAQ,8BAA8B;AAC7F,SAASC,WAAW,QAAQ,gBAAgB;AAC5C,SAASC,iBAAiB,QAAQ,sBAAsB;AACxD,SAASC,mBAAmB,QAAQ,yBAAyB;AAG7D,MAAMC,WAAW,GAAG,uBAAuB;AAE3CC,QAAQ,CAAC,mBAAmB,EAAE,MAAK;EACjC,IAAIC,SAA4B;EAChC,IAAIC,OAA4C;EAChD,IAAIC,QAA+B;EAEnCC,UAAU,CAAC,MAAK;IACdX,OAAO,CAACY,sBAAsB,CAAC;MAC7BC,YAAY,EAAE,CAACT,iBAAiB,CAAC;MACjCU,OAAO,EAAE,CAACb,uBAAuB,EAAEE,WAAW,EAAEE,mBAAmB;KACpE,CAAC;IACFI,OAAO,GAAGT,OAAO,CAACe,eAAe,CAACX,iBAAiB,CAAC;IACpDI,SAAS,GAAGC,OAAO,CAACO,iBAAiB;IACrCP,OAAO,CAACQ,aAAa,EAAE;IACvBP,QAAQ,GAAGV,OAAO,CAACkB,MAAM,CAAChB,qBAAqB,CAAC;EAClD,CAAC,CAAC;EAEFiB,EAAE,CAAC,eAAe,EAAE,MAAK;IACvBC,MAAM,CAACZ,SAAS,CAAC,CAACa,UAAU,EAAE;EAChC,CAAC,CAAC;EAEFF,EAAE,CAAC,4BAA4B,EAAE,MAAK;IACpC;IACAX,SAAS,CAACc,YAAY,GAAG;MACvBC,QAAQ,EAAE;QACRC,QAAQ,EAAE,EAAE;QACZC,QAAQ,EAAE;;KAEb;IAED;IACAjB,SAAS,CAACkB,YAAY,GAAG;MAAEC,QAAQ,EAAE;IAAU,CAAE;IAEjD;IACA,MAAMC,aAAa,GAAG,UAAU;IAEhC;IACApB,SAAS,CAACqB,gBAAgB,CAACD,aAAa,CAAC;IAEzC;IACAR,MAAM,CAACZ,SAAS,CAACc,YAAY,CAACC,QAAQ,CAACK,aAAa,CAAC,CAAC,CAACE,SAAS,CAACtB,SAAS,CAACkB,YAAY,CAACC,QAAQ,CAAC;IAEjG;IAEA;IACA,MAAMI,GAAG,GAAGrB,QAAQ,CAACsB,SAAS,CAAC,GAAG1B,WAAW,gBAAgB,CAAC;IAC9Dc,MAAM,CAACW,GAAG,CAACE,OAAO,CAACC,MAAM,CAAC,CAACC,IAAI,CAAC,MAAM,CAAC;IACvCf,MAAM,CAACW,GAAG,CAACE,OAAO,CAACG,IAAI,CAAC,CAACC,OAAO,CAAC7B,SAAS,CAACc,YAAY,CAAC;EAC1D,CAAC,CAAC;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}