{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./chat.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./chat.component.css?ngResource\";\nimport { Component } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { SocketService } from 'src/app/service/socket.service';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { ViewChild } from '@angular/core';\nimport { UploadService } from '../service/upload.service';\nconst BACKEND_URL = \"http://localhost:3000\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\nexport let ChatComponent = class ChatComponent {\n  constructor(uploadService, http, socketService, router, route) {\n    this.uploadService = uploadService;\n    this.http = http;\n    this.socketService = socketService;\n    this.router = router;\n    this.route = route;\n    this.messagecontent = \"\";\n    this.currentChannel = null;\n    this.messages = [];\n    this.attachmentFile = null;\n    this.attachmentId = 1;\n  }\n  ngOnInit() {\n    this.socketService.initSocket();\n    this.URL = BACKEND_URL + \"/\";\n    this.attachmentURL = BACKEND_URL + \"/attachments/\";\n    const storedUser = window.sessionStorage.getItem('current.user');\n    if (storedUser) {\n      this.loggedInUser = JSON.parse(storedUser);\n      //console.log(this.loggedInUser.username)\n    }\n\n    this.route.queryParams.subscribe(params => {\n      this.channel = params['channel'];\n      this.currentGroupString = params['currentGroup'];\n      this.initIoConnection();\n      this.socketService.join(this.channel);\n      this.fetchPreviousMessages(this.currentGroupString, this.channel);\n      //this.messages = []; // Clear the previous messages when changing the channel.\n    });\n  }\n\n  ngAfterViewChecked() {\n    this.scrollToBottom();\n  }\n  fetchPreviousMessages(groupName, channelName) {\n    const url = `${BACKEND_URL}/messages?groupName=${groupName}&channelName=${channelName}`;\n    this.http.get(url).subscribe(data => {\n      this.messages = data;\n      console.log(this.messages);\n    }, error => {\n      console.error(\"Failed to fetch previous messages\", error);\n    });\n  }\n  scrollToBottom() {\n    if (this.chatMessages) {\n      const chat = this.chatMessages.nativeElement;\n      chat.scrollTop = chat.scrollHeight;\n    }\n  }\n  onFileSelected(event) {\n    this.attachmentFile = event.target.files[0];\n    console.log(\"File selected: \" + this.attachmentFile);\n  }\n  initIoConnection() {\n    console.log('initIoConnection called');\n    if (this.ioConnection) {\n      this.ioConnection.unsubscribe();\n    }\n    this.ioConnection = this.socketService.getMessage().subscribe(data => {\n      console.log('Received:', data);\n      if (data.channel === this.channel) {\n        const newMessage = data;\n        // Attach profile picture to the new message if it's from the loggedInUser\n        if (newMessage.username === this.loggedInUser.username && !newMessage.profilePic) {\n          newMessage.profilePic = this.loggedInUser.profilePic;\n        }\n        this.messages.push(newMessage);\n        console.log(this.messages);\n      }\n    });\n  }\n  sendMessage() {\n    console.log('Send message');\n    if (this.attachmentFile) {\n      console.log(this.messagecontent ? \"Sending both string message and attachment\" : \"Sending only an attachment\");\n      this.uploadAttachment();\n    } else if (this.messagecontent) {\n      console.log(\"Sending only string message\");\n      this.sendOnlyMessage();\n    }\n  }\n  uploadAttachment() {\n    const formData = new FormData();\n    if (this.attachmentFile) {\n      formData.append('photo', this.attachmentFile);\n    }\n    this.uploadService.uploadAttachment(formData).subscribe(response => {\n      console.log('Upload successful', response);\n      const attachmentId = response.attachmentId;\n      // Send the message (or an empty string if there's no message content)\n      this.sendAttachmentMessage(attachmentId);\n      // Reset the attachment and message content after sending\n      this.attachmentFile = null;\n      this.messagecontent = \"\";\n    }, error => {\n      console.error('Upload error', error);\n    });\n  }\n  sendAttachmentMessage(attachmentId) {\n    this.socketService.send(this.messagecontent || \"\", this.channel, this.currentGroupString, attachmentId);\n  }\n  sendOnlyMessage() {\n    this.socketService.send(this.messagecontent, this.channel, this.currentGroupString, 0);\n    this.messagecontent = \"\";\n  }\n  static #_ = this.ctorParameters = () => [{\n    type: UploadService\n  }, {\n    type: HttpClient\n  }, {\n    type: SocketService\n  }, {\n    type: Router\n  }, {\n    type: ActivatedRoute\n  }];\n  static #_2 = this.propDecorators = {\n    chatMessages: [{\n      type: ViewChild,\n      args: ['chatMessages', {\n        static: false\n      }]\n    }]\n  };\n};\nChatComponent = __decorate([Component({\n  selector: 'app-chat',\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], ChatComponent);\n//   sendMessage() {\n//     let attachmentId = \"dummieattachmentID\"; // Assuming server responds with an ID for the uploaded attachment\n//     if (this.attachmentFile) {\n//       const formData = new FormData();\n//       formData.append('photo', this.attachmentFile);\n//       formData.append('attachmentID', this.attachmentFile);\n//       console.log(\"username sent\");\n//       this.uploadService.uploadAttachment(formData).subscribe(response => {\n//         console.log('Upload successful', response);\n//         if (this.messagecontent) {\n//           // Send the message along with the attachment ID\n//           this.socketService.send(this.messagecontent, this.channel, this.currentGroupString, attachmentId);\n//           this.messagecontent = \"\";\n//         }\n//         // Maybe reset the attachment after sending\n//         this.attachmentFile = null;\n//       }, error => {\n//         console.error('Upload error', error);\n//         // Handle upload errors\n//       });\n//     } else if (this.messagecontent) {\n//       // If there's no attachment, but there's message content, send the message\n//       this.socketService.send(this.messagecontent, this.channel, this.currentGroupString, attachmentId);\n//       this.messagecontent = \"\";\n//     }\n//   }","map":{"version":3,"names":["Component","ActivatedRoute","Router","SocketService","HttpClient","HttpHeaders","ViewChild","UploadService","BACKEND_URL","httpOptions","headers","ChatComponent","constructor","uploadService","http","socketService","router","route","messagecontent","currentChannel","messages","attachmentFile","attachmentId","ngOnInit","initSocket","URL","attachmentURL","storedUser","window","sessionStorage","getItem","loggedInUser","JSON","parse","queryParams","subscribe","params","channel","currentGroupString","initIoConnection","join","fetchPreviousMessages","ngAfterViewChecked","scrollToBottom","groupName","channelName","url","get","data","console","log","error","chatMessages","chat","nativeElement","scrollTop","scrollHeight","onFileSelected","event","target","files","ioConnection","unsubscribe","getMessage","newMessage","username","profilePic","push","sendMessage","uploadAttachment","sendOnlyMessage","formData","FormData","append","response","sendAttachmentMessage","send","_","args","static","__decorate","selector","template","__NG_CLI_RESOURCE__0"],"sources":["/Users/frazerlinscott/Desktop/Software Frameworks/Assignments/Assignment1_SoftwareFrames_s2930588/src/app/chat/chat.component.ts"],"sourcesContent":["import { Component, OnInit, } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {SocketService} from 'src/app/service/socket.service';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport {FormsModule} from '@angular/forms';\nimport { Message } from 'server/models/messageModel';\nimport {ViewChild, ElementRef, AfterViewChecked } from '@angular/core';\nimport { UploadService } from '../service/upload.service';\nimport { Observable } from 'rxjs';\nimport { UploadResponse } from 'server/models/interfaces';\n\nimport { CommonModule } from '@angular/common';\n\n\n\nconst BACKEND_URL = \"http://localhost:3000\";\n\nconst httpOptions = {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n};\n\n@Component({\n  selector: 'app-chat',\n  templateUrl: './chat.component.html',\n  styleUrls: ['./chat.component.css']\n})\n\n\nexport class ChatComponent implements OnInit, AfterViewChecked {\n\n  @ViewChild('chatMessages', { static: false }) chatMessages?: ElementRef;\n\n  messagecontent: string=\"\";\n  //messages: string[] = [];\n  ioConnection:any;\n  channel: any;\n  currentChannel: string | null = null;\n  loggedInUser : any;\n  messages: Message[] = [];\n\n  profilePicPath: any;\n\n  attachmentFile: File | null = null;\n \n  group: any;\n  currentGroupString:any\n  URL: any;\n  attachmentId: number = 1;\n  attachmentURL: any;\n\n  constructor (private uploadService: UploadService, private http: HttpClient, private socketService: SocketService, private router: Router, private route: ActivatedRoute) { }\n\n  ngOnInit(): void {\n    this.socketService.initSocket();\n\n    this.URL = BACKEND_URL+\"/\"\n    this.attachmentURL = BACKEND_URL+\"/attachments/\"\n\n    const storedUser = window.sessionStorage.getItem('current.user');\n    if (storedUser) {\n\n      this.loggedInUser = JSON.parse(storedUser);\n      //console.log(this.loggedInUser.username)\n    }\n    this.route.queryParams.subscribe(params => {\n      this.channel = params['channel'];\n      this.currentGroupString = params['currentGroup'];\n\n        this.initIoConnection();\n\n        this.socketService.join(this.channel);\n\n        this.fetchPreviousMessages(this.currentGroupString, this.channel);\n\n        //this.messages = []; // Clear the previous messages when changing the channel.\n    });\n}\n\nngAfterViewChecked(): void {\n  this.scrollToBottom();\n}\n\nfetchPreviousMessages(groupName: string, channelName: string): void {\n  const url = `${BACKEND_URL}/messages?groupName=${groupName}&channelName=${channelName}`;\n  this.http.get<Message[]>(url).subscribe(\n    (data: Message[]) => {\n\n      this.messages = data;\n\n      console.log(this.messages)\n    },\n    error => {\n      console.error(\"Failed to fetch previous messages\", error);\n    }\n  );\n}\n\nprivate scrollToBottom(): void {\n  if (this.chatMessages) {\n      const chat = this.chatMessages.nativeElement;\n      chat.scrollTop = chat.scrollHeight;\n  }\n}\n\nonFileSelected(event: any) {\n  this.attachmentFile = <File>event.target.files[0];\n  console.log(\"File selected: \" +this.attachmentFile)\n}\n\n\ninitIoConnection() {\n  console.log('initIoConnection called');\n\n  if (this.ioConnection) {\n    this.ioConnection.unsubscribe();\n  }\n\n  this.ioConnection = this.socketService.getMessage().subscribe((data: any) => {\n      console.log('Received:', data);\n\n      if (data.channel === this.channel) {\n          const newMessage = data as Message;\n          \n          // Attach profile picture to the new message if it's from the loggedInUser\n          if (newMessage.username === this.loggedInUser.username && !newMessage.profilePic) {\n              newMessage.profilePic = this.loggedInUser.profilePic;\n          }\n\n          this.messages.push(newMessage);\n          console.log(this.messages);\n      }\n  });\n}\n\n\n\nsendMessage() {\n  console.log('Send message')\n\n  if (this.attachmentFile) {\n    console.log(this.messagecontent ? \"Sending both string message and attachment\" : \"Sending only an attachment\");\n    this.uploadAttachment();\n  } else if (this.messagecontent) {\n    console.log(\"Sending only string message\");\n    this.sendOnlyMessage();\n  }\n}\n\nuploadAttachment() {\n  const formData = new FormData();\n  if (this.attachmentFile) {\n    formData.append('photo', this.attachmentFile);\n  }\n\n  this.uploadService.uploadAttachment(formData).subscribe((response: UploadResponse) => {\n    console.log('Upload successful', response);\n    const attachmentId = response.attachmentId;\n      \n      // Send the message (or an empty string if there's no message content)\n      this.sendAttachmentMessage(attachmentId);\n\n      // Reset the attachment and message content after sending\n      this.attachmentFile = null;\n      this.messagecontent = \"\";\n\n  }, error => {\n      console.error('Upload error', error);\n  });\n}\n\nsendAttachmentMessage(attachmentId: number) {\n  this.socketService.send(this.messagecontent || \"\", this.channel, this.currentGroupString, attachmentId);\n}\n\nsendOnlyMessage() {\n  this.socketService.send(this.messagecontent, this.channel, this.currentGroupString, 0);\n  this.messagecontent = \"\";\n}\n\n}\n\n\n//   sendMessage() {\n\n//     let attachmentId = \"dummieattachmentID\"; // Assuming server responds with an ID for the uploaded attachment\n\n//     if (this.attachmentFile) {\n//       const formData = new FormData();\n//       formData.append('photo', this.attachmentFile);\n//       formData.append('attachmentID', this.attachmentFile);\n\n//       console.log(\"username sent\");\n\n//       this.uploadService.uploadAttachment(formData).subscribe(response => {\n//         console.log('Upload successful', response);\n\n//         if (this.messagecontent) {\n//           // Send the message along with the attachment ID\n//           this.socketService.send(this.messagecontent, this.channel, this.currentGroupString, attachmentId);\n//           this.messagecontent = \"\";\n//         }\n\n//         // Maybe reset the attachment after sending\n//         this.attachmentFile = null;\n//       }, error => {\n//         console.error('Upload error', error);\n//         // Handle upload errors\n//       });\n\n//     } else if (this.messagecontent) {\n//       // If there's no attachment, but there's message content, send the message\n//       this.socketService.send(this.messagecontent, this.channel, this.currentGroupString, attachmentId);\n//       this.messagecontent = \"\";\n//     }\n//   }\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}