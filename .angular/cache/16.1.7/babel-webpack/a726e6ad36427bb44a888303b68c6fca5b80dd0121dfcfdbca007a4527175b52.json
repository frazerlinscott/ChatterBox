{"ast":null,"code":"import { TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { FormsModule } from '@angular/forms';\nimport { ChatComponent } from './chat.component';\nimport { UploadService } from '../service/upload.service';\nimport { RouterTestingModule } from '@angular/router/testing'; // Import RouterTestingModule\ndescribe('ChatComponent', () => {\n  let component;\n  let fixture;\n  let uploadService;\n  let httpMock;\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      declarations: [ChatComponent],\n      imports: [HttpClientTestingModule, FormsModule, RouterTestingModule],\n      providers: [\n        // No need to provide ActivatedRoute\n      ]\n    });\n    fixture = TestBed.createComponent(ChatComponent);\n    component = fixture.componentInstance;\n    uploadService = TestBed.inject(UploadService);\n    httpMock = TestBed.inject(HttpTestingController);\n    fixture.detectChanges();\n  });\n  afterEach(() => {\n    httpMock.verify();\n  });\n  it('should create', () => {\n    expect(component).toBeTruthy();\n    // Expect an HTTP request\n    const req = httpMock.expectOne('http://localhost:3000/messages?groupName=undefined&channelName=undefined');\n    // Check if the request method is GET (or POST/PUT/DELETE as per your component's logic)\n    expect(req.request.method).toBe('GET'); // Change 'GET' to the expected method\n    // Provide a mock response\n    const mockResponse = {\n      // Your mock response data\n    };\n    req.flush(mockResponse); // Flush the request with the mock response\n  });\n});","map":{"version":3,"names":["TestBed","HttpClientTestingModule","HttpTestingController","FormsModule","ChatComponent","UploadService","RouterTestingModule","describe","component","fixture","uploadService","httpMock","beforeEach","configureTestingModule","declarations","imports","providers","createComponent","componentInstance","inject","detectChanges","afterEach","verify","it","expect","toBeTruthy","req","expectOne","request","method","toBe","mockResponse","flush"],"sources":["/Users/frazerlinscott/Desktop/Software Frameworks/Assignments/Assignment1_SoftwareFrames_s2930588/src/app/chat/chat.component.spec.ts"],"sourcesContent":["import { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { FormsModule } from '@angular/forms';\nimport { ChatComponent } from './chat.component';\nimport { UploadService } from '../service/upload.service';\nimport { RouterTestingModule } from '@angular/router/testing'; // Import RouterTestingModule\n\ndescribe('ChatComponent', () => {\n  let component: ChatComponent;\n  let fixture: ComponentFixture<ChatComponent>;\n  let uploadService: UploadService;\n  let httpMock: HttpTestingController;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      declarations: [ChatComponent],\n      imports: [HttpClientTestingModule, FormsModule, RouterTestingModule], // Add RouterTestingModule here\n      providers: [\n        // No need to provide ActivatedRoute\n      ]\n    });\n\n    fixture = TestBed.createComponent(ChatComponent);\n    component = fixture.componentInstance;\n    uploadService = TestBed.inject(UploadService);\n    httpMock = TestBed.inject(HttpTestingController);\n\n    fixture.detectChanges();\n  });\n\n  afterEach(() => {\n    httpMock.verify();\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n    \n    // Expect an HTTP request\n    const req = httpMock.expectOne('http://localhost:3000/messages?groupName=undefined&channelName=undefined');\n  \n    // Check if the request method is GET (or POST/PUT/DELETE as per your component's logic)\n    expect(req.request.method).toBe('GET'); // Change 'GET' to the expected method\n  \n    // Provide a mock response\n    const mockResponse = {\n      // Your mock response data\n    };\n    req.flush(mockResponse); // Flush the request with the mock response\n  });\n  \n});\n"],"mappings":"AAAA,SAA2BA,OAAO,QAAQ,uBAAuB;AACjE,SAASC,uBAAuB,EAAEC,qBAAqB,QAAQ,8BAA8B;AAC7F,SAASC,WAAW,QAAQ,gBAAgB;AAC5C,SAASC,aAAa,QAAQ,kBAAkB;AAChD,SAASC,aAAa,QAAQ,2BAA2B;AACzD,SAASC,mBAAmB,QAAQ,yBAAyB,CAAC,CAAC;AAE/DC,QAAQ,CAAC,eAAe,EAAE,MAAK;EAC7B,IAAIC,SAAwB;EAC5B,IAAIC,OAAwC;EAC5C,IAAIC,aAA4B;EAChC,IAAIC,QAA+B;EAEnCC,UAAU,CAAC,MAAK;IACdZ,OAAO,CAACa,sBAAsB,CAAC;MAC7BC,YAAY,EAAE,CAACV,aAAa,CAAC;MAC7BW,OAAO,EAAE,CAACd,uBAAuB,EAAEE,WAAW,EAAEG,mBAAmB,CAAC;MACpEU,SAAS,EAAE;QACT;MAAA;KAEH,CAAC;IAEFP,OAAO,GAAGT,OAAO,CAACiB,eAAe,CAACb,aAAa,CAAC;IAChDI,SAAS,GAAGC,OAAO,CAACS,iBAAiB;IACrCR,aAAa,GAAGV,OAAO,CAACmB,MAAM,CAACd,aAAa,CAAC;IAC7CM,QAAQ,GAAGX,OAAO,CAACmB,MAAM,CAACjB,qBAAqB,CAAC;IAEhDO,OAAO,CAACW,aAAa,EAAE;EACzB,CAAC,CAAC;EAEFC,SAAS,CAAC,MAAK;IACbV,QAAQ,CAACW,MAAM,EAAE;EACnB,CAAC,CAAC;EAEFC,EAAE,CAAC,eAAe,EAAE,MAAK;IACvBC,MAAM,CAAChB,SAAS,CAAC,CAACiB,UAAU,EAAE;IAE9B;IACA,MAAMC,GAAG,GAAGf,QAAQ,CAACgB,SAAS,CAAC,0EAA0E,CAAC;IAE1G;IACAH,MAAM,CAACE,GAAG,CAACE,OAAO,CAACC,MAAM,CAAC,CAACC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;IAExC;IACA,MAAMC,YAAY,GAAG;MACnB;IAAA,CACD;IACDL,GAAG,CAACM,KAAK,CAACD,YAAY,CAAC,CAAC,CAAC;EAC3B,CAAC,CAAC;AAEJ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}