{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\n//import { UserDataService } from 'src/app/service/user-data.service';\nimport { HttpHeaders } from '@angular/common/http';\nimport { Group } from 'server/routes/groupModel';\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\nconst BACKEND_URL = \"http://localhost:3000\";\nexport let GroupsComponent = class GroupsComponent {\n  constructor(http, router, cdr) {\n    this.http = http;\n    this.router = router;\n    this.cdr = cdr;\n    this.groups = [];\n    this.superGroups = [];\n    this.groupChannels = [];\n    this.isUniqueGroup = true;\n    this.isUser = true;\n    this.isAdmin = true;\n    this.isSuperAdmin = true;\n    this.noRequests = true;\n    this.numberOfRequests = 0;\n    this.numberOfAdminRequests = 0;\n    this.isButtonDisabled = false;\n    this.buttonDisabledStates = {};\n    this.group = new Group(0, \" \", \" \", [], [], [], [], {}, true);\n  }\n  ngOnInit() {\n    const storedUser = window.sessionStorage.getItem('current.user');\n    if (storedUser) {\n      this.loggedInUser = JSON.parse(storedUser);\n      console.log(this.loggedInUser.role);\n    }\n    if (this.loggedInUser.role === 1) {\n      this.isUser = true;\n      this.isAdmin = false;\n      this.isSuperAdmin = false;\n    } else if (this.loggedInUser.role === 2) {\n      this.isUser = false;\n      this.isAdmin = true;\n      this.isSuperAdmin = false;\n    } else if (this.loggedInUser.role === 3) {\n      this.isUser = false;\n      this.isAdmin = false;\n      this.isSuperAdmin = true;\n    }\n    console.log(this.isSuperAdmin);\n    this.getGroups();\n    this.getUsers();\n    this.http.get(BACKEND_URL + \"/groups\").subscribe(groupsNames => {\n      this.allGroupNames = groupsNames;\n    });\n  }\n  onGroupCardClick(group) {\n    this.selectedGroup = group;\n    this.router.navigate(['/channels'], {\n      queryParams: {\n        yourKey: JSON.stringify(group)\n      }\n    });\n  }\n  requestButton(group) {\n    //console.log(this.loggedInUser.username)\n    group.userRequests.push(this.loggedInUser.username);\n    //console.log(group)\n    this.http.post(BACKEND_URL + \"/update-groups\", group).subscribe(response => {\n      console.log('User details updated on the server.', response);\n      //refesh User list \n      this.getGroups();\n    }, error => {\n      console.error('There was an error updating the user details on the server.', error);\n      alert('Error updating profile. Please try again.');\n    });\n    this.buttonDisabledStates[group.groupID] = true;\n  }\n  editGroupUsers(group) {\n    this.selectedGroup = group;\n    console.log(group);\n    console.log(this.users);\n    console.log(this.groups);\n    this.userNotinGroup;\n    this.usersInGroup;\n    // Get all usernames\n    // Filter usernames that are in group.members\n    this.usersInGroup = this.usernames.filter(username => group.members.includes(username));\n    // Filter usernames that are not in group.members\n    this.userNotinGroup = this.usernames.filter(username => !group.members.includes(username));\n    $('#editGroupUsers').modal('show');\n  }\n  addUserFromGroup(group, username) {\n    console.log(\"add \" + username + \" from\" + group);\n    console.log(group);\n    group.members.push(username);\n    this.http.post(BACKEND_URL + \"/update-groups\", group).subscribe(response => {\n      console.log('User details updated on the server.', response);\n      //refesh User list \n      this.getGroups();\n      this.getUsers();\n      this.editGroupUsers(group);\n    }, error => {\n      console.error('There was an error updating the user details on the server.', error);\n      alert('Error updating profile. Please try again.');\n    });\n  }\n  removeUserFromGroup(group, username) {\n    const index = group.members.indexOf(username);\n    group.members.splice(index, 1);\n    this.http.post(BACKEND_URL + \"/update-groups\", group).subscribe(response => {\n      console.log('User details updated on the server.', response);\n      //refesh User list \n      this.getGroups();\n      this.getUsers();\n      this.editGroupUsers(group);\n    }, error => {\n      console.error('There was an error updating the user details on the server.', error);\n      alert('Error updating profile. Please try again.');\n    });\n  }\n  onAddGroup() {\n    console.log(\"Add Group button clicked\");\n    $('#addGroupModal').modal('show');\n  }\n  onGroupInput() {\n    this.isUniqueGroup = !this.allGroupNames.includes(this.newGroupName);\n    console.log(this.isUniqueGroup);\n  }\n  addChannel() {\n    if (this.newChannelName && !this.groupChannels.includes(this.newChannelName)) {\n      this.groupChannels.push(this.newChannelName);\n      this.newChannelName = '';\n    }\n  }\n  leaveGroup(group) {\n    console.log(group);\n    console.log(this.loggedInUser.username);\n    // Remove user from group.members\n    group.members = group.members.filter(member => member !== this.loggedInUser.username);\n    // Loop through each channel in group.channels and remove the user\n    for (const channelName in group.channels) {\n      group.channels[channelName] = group.channels[channelName].filter(member => member !== this.loggedInUser.username);\n    }\n    this.http.post(BACKEND_URL + \"/update-groups\", group).subscribe(response => {\n      //refesh User list \n      this.getGroups();\n    }, error => {\n      console.error('There was an error updating the user details on the server.', error);\n      alert('Error updating profile. Please try again.');\n    });\n  }\n  saveGroup() {\n    console.log(this.newGroupName);\n    console.log(this.groupChannels);\n    this.GetNewGroupID();\n    console.log(this.newGroupID);\n    let channelsObject = {};\n    this.groupChannels.forEach(channel => {\n      channelsObject[channel] = [];\n    });\n    if (this.isUniqueGroup === true) {\n      this.group.groupID = this.newGroupID;\n      this.group.groupName = this.newGroupName;\n      this.group.createdBy = this.loggedInUser.username;\n      this.group.groupAdmins = [this.loggedInUser.username];\n      this.group.userRequests = [];\n      this.group.members = [this.loggedInUser.username];\n      this.group.channels = channelsObject;\n      this.group.valid = true;\n      console.log(this.group);\n      this.http.post(BACKEND_URL + \"/update-groups\", this.group).subscribe(response => {\n        console.log('User details updated on the server.', response);\n        //refesh User list \n        this.getGroups();\n        this.cdr.detectChanges();\n      }, error => {\n        console.error('There was an error updating the user details on the server.', error);\n        alert('Error updating profile. Please try again.');\n      });\n      this.closeModal(\"newGroup\");\n    } else {\n      alert(\"Group already exists\");\n    }\n    //location.reload();\n  }\n\n  closeModal(modalType) {\n    if (modalType == \"newGroup\") {\n      this.group = {\n        groupID: 0,\n        groupName: \"\",\n        createdBy: this.loggedInUser.username,\n        adminRequests: [],\n        groupAdmins: [],\n        userRequests: [],\n        members: [],\n        channels: {},\n        valid: true\n      };\n      this.newGroupName = '';\n      this.groupChannels = [];\n      //console.log(this.group)\n      $('#addGroupModal').modal('hide');\n    }\n    if (modalType == \"requestApproval\") {\n      $('#approveRequests').modal('hide');\n    }\n    if (modalType == \"requestAdminApproval\") {\n      $('#approveAdminRequests').modal('hide');\n    }\n    if (modalType == \"editUsers\") {\n      $('#editGroupUsers').modal('hide');\n    }\n  }\n  getUsers() {\n    this.http.get(BACKEND_URL + \"/all-users\", httpOptions).subscribe(data => {\n      if (data) {\n        this.users = data;\n        //console.log(this.users)\n        this.usernames = this.users.filter(u => u.valid).map(u => u.username);\n        //console.log(this.usernames);\n      } else {\n        alert(\"no Data Soz\");\n      }\n    }, error => {\n      console.error('There was an error:', error);\n    });\n  }\n  getGroups() {\n    this.http.get(BACKEND_URL + \"/all-groups\", httpOptions).subscribe(data => {\n      if (data) {\n        // All groups that are valid\n        this.superGroups = data.filter(group => group.valid === true);\n        const quarterLength = Math.ceil(this.superGroups.length / 4);\n        this.firstQuarterGroups = this.superGroups.slice(0, quarterLength);\n        this.secondQuarterGroups = this.superGroups.slice(quarterLength, quarterLength * 2);\n        this.thirdQuarterGroups = this.superGroups.slice(quarterLength * 2, quarterLength * 3);\n        this.fourthQuarterGroups = this.superGroups.slice(quarterLength * 3);\n        // Rest of your code remains unchanged...\n        this.groups = this.superGroups;\n        // Groups created by loggedInUser\n        this.myGroups = this.groups.filter(group => group.createdBy === this.loggedInUser.username || group.groupAdmins.includes(this.loggedInUser.username));\n        // Groups that loggedInUser is a member of but not created by them\n        this.joinedGroups = this.groups.filter(group => group.members.includes(this.loggedInUser.username) && group.createdBy !== this.loggedInUser.username && !group.groupAdmins.includes(this.loggedInUser.username));\n        // Groups that loggedInUser has neither created nor joined\n        this.otherGroups = this.groups.filter(group => group.createdBy !== this.loggedInUser.username && !group.members.includes(this.loggedInUser.username));\n      } else {\n        alert(\"no Data Soz\");\n      }\n    }, error => {\n      console.error('There was an error:', error);\n    });\n  }\n  GetNewGroupID() {\n    if (this.groups && this.groups.length > 0) {\n      this.newGroupID = this.groups[this.groups.length - 1].groupID + 1;\n    } else {\n      this.newGroupID = 1;\n    }\n  }\n  showRequests() {\n    this.getGroups();\n    // this.getRequests()\n    $('#approveRequests').modal('show');\n    if (this.groups.length > 0) {\n      //this.noRequests=false\n      this.groupsNeedApproval = this.groups.filter(group => group.userRequests && group.userRequests.length > 0);\n    }\n  }\n  requestAdminButton(group) {\n    //console.log(this.loggedInUser.username)\n    group.adminRequests.push(this.loggedInUser.username);\n    this.http.post(BACKEND_URL + \"/update-groups\", group).subscribe(response => {\n      console.log('User details updated on the server.', response);\n      //refesh User list \n      this.getGroups();\n    }, error => {\n      console.error('There was an error updating the user details on the server.', error);\n      alert('Error updating profile. Please try again.');\n    });\n    this.buttonDisabledStates[group.groupID] = true;\n  }\n  deleteGroup(group) {\n    console.log(group);\n    group.valid = false;\n    this.http.post(BACKEND_URL + \"/update-groups\", group).subscribe(response => {\n      console.log('User details updated on the server.', response);\n      //refesh User list \n      this.getGroups();\n    }, error => {\n      console.error('There was an error updating the user details on the server.', error);\n      alert('Error updating profile. Please try again.');\n    });\n  }\n  showAdminRequests() {\n    this.getGroups();\n    $('#approveAdminRequests').modal('show');\n    console.log(this.groups);\n  }\n  approveRequest(group, userRequest) {\n    console.log(group);\n    console.log(userRequest);\n    if (group.userRequests.includes(userRequest)) {\n      group.members.push(userRequest);\n      group.userRequests.splice(group.userRequests.indexOf(userRequest), 1);\n    }\n    this.http.post(BACKEND_URL + \"/update-groups\", group).subscribe(response => {\n      console.log('User details updated on the server.', response);\n      //refesh User list \n      this.getGroups();\n    }, error => {\n      console.error('There was an error updating the user details on the server.', error);\n      alert('Error updating profile. Please try again.');\n    });\n  }\n  approveAdminRequest(group, adminRequest) {\n    console.log(group);\n    console.log(adminRequest);\n    if (group.adminRequests.includes(adminRequest)) {\n      group.groupAdmins.push(adminRequest);\n      group.adminRequests.splice(group.adminRequests.indexOf(adminRequest), 1);\n    }\n    console.log(group);\n    this.http.post(BACKEND_URL + \"/update-groups\", group).subscribe(response => {\n      console.log('User details updated on the server.', response);\n      //refesh User list \n      this.getGroups();\n    }, error => {\n      console.error('There was an error updating the user details on the server.', error);\n      alert('Error updating profile. Please try again.');\n    });\n  }\n};\nGroupsComponent = __decorate([Component({\n  selector: 'app-groups',\n  templateUrl: './groups.component.html',\n  styleUrls: ['./groups.component.css']\n})], GroupsComponent);","map":{"version":3,"names":["Component","HttpHeaders","Group","httpOptions","headers","BACKEND_URL","GroupsComponent","constructor","http","router","cdr","groups","superGroups","groupChannels","isUniqueGroup","isUser","isAdmin","isSuperAdmin","noRequests","numberOfRequests","numberOfAdminRequests","isButtonDisabled","buttonDisabledStates","group","ngOnInit","storedUser","window","sessionStorage","getItem","loggedInUser","JSON","parse","console","log","role","getGroups","getUsers","get","subscribe","groupsNames","allGroupNames","onGroupCardClick","selectedGroup","navigate","queryParams","yourKey","stringify","requestButton","userRequests","push","username","post","response","error","alert","groupID","editGroupUsers","users","userNotinGroup","usersInGroup","usernames","filter","members","includes","$","modal","addUserFromGroup","removeUserFromGroup","index","indexOf","splice","onAddGroup","onGroupInput","newGroupName","addChannel","newChannelName","leaveGroup","member","channelName","channels","saveGroup","GetNewGroupID","newGroupID","channelsObject","forEach","channel","groupName","createdBy","groupAdmins","valid","detectChanges","closeModal","modalType","adminRequests","data","u","map","quarterLength","Math","ceil","length","firstQuarterGroups","slice","secondQuarterGroups","thirdQuarterGroups","fourthQuarterGroups","myGroups","joinedGroups","otherGroups","showRequests","groupsNeedApproval","requestAdminButton","deleteGroup","showAdminRequests","approveRequest","userRequest","approveAdminRequest","adminRequest","__decorate","selector","templateUrl","styleUrls"],"sources":["/Users/frazerlinscott/Desktop/Software Frameworks/Assignments/Assignment1_SoftwareFrames_s2930588/src/app/groups/groups.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n//import { UserDataService } from 'src/app/service/user-data.service';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Group } from 'server/routes/groupModel';\n\nimport { ChangeDetectorRef } from '@angular/core';\n\ndeclare var $: any;\n\nconst httpOptions = {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n};\n\nconst BACKEND_URL = \"http://localhost:3000\";\n\n@Component({\n  selector: 'app-groups',\n  templateUrl: './groups.component.html',\n  styleUrls: ['./groups.component.css']\n})\nexport class GroupsComponent implements OnInit {\n\n  loggedInUser : any;\n  users: any;\n  groups: any[] = [];\n  allGroups: any;\n  superGroups: any[] = [];\n\n\n  groupsNeedApproval: any;\n  groupsAdminNeedApproval:any;\n\n  selectedGroup: any;\n\n  newGroupName: any;\n  newChannelName: any;\n  groupChannels: string[] = [];\n\n  newGroupID: any;\n  allGroupNames: any;\n  isUniqueGroup:boolean = true;\n\n  isUser: boolean = true;\n  isAdmin: boolean = true;\n  isSuperAdmin: boolean = true;\n\n  noRequests: boolean = true;\n\n  numberOfRequests: number = 0;\n  numberOfAdminRequests: number = 0;\n\n  isButtonDisabled: boolean = false;\n  buttonDisabledStates: { [groupId: string]: boolean } = {};\n\n  myGroups: any;\n  joinedGroups: any;\n  otherGroups: any;\n\n  userNotinGroup: any;\n  usersInGroup: any;\n\n  usernames: any;\n  firstQuarterGroups: any;\n  secondQuarterGroups: any;\n  thirdQuarterGroups: any;\n  fourthQuarterGroups: any;\n\n  group: Group = new Group(0, \" \", \" \",[], [], [], [], {}, true);\n\n  constructor(private http: HttpClient, private router: Router, private cdr: ChangeDetectorRef) { }\n\n  ngOnInit(): void {\n\n    const storedUser = window.sessionStorage.getItem('current.user');\n    if (storedUser) {\n\n      this.loggedInUser = JSON.parse(storedUser);\n      console.log(this.loggedInUser.role)\n    }\n\n\n  if (this.loggedInUser.role === 1){\n    this.isUser = true\n    this.isAdmin = false\n    this.isSuperAdmin = false\n  }else if (this.loggedInUser.role === 2){\n    this.isUser = false\n    this.isAdmin = true\n    this.isSuperAdmin = false\n  }else if (this.loggedInUser.role === 3){\n    this.isUser = false\n    this.isAdmin = false\n    this.isSuperAdmin = true\n  }\n\n  console.log(this.isSuperAdmin)\n\n    \n    this.getGroups()\n    this.getUsers()\n\n\n\n    this.http.get<string[]>(BACKEND_URL + \"/groups\").subscribe(groupsNames => {\n      this.allGroupNames = groupsNames;\n\n    });\n  }\n\n  onGroupCardClick(group:any ){\n    this.selectedGroup = group;\n\n    this.router.navigate(['/channels'], { queryParams: { yourKey: JSON.stringify(group) }})\n  }\n\n  requestButton(group:any){\n    \n    //console.log(this.loggedInUser.username)\n\n    group.userRequests.push(this.loggedInUser.username);\n\n    //console.log(group)\n\n    this.http.post(BACKEND_URL+\"/update-groups\", group).subscribe(\n      response => {\n          console.log('User details updated on the server.', response);\n\n          //refesh User list \n          this.getGroups();\n      },\n      error => {\n          console.error('There was an error updating the user details on the server.', error);\n          alert('Error updating profile. Please try again.');\n      }\n    )\n    this.buttonDisabledStates[group.groupID] = true;\n  }\n\n  editGroupUsers(group:any){\n    this.selectedGroup = group;\n    console.log(group)\n    console.log(this.users)\n    console.log(this.groups)\n\n    this.userNotinGroup\n    this.usersInGroup\n    // Get all usernames\n    // Filter usernames that are in group.members\n    this.usersInGroup = this.usernames.filter((username: any) => group.members.includes(username));\n    // Filter usernames that are not in group.members\n    this.userNotinGroup = this.usernames.filter((username: any) => !group.members.includes(username));\n    $('#editGroupUsers').modal('show');\n  }\n\n  addUserFromGroup(group:any, username:any){\n    console.log(\"add \" + username + \" from\" + group)\n    console.log(group)\n\n    group.members.push(username);\n\n    this.http.post(BACKEND_URL+\"/update-groups\", group).subscribe(\n      response => {\n          console.log('User details updated on the server.', response);\n\n          //refesh User list \n          this.getGroups();\n          this.getUsers();\n          this.editGroupUsers(group)\n      },\n      error => {\n          console.error('There was an error updating the user details on the server.', error);\n          alert('Error updating profile. Please try again.');\n      }\n    )\n  }\n\n  removeUserFromGroup(group:any, username:any){\n    const index = group.members.indexOf(username);\n    group.members.splice(index, 1)\n\n    this.http.post(BACKEND_URL+\"/update-groups\", group).subscribe(\n      response => {\n          console.log('User details updated on the server.', response);\n\n          //refesh User list \n          this.getGroups();\n          this.getUsers();\n          this.editGroupUsers(group)\n      },\n      error => {\n          console.error('There was an error updating the user details on the server.', error);\n          alert('Error updating profile. Please try again.');\n      }\n    )\n  }\n\n  onAddGroup() {\n    console.log(\"Add Group button clicked\");\n    $('#addGroupModal').modal('show');\n  }\n\n  onGroupInput() {\n    this.isUniqueGroup = !this.allGroupNames.includes(this.newGroupName);\n    console.log(this.isUniqueGroup)\n  }\n\n  addChannel() {\n    if (this.newChannelName && !this.groupChannels.includes(this.newChannelName)) {\n      this.groupChannels.push(this.newChannelName);\n      this.newChannelName = '';\n    }\n  }\n\n  leaveGroup(group:any){\n    console.log(group)\n    console.log(this.loggedInUser.username)\n  \n      // Remove user from group.members\n      group.members = group.members.filter((member: any) => member !== this.loggedInUser.username);\n  \n      // Loop through each channel in group.channels and remove the user\n      for (const channelName in group.channels) {\n          group.channels[channelName] = group.channels[channelName].filter((member: any) => member !== this.loggedInUser.username);\n      }\n      this.http.post(BACKEND_URL+\"/update-groups\", group).subscribe(\n        response => {\n  \n            //refesh User list \n            this.getGroups();\n        },\n        error => {\n            console.error('There was an error updating the user details on the server.', error);\n            alert('Error updating profile. Please try again.');\n        }\n      )\n  }\n\n  saveGroup(){\n    console.log(this.newGroupName)\n    console.log(this.groupChannels)\n\n    this.GetNewGroupID()\n\n    console.log(this.newGroupID)\n\n    let channelsObject: { [channelName: string]: string[] } = {};\n      this.groupChannels.forEach(channel => {\n        channelsObject[channel] = [];\n      });\n\n    if (this.isUniqueGroup === true){\n      this.group.groupID = this.newGroupID;\n      this.group.groupName = this.newGroupName;\n      this.group.createdBy = this.loggedInUser.username;\n      this.group.groupAdmins = [this.loggedInUser.username];\n      this.group.userRequests = [];\n      this.group.members = [this.loggedInUser.username];\n      this.group.channels = channelsObject;\n      this.group.valid = true;\n  \n      console.log(this.group)\n  \n      this.http.post(BACKEND_URL+\"/update-groups\", this.group).subscribe(\n        response => {\n            console.log('User details updated on the server.', response);\n  \n            //refesh User list \n            this.getGroups();\n            this.cdr.detectChanges();\n        },\n        error => {\n            console.error('There was an error updating the user details on the server.', error);\n            alert('Error updating profile. Please try again.');\n        }\n      )\n      this.closeModal(\"newGroup\")\n    }else{\n      alert(\"Group already exists\");\n    }\n    //location.reload();\n  }\n\n  closeModal(modalType: string | undefined){\n\n    if(modalType == \"newGroup\"){\n\n      this.group = {\n        groupID: 0,\n        groupName: \"\",\n        createdBy: this.loggedInUser.username,\n        adminRequests:[],\n        groupAdmins: [],\n        userRequests: [],\n        members: [],\n        channels: {},\n        valid: true\n    };\n  \n    this.newGroupName=''\n  \n    this.groupChannels=[]\n  \n    //console.log(this.group)\n      $('#addGroupModal').modal('hide');\n    }\n\n    if(modalType == \"requestApproval\"){\n      $('#approveRequests').modal('hide');\n    } \n\n    if(modalType == \"requestAdminApproval\"){\n      $('#approveAdminRequests').modal('hide');\n    } \n\n    if(modalType == \"editUsers\"){\n      $('#editGroupUsers').modal('hide');\n    } \n\n  }\n\n  getUsers(){\n    this.http.get(BACKEND_URL + \"/all-users\", httpOptions)\n    .subscribe(\n        (data: any) => {\n            if (data) {\n              this.users = data\n              //console.log(this.users)\n              this.usernames = this.users.filter((u: { valid: any; }) => u.valid).map((u: { username: any; }) => u.username);\n              //console.log(this.usernames);\n\n            } else {\n                alert(\"no Data Soz\");\n            }\n        },\n        error => {console.error('There was an error:', error);}\n    );\n  }\n\n  getGroups() {\n    this.http.get(BACKEND_URL + \"/all-groups\", httpOptions)\n    .subscribe(\n        (data: any) => {\n            if (data) {\n                // All groups that are valid\n                this.superGroups = data.filter((group: { valid: boolean; }) => group.valid === true);\n\n                const quarterLength = Math.ceil(this.superGroups.length / 4);\n  \n                this.firstQuarterGroups = this.superGroups.slice(0, quarterLength);\n                this.secondQuarterGroups = this.superGroups.slice(quarterLength, quarterLength * 2);\n                this.thirdQuarterGroups = this.superGroups.slice(quarterLength * 2, quarterLength * 3);\n                this.fourthQuarterGroups = this.superGroups.slice(quarterLength * 3);\n\n                // Rest of your code remains unchanged...\n                this.groups = this.superGroups;\n\n                // Groups created by loggedInUser\n                this.myGroups = this.groups.filter((group: { createdBy: any; groupAdmins: any; }) => \n                    group.createdBy === this.loggedInUser.username || group.groupAdmins.includes(this.loggedInUser.username));\n\n                // Groups that loggedInUser is a member of but not created by them\n                this.joinedGroups = this.groups.filter((group: { members: string | any[]; createdBy: any; groupAdmins: any; }) => \n                    group.members.includes(this.loggedInUser.username) && group.createdBy !== this.loggedInUser.username && !group.groupAdmins.includes(this.loggedInUser.username));\n\n                // Groups that loggedInUser has neither created nor joined\n                this.otherGroups = this.groups.filter((group: { createdBy: any; members: string | any[]; }) => \n                    group.createdBy !== this.loggedInUser.username && !group.members.includes(this.loggedInUser.username));\n            } else {\n                alert(\"no Data Soz\");\n            }\n        },\n        error => {\n            console.error('There was an error:', error);\n        }\n    );\n}\n\n\n  GetNewGroupID(){\n    if (this.groups && this.groups.length > 0) {\n      this.newGroupID = this.groups[this.groups.length - 1].groupID + 1;\n  } else {\n      this.newGroupID = 1;\n  }\n  }\n\n  showRequests(){\n    this.getGroups();  \n    // this.getRequests()\n\n    $('#approveRequests').modal('show');\n\n    if(this.groups.length > 0){\n      //this.noRequests=false\n      this.groupsNeedApproval = this.groups.filter((group: { userRequests: string | any[]; }) => group.userRequests && group.userRequests.length > 0);\n    }\n  }\n\n  requestAdminButton(group:any){\n        \n        //console.log(this.loggedInUser.username)\n\n        group.adminRequests.push(this.loggedInUser.username);\n\n\n        this.http.post(BACKEND_URL+\"/update-groups\", group).subscribe(\n          response => {\n              console.log('User details updated on the server.', response);\n\n              //refesh User list \n              this.getGroups();\n          },\n          error => {\n              console.error('There was an error updating the user details on the server.', error);\n              alert('Error updating profile. Please try again.');\n          }\n        )\n        this.buttonDisabledStates[group.groupID] = true;\n  }\n\n  deleteGroup(group:any){\n\n    console.log(group)\n\n    group.valid = false\n\n    this.http.post(BACKEND_URL+\"/update-groups\", group).subscribe(\n      response => {\n          console.log('User details updated on the server.', response);\n\n          //refesh User list \n          this.getGroups();\n      },\n      error => {\n          console.error('There was an error updating the user details on the server.', error);\n          alert('Error updating profile. Please try again.');\n      }\n    )\n  }\n\n  showAdminRequests(){\n    this.getGroups();  \n\n    $('#approveAdminRequests').modal('show');\n\n    console.log(this.groups)\n  }\n\n  approveRequest(group: any, userRequest: string){\n    console.log(group);\n    console.log(userRequest);\n\n    if (group.userRequests.includes(userRequest)) {\n      group.members.push(userRequest);\n      group.userRequests.splice(group.userRequests.indexOf(userRequest), 1);\n  }\n\n  this.http.post(BACKEND_URL+\"/update-groups\", group).subscribe(\n    response => {\n        console.log('User details updated on the server.', response);\n\n        //refesh User list \n        this.getGroups();\n    },\n    error => {\n        console.error('There was an error updating the user details on the server.', error);\n        alert('Error updating profile. Please try again.');\n    }\n  )\n\n  }\n\n  approveAdminRequest(group: any, adminRequest: string){\n  console.log(group);\n  console.log(adminRequest);\n\n  if (group.adminRequests.includes(adminRequest)) {\n    group.groupAdmins.push(adminRequest);\n    group.adminRequests.splice(group.adminRequests.indexOf(adminRequest), 1);\n  }\n  console.log(group);\n\n  this.http.post(BACKEND_URL+\"/update-groups\", group).subscribe(\n    response => {\n        console.log('User details updated on the server.', response);\n\n        //refesh User list \n        this.getGroups();\n    },\n    error => {\n        console.error('There was an error updating the user details on the server.', error);\n        alert('Error updating profile. Please try again.');\n    }\n  )\n  }\n\n\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}