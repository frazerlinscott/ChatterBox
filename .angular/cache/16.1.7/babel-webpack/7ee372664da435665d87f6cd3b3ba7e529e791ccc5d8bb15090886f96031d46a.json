{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserDataService {\n  constructor(http) {\n    this.http = http;\n    this.BACKEND_URL = \"http://localhost:3000\"; // replace with your backend endpoint\n  }\n\n  getUserData() {\n    // If you have to send some data with the POST request (like authentication info), add it as the second parameter\n    return this.http.post(this.BACKEND_URL + \"/all-users\", {});\n  }\n}\nUserDataService.ɵfac = function UserDataService_Factory(t) {\n  return new (t || UserDataService)(i0.ɵɵinject(i1.HttpClient));\n};\nUserDataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserDataService,\n  factory: UserDataService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["UserDataService","constructor","http","BACKEND_URL","getUserData","post","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/Users/frazerlinscott/Desktop/Software Frameworks/Assignments/Assignment1_SoftwareFrames_s2930588/src/app/service/user-data.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserDataService {\n\n  private BACKEND_URL = \"http://localhost:3000\"; // replace with your backend endpoint\n\n  constructor(private http: HttpClient) { }\n\n  getUserData(): Observable<any> {\n    // If you have to send some data with the POST request (like authentication info), add it as the second parameter\n    return this.http.post<any>(this.BACKEND_URL+ \"/all-users\", {});\n  }\n}\n"],"mappings":";;AAOA,OAAM,MAAOA,eAAe;EAI1BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,WAAW,GAAG,uBAAuB,CAAC,CAAC;EAEP;;EAExCC,WAAWA,CAAA;IACT;IACA,OAAO,IAAI,CAACF,IAAI,CAACG,IAAI,CAAM,IAAI,CAACF,WAAW,GAAE,YAAY,EAAE,EAAE,CAAC;EAChE;;AATWH,eAAe,C;mBAAfA,eAAe,EAAAM,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAfT,eAAe,C;SAAfA,eAAe;EAAAU,OAAA,EAAfV,eAAe,CAAAW,IAAA;EAAAC,UAAA,EAFd;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}