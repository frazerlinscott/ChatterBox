{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { HttpHeaders } from '@angular/common/http';\nimport { ViewChild } from '@angular/core';\nconst BACKEND_URL = \"http://localhost:3000\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\nexport let ChatComponent = class ChatComponent {\n  constructor(uploadService, http, socketService, router, route) {\n    this.uploadService = uploadService;\n    this.socketService = socketService;\n    this.router = router;\n    this.route = route;\n    this.messagecontent = \"\";\n    this.currentChannel = null;\n    this.messages = [];\n  }\n  ngOnInit() {\n    this.socketService.initSocket();\n    this.URL = BACKEND_URL + \"/\";\n    const storedUser = window.sessionStorage.getItem('current.user');\n    if (storedUser) {\n      this.loggedInUser = JSON.parse(storedUser);\n      //console.log(this.loggedInUser.username)\n    }\n\n    this.route.queryParams.subscribe(params => {\n      this.channel = params['channel'];\n      this.currentGroupString = params['currentGroup'];\n      this.initIoConnection();\n      this.socketService.join(this.channel);\n      this.fetchPreviousMessages(this.currentGroupString, this.channel);\n      //this.messages = []; // Clear the previous messages when changing the channel.\n    });\n  }\n\n  ngAfterViewChecked() {\n    this.scrollToBottom();\n  }\n  fetchPreviousMessages(groupName, channelName) {\n    const url = `${BACKEND_URL}/messages?groupName=${groupName}&channelName=${channelName}`;\n    this.http.get(url).subscribe(data => {\n      this.messages = data;\n      console.log(this.messages);\n    }, error => {\n      console.error(\"Failed to fetch previous messages\", error);\n    });\n  }\n  scrollToBottom() {\n    if (this.chatMessages) {\n      const chat = this.chatMessages.nativeElement;\n      chat.scrollTop = chat.scrollHeight;\n    }\n  }\n  onFileSelected(event) {\n    this.attachmentFile = event.target.files[0];\n  }\n  initIoConnection() {\n    console.log('initIoConnection called');\n    if (this.ioConnection) {\n      this.ioConnection.unsubscribe();\n    }\n    this.ioConnection = this.socketService.getMessage().subscribe(data => {\n      console.log('Received:', data);\n      if (data.channel === this.channel) {\n        const newMessage = data;\n        // Attach profile picture to the new message if it's from the loggedInUser\n        if (newMessage.username === this.loggedInUser.username && !newMessage.profilePic) {\n          newMessage.profilePic = this.loggedInUser.profilePic;\n        }\n        this.messages.push(newMessage);\n        console.log(this.messages);\n      }\n    });\n  }\n  sendMessage() {\n    if (this.messagecontent) {\n      this.socketService.send(this.messagecontent, this.channel, this.currentGroupString);\n      this.messagecontent = \"\";\n    }\n  }\n};\n__decorate([ViewChild('chatMessages', {\n  static: false\n})], ChatComponent.prototype, \"chatMessages\", void 0);\nChatComponent = __decorate([Component({\n  selector: 'app-chat',\n  templateUrl: './chat.component.html',\n  styleUrls: ['./chat.component.css']\n})], ChatComponent);","map":{"version":3,"names":["Component","HttpHeaders","ViewChild","BACKEND_URL","httpOptions","headers","ChatComponent","constructor","uploadService","http","socketService","router","route","messagecontent","currentChannel","messages","ngOnInit","initSocket","URL","storedUser","window","sessionStorage","getItem","loggedInUser","JSON","parse","queryParams","subscribe","params","channel","currentGroupString","initIoConnection","join","fetchPreviousMessages","ngAfterViewChecked","scrollToBottom","groupName","channelName","url","get","data","console","log","error","chatMessages","chat","nativeElement","scrollTop","scrollHeight","onFileSelected","event","attachmentFile","target","files","ioConnection","unsubscribe","getMessage","newMessage","username","profilePic","push","sendMessage","send","__decorate","static","selector","templateUrl","styleUrls"],"sources":["/Users/frazerlinscott/Desktop/Software Frameworks/Assignments/Assignment1_SoftwareFrames_s2930588/src/app/chat/chat.component.ts"],"sourcesContent":["import { Component, OnInit, } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {SocketService} from 'src/app/service/socket.service';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport {FormsModule} from '@angular/forms';\nimport { Message } from 'server/models/messageModel';\nimport {ViewChild, ElementRef, AfterViewChecked } from '@angular/core';\nimport { UploadService } from '../service/upload.service';\n\n\n\nconst BACKEND_URL = \"http://localhost:3000\";\n\nconst httpOptions = {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n};\n\n@Component({\n  selector: 'app-chat',\n  templateUrl: './chat.component.html',\n  styleUrls: ['./chat.component.css']\n})\n\n\nexport class ChatComponent implements OnInit, AfterViewChecked {\n\n  @ViewChild('chatMessages', { static: false }) chatMessages?: ElementRef;\n\n  messagecontent: string=\"\";\n  //messages: string[] = [];\n  ioConnection:any;\n  channel: any;\n  currentChannel: string | null = null;\n  loggedInUser : any;\n  messages: Message[] = [];\n\n  profilePicPath: any;\n\n\n \n  group: any;\n  currentGroupString:any\n  URL: any;\n\n  constructor (private uploadService: UploadServiceprivate http: HttpClient, private socketService: SocketService, private router: Router, private route: ActivatedRoute) { }\n\n  ngOnInit(): void {\n    this.socketService.initSocket();\n\n    this.URL = BACKEND_URL+\"/\"\n\n    const storedUser = window.sessionStorage.getItem('current.user');\n    if (storedUser) {\n\n      this.loggedInUser = JSON.parse(storedUser);\n      //console.log(this.loggedInUser.username)\n    }\n    this.route.queryParams.subscribe(params => {\n      this.channel = params['channel'];\n      this.currentGroupString = params['currentGroup'];\n\n        this.initIoConnection();\n\n        this.socketService.join(this.channel);\n\n        this.fetchPreviousMessages(this.currentGroupString, this.channel);\n\n        //this.messages = []; // Clear the previous messages when changing the channel.\n    });\n}\n\nngAfterViewChecked(): void {\n  this.scrollToBottom();\n}\n\nfetchPreviousMessages(groupName: string, channelName: string): void {\n  const url = `${BACKEND_URL}/messages?groupName=${groupName}&channelName=${channelName}`;\n  this.http.get<Message[]>(url).subscribe(\n    (data: Message[]) => {\n\n      this.messages = data;\n\n      console.log(this.messages)\n    },\n    error => {\n      console.error(\"Failed to fetch previous messages\", error);\n    }\n  );\n}\n\nprivate scrollToBottom(): void {\n  if (this.chatMessages) {\n      const chat = this.chatMessages.nativeElement;\n      chat.scrollTop = chat.scrollHeight;\n  }\n}\n\nonFileSelected(event: any) {\n  this.attachmentFile = <File>event.target.files[0];\n}\n\n\ninitIoConnection() {\n  console.log('initIoConnection called');\n\n  if (this.ioConnection) {\n    this.ioConnection.unsubscribe();\n  }\n\n  this.ioConnection = this.socketService.getMessage().subscribe((data: any) => {\n      console.log('Received:', data);\n\n      if (data.channel === this.channel) {\n          const newMessage = data as Message;\n          \n          // Attach profile picture to the new message if it's from the loggedInUser\n          if (newMessage.username === this.loggedInUser.username && !newMessage.profilePic) {\n              newMessage.profilePic = this.loggedInUser.profilePic;\n          }\n\n          this.messages.push(newMessage);\n          console.log(this.messages);\n      }\n  });\n}\n\nsendMessage() {\n  if (this.messagecontent) {\n    this.socketService.send(this.messagecontent, this.channel, this.currentGroupString);\n    this.messagecontent = \"\";\n  }\n}\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}