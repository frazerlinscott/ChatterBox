{"ast":null,"code":"\"use strict\";\n\n// import { ComponentFixture, TestBed } from '@angular/core/testing';\n// import { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\n// import { FormsModule } from '@angular/forms';\n// import { ChatComponent } from './chat.component';\n// import { UploadService } from '../service/upload.service';\n// import { RouterTestingModule } from '@angular/router/testing'; // Import RouterTestingModule\n// describe('ChatComponent', () => {\n//   let component: ChatComponent;\n//   let fixture: ComponentFixture<ChatComponent>;\n//   let uploadService: UploadService;\n//   let httpMock: HttpTestingController;\n//   beforeEach(() => {\n//     TestBed.configureTestingModule({\n//       declarations: [ChatComponent],\n//       imports: [HttpClientTestingModule, FormsModule, RouterTestingModule], // Add RouterTestingModule here\n//       providers: [\n//         // No need to provide ActivatedRoute\n//       ]\n//     });\n//     fixture = TestBed.createComponent(ChatComponent);\n//     component = fixture.componentInstance;\n//     uploadService = TestBed.inject(UploadService);\n//     httpMock = TestBed.inject(HttpTestingController);\n//     fixture.detectChanges();\n//   });\n//   afterEach(() => {\n//     httpMock.verify();\n//   });\n//   it('should create', () => {\n//     expect(component).toBeTruthy();\n//     // Expect an HTTP request\n//     const req = httpMock.expectOne('http://localhost:3000/messages?groupName=undefined&channelName=undefined');\n//     // Check if the request method is GET (or POST/PUT/DELETE as per your component's logic)\n//     expect(req.request.method).toBe('GET'); // Change 'GET' to the expected method\n//     // Provide a mock response\n//     const mockResponse = {\n//       // Your mock response data\n//     };\n//     req.flush(mockResponse); // Flush the request with the mock response\n//   });\n// });","map":{"version":3,"names":[],"sources":["/Users/frazerlinscott/Desktop/Software Frameworks/Assignments/Assignment1_SoftwareFrames_s2930588/src/app/chat/chat.component.spec.ts"],"sourcesContent":["// import { ComponentFixture, TestBed } from '@angular/core/testing';\n// import { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\n// import { FormsModule } from '@angular/forms';\n// import { ChatComponent } from './chat.component';\n// import { UploadService } from '../service/upload.service';\n// import { RouterTestingModule } from '@angular/router/testing'; // Import RouterTestingModule\n\n// describe('ChatComponent', () => {\n//   let component: ChatComponent;\n//   let fixture: ComponentFixture<ChatComponent>;\n//   let uploadService: UploadService;\n//   let httpMock: HttpTestingController;\n\n//   beforeEach(() => {\n//     TestBed.configureTestingModule({\n//       declarations: [ChatComponent],\n//       imports: [HttpClientTestingModule, FormsModule, RouterTestingModule], // Add RouterTestingModule here\n//       providers: [\n//         // No need to provide ActivatedRoute\n//       ]\n//     });\n\n//     fixture = TestBed.createComponent(ChatComponent);\n//     component = fixture.componentInstance;\n//     uploadService = TestBed.inject(UploadService);\n//     httpMock = TestBed.inject(HttpTestingController);\n\n//     fixture.detectChanges();\n//   });\n\n//   afterEach(() => {\n//     httpMock.verify();\n//   });\n\n//   it('should create', () => {\n//     expect(component).toBeTruthy();\n    \n//     // Expect an HTTP request\n//     const req = httpMock.expectOne('http://localhost:3000/messages?groupName=undefined&channelName=undefined');\n  \n//     // Check if the request method is GET (or POST/PUT/DELETE as per your component's logic)\n//     expect(req.request.method).toBe('GET'); // Change 'GET' to the expected method\n  \n//     // Provide a mock response\n//     const mockResponse = {\n//       // Your mock response data\n//     };\n//     req.flush(mockResponse); // Flush the request with the mock response\n//   });\n  \n// });\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA"},"metadata":{},"sourceType":"script","externalDependencies":[]}