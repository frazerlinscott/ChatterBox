{"ast":null,"code":"import { TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { FormsModule } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport { of } from 'rxjs';\nimport { ChatComponent } from './chat.component';\nimport { UploadService } from '../service/upload.service'; // Import your UploadService\ndescribe('ChatComponent', () => {\n  let component;\n  let fixture;\n  let uploadService; // Declare a variable for your service\n  let httpMock;\n  beforeEach(() => {\n    const mockResponse = {\n      attachmentId: 1,\n      message: 'File uploaded successfully'\n    };\n    TestBed.configureTestingModule({\n      declarations: [ChatComponent],\n      imports: [HttpClientTestingModule, FormsModule],\n      providers: [{\n        provide: ActivatedRoute,\n        useValue: {\n          paramMap: of({\n            get: id => '1'\n          })\n        } // Provide a mock ActivatedRoute\n      }, UploadService // Provide the UploadService\n      ]\n    });\n\n    fixture = TestBed.createComponent(ChatComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n    httpMock = TestBed.inject(HttpTestingController);\n    uploadService = TestBed.inject(UploadService); // Inject the UploadService\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n  it('should test uploadAttachment', () => {\n    const formData = new FormData();\n    spyOn(uploadService, 'uploadAttachment').and.returnValue(of(mockResponse));\n    // Add your test logic for uploadAttachment here\n    // For example:\n    // component.uploadAttachment(formData);\n    // expect(component.attachmentId).toBe(1); // Ensure the component handles the response properly\n  });\n});","map":{"version":3,"names":["TestBed","HttpClientTestingModule","HttpTestingController","FormsModule","ActivatedRoute","of","ChatComponent","UploadService","describe","component","fixture","uploadService","httpMock","beforeEach","mockResponse","attachmentId","message","configureTestingModule","declarations","imports","providers","provide","useValue","paramMap","get","id","createComponent","componentInstance","detectChanges","inject","it","expect","toBeTruthy","formData","FormData","spyOn","and","returnValue"],"sources":["/Users/frazerlinscott/Desktop/Software Frameworks/Assignments/Assignment1_SoftwareFrames_s2930588/src/app/chat/chat.component.spec.ts"],"sourcesContent":["import { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { FormsModule } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport { of } from 'rxjs';\nimport { ChatComponent } from './chat.component';\nimport { UploadService } from '../service/upload.service'; // Import your UploadService\n\ndescribe('ChatComponent', () => {\n  let component: ChatComponent;\n  let fixture: ComponentFixture<ChatComponent>;\n  let uploadService: UploadService; // Declare a variable for your service\n  let httpMock: HttpTestingController;\n\n  beforeEach(() => {\n    const mockResponse = {\n      attachmentId: 1, // Add a valid attachmentId\n      message: 'File uploaded successfully',\n    };\n\n    TestBed.configureTestingModule({\n      declarations: [ChatComponent],\n      imports: [HttpClientTestingModule, FormsModule],\n      providers: [\n        {\n          provide: ActivatedRoute,\n          useValue: { paramMap: of({ get: (id: string) => '1' }) } // Provide a mock ActivatedRoute\n        },\n        UploadService, // Provide the UploadService\n      ],\n    });\n    fixture = TestBed.createComponent(ChatComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n    httpMock = TestBed.inject(HttpTestingController);\n    uploadService = TestBed.inject(UploadService); // Inject the UploadService\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n\n  it('should test uploadAttachment', () => {\n    const formData = new FormData();\n    spyOn(uploadService, 'uploadAttachment').and.returnValue(of(mockResponse));\n\n    // Add your test logic for uploadAttachment here\n\n    // For example:\n    // component.uploadAttachment(formData);\n    // expect(component.attachmentId).toBe(1); // Ensure the component handles the response properly\n  });\n});\n"],"mappings":"AAAA,SAA2BA,OAAO,QAAQ,uBAAuB;AACjE,SAASC,uBAAuB,EAAEC,qBAAqB,QAAQ,8BAA8B;AAC7F,SAASC,WAAW,QAAQ,gBAAgB;AAC5C,SAASC,cAAc,QAAQ,iBAAiB;AAChD,SAASC,EAAE,QAAQ,MAAM;AACzB,SAASC,aAAa,QAAQ,kBAAkB;AAChD,SAASC,aAAa,QAAQ,2BAA2B,CAAC,CAAC;AAE3DC,QAAQ,CAAC,eAAe,EAAE,MAAK;EAC7B,IAAIC,SAAwB;EAC5B,IAAIC,OAAwC;EAC5C,IAAIC,aAA4B,CAAC,CAAC;EAClC,IAAIC,QAA+B;EAEnCC,UAAU,CAAC,MAAK;IACd,MAAMC,YAAY,GAAG;MACnBC,YAAY,EAAE,CAAC;MACfC,OAAO,EAAE;KACV;IAEDhB,OAAO,CAACiB,sBAAsB,CAAC;MAC7BC,YAAY,EAAE,CAACZ,aAAa,CAAC;MAC7Ba,OAAO,EAAE,CAAClB,uBAAuB,EAAEE,WAAW,CAAC;MAC/CiB,SAAS,EAAE,CACT;QACEC,OAAO,EAAEjB,cAAc;QACvBkB,QAAQ,EAAE;UAAEC,QAAQ,EAAElB,EAAE,CAAC;YAAEmB,GAAG,EAAGC,EAAU,IAAK;UAAG,CAAE;QAAC,CAAE,CAAC;OAC1D,EACDlB,aAAa,CAAE;MAAA;KAElB,CAAC;;IACFG,OAAO,GAAGV,OAAO,CAAC0B,eAAe,CAACpB,aAAa,CAAC;IAChDG,SAAS,GAAGC,OAAO,CAACiB,iBAAiB;IACrCjB,OAAO,CAACkB,aAAa,EAAE;IACvBhB,QAAQ,GAAGZ,OAAO,CAAC6B,MAAM,CAAC3B,qBAAqB,CAAC;IAChDS,aAAa,GAAGX,OAAO,CAAC6B,MAAM,CAACtB,aAAa,CAAC,CAAC,CAAC;EACjD,CAAC,CAAC;;EAEFuB,EAAE,CAAC,eAAe,EAAE,MAAK;IACvBC,MAAM,CAACtB,SAAS,CAAC,CAACuB,UAAU,EAAE;EAChC,CAAC,CAAC;EAEFF,EAAE,CAAC,8BAA8B,EAAE,MAAK;IACtC,MAAMG,QAAQ,GAAG,IAAIC,QAAQ,EAAE;IAC/BC,KAAK,CAACxB,aAAa,EAAE,kBAAkB,CAAC,CAACyB,GAAG,CAACC,WAAW,CAAChC,EAAE,CAACS,YAAY,CAAC,CAAC;IAE1E;IAEA;IACA;IACA;EACF,CAAC,CAAC;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}