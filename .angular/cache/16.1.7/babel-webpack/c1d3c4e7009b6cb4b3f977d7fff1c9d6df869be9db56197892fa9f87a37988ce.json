{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\n//import { UserDataService } from 'src/app/service/user-data.service';\nimport { HttpHeaders } from '@angular/common/http';\nimport { Group } from 'server/routes/groupModel';\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\nconst BACKEND_URL = \"http://localhost:3000\";\nexport let GroupsComponent = class GroupsComponent {\n  constructor(http, cdr) {\n    this.http = http;\n    this.cdr = cdr;\n    this.groupChannels = [];\n    this.isUniqueGroup = true;\n    this.isUser = true;\n    this.isAdmin = true;\n    this.group = new Group(0, \" \", \" \", [\"\"], [\"\"], [\"\"], [\"\"], true);\n  }\n  ngOnInit() {\n    const storedUser = window.sessionStorage.getItem('current.user');\n    if (storedUser) {\n      this.loggedInUser = JSON.parse(storedUser);\n      // console.log(this.loggedInUser.role)\n      // console.log(this.loggedInUser)\n      this.loggedInUser.role = 2;\n      if (this.loggedInUser.role === 1) {\n        this.isUser = true;\n        this.isAdmin = false;\n      } else {\n        this.isUser = false;\n        this.isAdmin = true;\n      }\n      // console.log(\"user:\" + this.isUser)\n      // console.log(\"admin:\" + this.isAdmin)\n    }\n\n    this.getUsers();\n    this.getGroups();\n    this.http.get(BACKEND_URL + \"/groups\").subscribe(groupsNames => {\n      this.allGroupNames = groupsNames;\n      console.log(this.allGroupNames);\n    });\n  }\n  onGroupCardClick(group) {\n    this.selectedGroup = group;\n    console.log(\"card clicked\");\n    console.log(group);\n  }\n  requestButton(group) {\n    console.log(this.loggedInUser.username);\n    group.userRequests.push(this.loggedInUser.username);\n    console.log(group);\n    this.http.post(BACKEND_URL + \"/update-groups\", group).subscribe(response => {\n      console.log('User details updated on the server.', response);\n      //refesh User list \n      this.getGroups();\n    }, error => {\n      console.error('There was an error updating the user details on the server.', error);\n      alert('Error updating profile. Please try again.');\n    });\n  }\n  onButton2Click(group) {\n    console.log(\"Button 2 clicked\");\n  }\n  onAddGroup() {\n    console.log(\"Add Group button clicked\");\n    $('#addGroupModal').modal('show');\n  }\n  onGroupInput() {\n    this.isUniqueGroup = !this.allGroupNames.includes(this.newGroupName);\n    console.log(this.isUniqueGroup);\n  }\n  addChannel() {\n    if (this.newChannelName && !this.groupChannels.includes(this.newChannelName)) {\n      this.groupChannels.push(this.newChannelName);\n      this.newChannelName = '';\n    }\n  }\n  saveGroup() {\n    //console.log(this.newGroupName)\n    // console.log(this.groupChannels)\n    this.GetNewGroupID();\n    //console.log(this.newGroupID)\n    if (this.isUniqueGroup === true) {\n      this.group.groupID = this.newGroupID;\n      this.group.groupName = this.newGroupName;\n      this.group.createdBy = this.loggedInUser.username;\n      this.group.groupAdmins = [this.loggedInUser.username];\n      this.group.userRequests = [\"\"];\n      this.group.members = [\"\"];\n      this.group.channels = this.groupChannels;\n      this.group.valid = true;\n      //console.log(this.group)\n      this.http.post(BACKEND_URL + \"/update-groups\", this.group).subscribe(response => {\n        console.log('User details updated on the server.', response);\n        //refesh User list \n        this.getGroups();\n      }, error => {\n        console.error('There was an error updating the user details on the server.', error);\n        alert('Error updating profile. Please try again.');\n      });\n      this.closeModal();\n    } else {\n      alert(\"Group already exists\");\n    }\n  }\n  closeModal(any) {\n    this.group = {\n      groupID: 0,\n      groupName: \"\",\n      createdBy: this.loggedInUser.username,\n      groupAdmins: [\"\"],\n      userRequests: [\"\"],\n      members: [\"\"],\n      channels: [\"\"],\n      valid: true\n    };\n    this.newGroupName = '';\n    this.groupChannels = [];\n    console.log(this.group);\n    $('#addGroupModal').modal('hide');\n  }\n  getUsers() {\n    this.http.post(BACKEND_URL + \"/all-users\", httpOptions).subscribe(data => {\n      if (data) {\n        this.users = data;\n        //console.log(this.users)\n      } else {\n        alert(\"no Data Soz\");\n      }\n    }, error => {\n      console.error('There was an error:', error);\n    });\n  }\n  getGroups() {\n    this.http.post(BACKEND_URL + \"/all-groups\", httpOptions).subscribe(data => {\n      if (data) {\n        this.groups = data;\n        //console.log(this.groups)\n        //console.log(typeof(this.groups))\n      } else {\n        alert(\"no Data Soz\");\n      }\n    }, error => {\n      console.error('There was an error:', error);\n    });\n  }\n  updateGroup() {}\n  GetNewGroupID() {\n    if (this.groups && this.groups.length > 0) {\n      this.newGroupID = this.groups[this.groups.length - 1].groupID + 1;\n    } else {\n      this.newGroupID = 1;\n    }\n  }\n  showRequests() {\n    this.getGroups(); // Assuming this method populates the 'this.groups' array\n    $('#approveRequests').modal('show');\n    this.groupsNeedApproval = this.groups.filter(group => group.userRequests && group.userRequests.length > 0);\n    console.log(this.groupsNeedApproval);\n    this.cdr.detectChanges();\n  }\n};\nGroupsComponent = __decorate([Component({\n  selector: 'app-groups',\n  templateUrl: './groups.component.html',\n  styleUrls: ['./groups.component.css']\n})], GroupsComponent);","map":{"version":3,"names":["Component","HttpHeaders","Group","httpOptions","headers","BACKEND_URL","GroupsComponent","constructor","http","cdr","groupChannels","isUniqueGroup","isUser","isAdmin","group","ngOnInit","storedUser","window","sessionStorage","getItem","loggedInUser","JSON","parse","role","getUsers","getGroups","get","subscribe","groupsNames","allGroupNames","console","log","onGroupCardClick","selectedGroup","requestButton","username","userRequests","push","post","response","error","alert","onButton2Click","onAddGroup","$","modal","onGroupInput","includes","newGroupName","addChannel","newChannelName","saveGroup","GetNewGroupID","groupID","newGroupID","groupName","createdBy","groupAdmins","members","channels","valid","closeModal","any","data","users","groups","updateGroup","length","showRequests","groupsNeedApproval","filter","detectChanges","__decorate","selector","templateUrl","styleUrls"],"sources":["/Users/frazerlinscott/Desktop/Software Frameworks/Assignments/Assignment1_SoftwareFrames_s2930588/src/app/groups/groups.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\n//import { UserDataService } from 'src/app/service/user-data.service';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Group } from 'server/routes/groupModel';\nimport { ChangeDetectorRef } from '@angular/core';\n\ndeclare var $: any;\n\nconst httpOptions = {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n};\n\nconst BACKEND_URL = \"http://localhost:3000\";\n\n@Component({\n  selector: 'app-groups',\n  templateUrl: './groups.component.html',\n  styleUrls: ['./groups.component.css']\n})\nexport class GroupsComponent implements OnInit {\n\n  loggedInUser : any;\n  users: any;\n  groups: any;\n\n  groupsNeedApproval: any;\n\n  selectedGroup: any;\n\n  newGroupName: any;\n  newChannelName: any;\n  groupChannels: string[] = [];\n\n  newGroupID: any;\n  allGroupNames: any;\n  isUniqueGroup:boolean = true;\n\n  isUser: boolean = true;\n  isAdmin: boolean = true;\n\n  \n  group: Group = new Group(0, \" \", \" \", [\"\"], [\"\"], [\"\"], [\"\"], true);\n\n  constructor(private http: HttpClient, private cdr: ChangeDetectorRef) { }\n\n  ngOnInit(): void {\n    const storedUser = window.sessionStorage.getItem('current.user');\n    if (storedUser) {\n\n      this.loggedInUser = JSON.parse(storedUser);\n\n      // console.log(this.loggedInUser.role)\n      // console.log(this.loggedInUser)\n\n      this.loggedInUser.role = 2\n\n      if (this.loggedInUser.role === 1){\n        this.isUser = true\n        this.isAdmin = false\n      }else{\n        this.isUser = false\n        this.isAdmin = true\n      }\n      // console.log(\"user:\" + this.isUser)\n      // console.log(\"admin:\" + this.isAdmin)\n    }\n\n    this.getUsers()\n    this.getGroups()\n\n    this.http.get<string[]>(BACKEND_URL + \"/groups\").subscribe(groupsNames => {\n      this.allGroupNames = groupsNames;\n      console.log(this.allGroupNames);\n    });\n  }\n\n  onGroupCardClick(group:any ){\n    \n    this.selectedGroup = group;\n    console.log(\"card clicked\")\n\n    console.log(group)\n  }\n\n\n  requestButton(group:any){\n    \n    console.log(this.loggedInUser.username)\n\n    group.userRequests.push(this.loggedInUser.username);\n\n    console.log(group)\n\n    this.http.post(BACKEND_URL+\"/update-groups\", group).subscribe(\n      response => {\n          console.log('User details updated on the server.', response);\n\n          //refesh User list \n          this.getGroups();\n      },\n      error => {\n          console.error('There was an error updating the user details on the server.', error);\n          alert('Error updating profile. Please try again.');\n      }\n    )\n  }\n\n  onButton2Click(group:any){\n    console.log(\"Button 2 clicked\")\n\n  }\n\n  onAddGroup() {\n    console.log(\"Add Group button clicked\");\n\n    $('#addGroupModal').modal('show');\n  }\n\n  onGroupInput() {\n    \n    this.isUniqueGroup = !this.allGroupNames.includes(this.newGroupName);\n    console.log(this.isUniqueGroup)\n  }\n\n  addChannel() {\n    if (this.newChannelName && !this.groupChannels.includes(this.newChannelName)) {\n      this.groupChannels.push(this.newChannelName);\n      this.newChannelName = '';\n    }\n  }\n\n  saveGroup(){\n    //console.log(this.newGroupName)\n   // console.log(this.groupChannels)\n\n    this.GetNewGroupID()\n\n    //console.log(this.newGroupID)\n\n    if (this.isUniqueGroup === true){\n      this.group.groupID = this.newGroupID;\n      this.group.groupName = this.newGroupName;\n      this.group.createdBy = this.loggedInUser.username;\n      this.group.groupAdmins = [this.loggedInUser.username];\n      this.group.userRequests = [\"\"];\n      this.group.members = [\"\"];\n      this.group.channels = this.groupChannels;\n      this.group.valid = true;\n  \n      //console.log(this.group)\n  \n      this.http.post(BACKEND_URL+\"/update-groups\", this.group).subscribe(\n        response => {\n            console.log('User details updated on the server.', response);\n  \n            //refesh User list \n            this.getGroups();\n        },\n        error => {\n            console.error('There was an error updating the user details on the server.', error);\n            alert('Error updating profile. Please try again.');\n        }\n      )\n      this.closeModal()\n    }else{\n      alert(\"Group already exists\");\n    }\n  }\n\n  closeModal(any: string){\n\n    this.group = {\n      groupID: 0,\n      groupName: \"\",\n      createdBy: this.loggedInUser.username,\n      groupAdmins: [\"\"],\n      userRequests: [\"\"],\n      members: [\"\"],\n      channels: [\"\"],\n      valid: true\n  };\n\n  this.newGroupName=''\n\n  this.groupChannels=[]\n\n  console.log(this.group)\n\n  \n    $('#addGroupModal').modal('hide');\n  }\n  \n  getUsers(){\n    this.http.post(BACKEND_URL + \"/all-users\", httpOptions)\n    .subscribe(\n        (data: any) => {\n            if (data) {\n              this.users = data\n              //console.log(this.users)\n            } else {\n                alert(\"no Data Soz\");\n            }\n        },\n        error => {console.error('There was an error:', error);}\n    );\n  }\n\n\n  getGroups(){\n    this.http.post(BACKEND_URL + \"/all-groups\", httpOptions)\n    .subscribe(\n        (data: any) => {\n            if (data) {\n              this.groups = data\n              //console.log(this.groups)\n\n              //console.log(typeof(this.groups))\n            } else {\n                alert(\"no Data Soz\");\n            }\n        },\n        error => {console.error('There was an error:', error);}\n    );\n  }\n\n  updateGroup(){\n    \n  }\n\n  GetNewGroupID(){\n    if (this.groups && this.groups.length > 0) {\n      this.newGroupID = this.groups[this.groups.length - 1].groupID + 1;\n  } else {\n      this.newGroupID = 1;\n  }\n  }\n\n\n\n  showRequests(){\n    this.getGroups();  // Assuming this method populates the 'this.groups' array\n\n    $('#approveRequests').modal('show');\n\n    this.groupsNeedApproval = this.groups.filter((group: { userRequests: string | any[]; }) => group.userRequests && group.userRequests.length > 0);\n\n    console.log(this.groupsNeedApproval);\n    this.cdr.detectChanges();\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n  // getRoleName(roleNumber: number): string {\n  //   switch (roleNumber) {\n  //     case 1:\n  //       return 'User';\n  //     case 2:\n  //       return 'Admin';\n  //     case 3:\n  //       return 'Super Admin';\n  //     default:\n  //       return 'Unknown Role';\n  //   }\n  // }\n\n\n  // openEditModal(user: any) {\n  //   this.selectedUser = user;\n  //   //console.log(this.selectedUser)\n  //   this.selectedRole = user.role;\n  //   $('#editUserRoleModal').modal('show');\n  // }\n\n  // updateUserRole() {\n  //   // Convert to number and update the role\n  //   this.selectedUser.role = Number(this.selectedRole);\n\n  //   console.log(this.selectedUser)\n\n\n  //   //--------------------------------------------------------------\n\n  //   this.http.post(BACKEND_URL+\"/update-permission\", this.selectedUser).subscribe(\n  //     response => {\n  //         console.log('User details updated on the server.', response);\n  //         //refesh User list \n  //         this.getUsers();\n  //     },\n  //     error => {\n  //         console.error('There was an error updating the user details on the server.', error);\n  //         alert('Error updating profile. Please try again.');\n  //     }\n  // )\n    //alert('Profile updated!');\n\n  //-------------------------------------------------------------\n    \n  //   // Close the modal\n  //   this.closeModal()\n \n  // }\n\n\n\n  // closeModal(){\n  //   $('#editUserRoleModal').modal('hide');\n  // }\n\n\n\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}