{"ast":null,"code":"var _class;\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./profile.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./profile.component.css?ngResource\";\nimport { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nconst BACKEND_URL = \"http://localhost:3000\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\nexport let ProfileComponent = (_class = class ProfileComponent {\n  constructor(router, http) {\n    this.router = router;\n    this.http = http;\n    this.user = {};\n    this.allUsernames = [];\n    this.isUniqueUsername = true;\n    this.isUniqueEmail = true;\n    this.isUniquePassword = true;\n  }\n  ngOnInit() {\n    const storedUserData = sessionStorage.getItem('current.user');\n    this.http.get(BACKEND_URL + \"/usernames\").subscribe(usernames => {\n      this.allUsernames = usernames;\n      console.log(this.allUsernames);\n    });\n    if (storedUserData) {\n      const retrievedUser = JSON.parse(storedUserData);\n      console.log(retrievedUser);\n      this.user.username = retrievedUser.username;\n      this.user.userbirthdate = retrievedUser.birthdate;\n      this.user.email = retrievedUser.email;\n      this.user.password = retrievedUser.password;\n      this.user.pwdconfirm = retrievedUser.pwdconfirm;\n    }\n  }\n  onUsernameInput() {\n    // Check if username is unique while the user is typing\n    this.isUniqueUsername = !this.allUsernames.includes(this.user.username);\n    console.log(this.isUniqueUsername);\n  }\n  onSubmit() {\n    const storedUserData = sessionStorage.getItem('current.user');\n    let originalUsername;\n    if (storedUserData) {\n      let retrievedUser = JSON.parse(storedUserData);\n      originalUsername = retrievedUser.username;\n      retrievedUser.username = this.user.username;\n      retrievedUser.birthdate = this.user.userbirthdate;\n      retrievedUser.email = this.user.email;\n      retrievedUser.email = this.user.email;\n      retrievedUser.password = this.user.password;\n      retrievedUser.pwdconfirm = this.user.pwdconfirm;\n      // Update session storage with the new user data\n      sessionStorage.setItem('current.user', JSON.stringify(retrievedUser));\n    }\n    const newDetails = {\n      originalUsername: originalUsername,\n      updatedDetails: this.user // Send updated user details\n    };\n\n    console.log(newDetails);\n    this.http.post(BACKEND_URL + \"/update-user\", newDetails).subscribe(response => {\n      console.log('User details updated on the server.', response);\n      this.isUniqueEmail = false;\n    }, error => {\n      console.error('There was an error updating the user details on the server.', error);\n      alert('Error updating profile. Please try again.');\n      this.isUniqueEmail = false;\n    });\n    alert('Profile updated!');\n    this.router.navigateByUrl('/account');\n  }\n  closeProfile() {\n    this.router.navigateByUrl('/account');\n  }\n  deleteProfile() {\n    this.user.valid = false;\n    this.http.post(BACKEND_URL + \"/update-permission\", this.user).subscribe(response => {\n      console.log('User details updated on the server.', response);\n      //refesh User list \n    }, error => {\n      console.error('There was an error updating the user details on the server.', error);\n      alert('Error updating profile. Please try again.');\n    });\n    this.router.navigateByUrl('login');\n  }\n}, _class.ctorParameters = () => [{\n  type: Router\n}, {\n  type: HttpClient\n}], _class);\nProfileComponent = __decorate([Component({\n  selector: 'app-profile',\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], ProfileComponent);","map":{"version":3,"names":["Component","Router","HttpClient","HttpHeaders","BACKEND_URL","httpOptions","headers","ProfileComponent","_class","constructor","router","http","user","allUsernames","isUniqueUsername","isUniqueEmail","isUniquePassword","ngOnInit","storedUserData","sessionStorage","getItem","get","subscribe","usernames","console","log","retrievedUser","JSON","parse","username","userbirthdate","birthdate","email","password","pwdconfirm","onUsernameInput","includes","onSubmit","originalUsername","setItem","stringify","newDetails","updatedDetails","post","response","error","alert","navigateByUrl","closeProfile","deleteProfile","valid","__decorate","selector","template","__NG_CLI_RESOURCE__0"],"sources":["/Users/frazerlinscott/Desktop/Software Frameworks/Assignments/Assignment1_SoftwareFrames_s2930588/src/app/profile/profile.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { User } from 'server/routes/userModel';\n\nconst BACKEND_URL = \"http://localhost:3000\";\nconst httpOptions = {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n};\n\n\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.css']\n})\nexport class ProfileComponent implements OnInit {\n  user: any = {};\n  allUsernames: string[] = [];\n  isUniqueUsername: boolean = true;\n  isUniqueEmail:boolean = true;\n  isUniquePassword: boolean = true;\n  \n  constructor(private router: Router, private http: HttpClient) { }\n\n  ngOnInit() {\n\n    const storedUserData = sessionStorage.getItem('current.user');\n\n    this.http.get<string[]>(BACKEND_URL + \"/usernames\").subscribe(usernames => {\n      this.allUsernames = usernames;\n      console.log(this.allUsernames);\n    });\n\n\n    if (storedUserData) {\n        const retrievedUser = JSON.parse(storedUserData);\n\n        console.log(retrievedUser)\n\n        this.user.username = retrievedUser.username;\n        this.user.userbirthdate = retrievedUser.birthdate\n        this.user.email = retrievedUser.email\n        this.user.password=retrievedUser.password\n        this.user.pwdconfirm=retrievedUser.pwdconfirm\n      }\n}\n\n  onUsernameInput() {\n  // Check if username is unique while the user is typing\n    this.isUniqueUsername = !this.allUsernames.includes(this.user.username);\n    console.log(this.isUniqueUsername)\n  }\n\n  onSubmit() {\n\n    const storedUserData = sessionStorage.getItem('current.user');\n    let originalUsername;\n\n    if (storedUserData) {\n        let retrievedUser = JSON.parse(storedUserData);\n        originalUsername = retrievedUser.username;\n\n\n        retrievedUser.username = this.user.username;\n        retrievedUser.birthdate = this.user.userbirthdate;\n        retrievedUser.email = this.user.email;\n        retrievedUser.email = this.user.email;\n        retrievedUser.password = this.user.password\n        retrievedUser.pwdconfirm = this.user.pwdconfirm\n\n        // Update session storage with the new user data\n        sessionStorage.setItem('current.user', JSON.stringify(retrievedUser));\n    }\n\n    const newDetails = {\n      originalUsername: originalUsername,  // Send original username\n      updatedDetails: this.user  // Send updated user details\n  };\n\n  console.log(newDetails);\n\n    this.http.post(BACKEND_URL+\"/update-user\", newDetails).subscribe(\n      response => {\n          console.log('User details updated on the server.', response);\n          this.isUniqueEmail=false\n      },\n      error => {\n          console.error('There was an error updating the user details on the server.', error);\n          alert('Error updating profile. Please try again.');\n          this.isUniqueEmail=false\n      }\n  )\n    alert('Profile updated!');\n    this.router.navigateByUrl('/account'); \n  }\n\n  closeProfile() {\n    this.router.navigateByUrl('/account'); \n  }\n\n  deleteProfile(){\n\n    this.user.valid = false\n\n    this.http.post(BACKEND_URL+\"/update-permission\", this.user).subscribe(\n      response => {\n          console.log('User details updated on the server.', response);\n          //refesh User list \n      },\n      error => {\n          console.error('There was an error updating the user details on the server.', error);\n          alert('Error updating profile. Please try again.');\n      }\n    )\n    this.router.navigateByUrl('login');\n  }\n  \n\n  \n\n  \n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}