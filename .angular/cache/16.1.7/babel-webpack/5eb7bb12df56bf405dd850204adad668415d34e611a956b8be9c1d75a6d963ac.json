{"ast":null,"code":"import { TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { FormsModule } from '@angular/forms';\nimport { GroupsComponent } from './groups.component';\nimport { Router } from '@angular/router'; // Import Router\nimport { of } from 'rxjs'; // Import of from rxjs\ndescribe('GroupsComponent', () => {\n  let component;\n  let fixture;\n  let httpMock;\n  let router;\n  class MockRouter {\n    navigateByUrl(url) {\n      return url;\n    }\n  }\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      declarations: [GroupsComponent],\n      imports: [HttpClientTestingModule, FormsModule, RouterTestingModule],\n      providers: [{\n        provide: Router,\n        useClass: MockRouter\n      }]\n    });\n    fixture = TestBed.createComponent(GroupsComponent);\n    component = fixture.componentInstance;\n    httpMock = TestBed.inject(HttpTestingController);\n    fixture.detectChanges();\n    component.loggedInUser = {\n      username: 'testUser',\n      role: 1\n    }; // Set up a loggedInUser\n  });\n\n  afterEach(() => {\n    httpMock.verify();\n  });\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n  it('should leave group', () => {\n    // Mock the HTTP request\n    spyOn(component.http, 'post').and.returnValue(of({}));\n    // Create a mock group\n    const mockGroup = {\n      id: 1,\n      groupName: 'Test Group',\n      members: ['testUser'],\n      channels: {\n        channel1: ['testUser'],\n        channel2: []\n      } // Mock channels\n    };\n    // Call the leaveGroup method\n    component.leaveGroup(mockGroup);\n    // Expect that the http.post method was called with the correct URL and data\n    expect(component.http.post).toHaveBeenCalledWith(`${BACKEND_URL}/update-groups`, mockGroup);\n    // ... Additional expectations for the method's behavior\n  });\n});\n// import { TestBed, ComponentFixture, async } from '@angular/core/testing';\n// import { GroupsComponent } from './groups.component';\n// import { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\n// import { RouterTestingModule } from '@angular/router/testing';\n// import { FormsModule } from '@angular/forms';\n// import * as $ from 'jquery';\n// const BACKEND_URL = \"http://localhost:3000\";\n// describe('GroupsComponent', () => {\n//     let component: GroupsComponent;\n//     let fixture: ComponentFixture<GroupsComponent>;\n//     let httpMock: HttpTestingController;\n//     beforeEach(async(() => {\n//         // Mock the current user in session storage\n//         const mockUser = {\n//             username: 'user1',\n//             role: 3 \n//         };\n//         sessionStorage.setItem('current.user', JSON.stringify(mockUser));\n//         TestBed.configureTestingModule({\n//             imports: [\n//                 HttpClientTestingModule,\n//                 RouterTestingModule,\n//                 FormsModule \n//             ],\n//             declarations: [GroupsComponent]\n//         }).compileComponents();\n//         fixture = TestBed.createComponent(GroupsComponent);\n//         component = fixture.componentInstance;\n//         httpMock = TestBed.inject(HttpTestingController);\n//         fixture.detectChanges();\n//     }));\n//     afterEach(() => {\n//         httpMock.verify(); // Ensure that no requests are outstanding\n//     });\n//     it('should make an HTTP POST request when the requestButton is clicked', () => {\n//         const mockGroup = {\n//             groupID: 1, // Replace with an appropriate group ID\n//             userRequests: [] as string[] \n//             // Other properties of the mock group as needed\n//         };\n//         component.loggedInUser = { username: 'user1' };\n//         component.requestButton(mockGroup);\n//         const req = httpMock.expectOne(`${BACKEND_URL}/update-groups`); // Assuming BACKEND_URL is imported\n//         expect(req.request.method).toBe('POST');\n//         expect(req.request.body).toEqual(mockGroup); // Ensure that the request body matches the group object\n//         req.flush({}); // Mock a successful response\n//         // Check that the user request was updated\n//         expect(mockGroup.userRequests).toContain('user1');\n//         // Verify that the button is disabled after the request\n//         expect(component.buttonDisabledStates[mockGroup.groupID]).toBe(true);\n//     });\n// });","map":{"version":3,"names":["TestBed","HttpClientTestingModule","HttpTestingController","RouterTestingModule","FormsModule","GroupsComponent","Router","of","describe","component","fixture","httpMock","router","MockRouter","navigateByUrl","url","beforeEach","configureTestingModule","declarations","imports","providers","provide","useClass","createComponent","componentInstance","inject","detectChanges","loggedInUser","username","role","afterEach","verify","it","expect","toBeTruthy","spyOn","http","and","returnValue","mockGroup","id","groupName","members","channels","channel1","channel2","leaveGroup","post","toHaveBeenCalledWith","BACKEND_URL"],"sources":["/Users/frazerlinscott/Desktop/Software Frameworks/Assignments/Assignment1_SoftwareFrames_s2930588/src/app/groups/groups.component.spec.ts"],"sourcesContent":["import { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { FormsModule } from '@angular/forms';\nimport { GroupsComponent } from './groups.component';\nimport { Router } from '@angular/router'; // Import Router\nimport { of } from 'rxjs'; // Import of from rxjs\n\ndescribe('GroupsComponent', () => {\n  let component: GroupsComponent;\n  let fixture: ComponentFixture<GroupsComponent>;\n  let httpMock: HttpTestingController;\n  let router: Router;\n\n  class MockRouter {\n    navigateByUrl(url: string) { return url; }\n  }\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      declarations: [GroupsComponent],\n      imports: [HttpClientTestingModule, FormsModule, RouterTestingModule],\n      providers: [\n        { provide: Router, useClass: MockRouter }\n      ]\n    });\n    fixture = TestBed.createComponent(GroupsComponent);\n    component = fixture.componentInstance;\n    httpMock = TestBed.inject(HttpTestingController);\n    fixture.detectChanges();\n    component.loggedInUser = { username: 'testUser', role: 1 }; // Set up a loggedInUser\n  });\n\n  afterEach(() => {\n    httpMock.verify();\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n\n  it('should leave group', () => {\n    // Mock the HTTP request\n    spyOn(component.http, 'post').and.returnValue(of({}));\n\n    // Create a mock group\n    const mockGroup = {\n      id: 1,\n      groupName: 'Test Group',\n      members: ['testUser'],\n      channels: { channel1: ['testUser'], channel2: [] } // Mock channels\n    };\n\n    // Call the leaveGroup method\n    component.leaveGroup(mockGroup);\n\n    // Expect that the http.post method was called with the correct URL and data\n    expect(component.http.post).toHaveBeenCalledWith(`${BACKEND_URL}/update-groups`, mockGroup);\n\n    // ... Additional expectations for the method's behavior\n  });\n});\n\n\n// import { TestBed, ComponentFixture, async } from '@angular/core/testing';\n// import { GroupsComponent } from './groups.component';\n// import { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\n// import { RouterTestingModule } from '@angular/router/testing';\n// import { FormsModule } from '@angular/forms';\n// import * as $ from 'jquery';\n\n// const BACKEND_URL = \"http://localhost:3000\";\n\n// describe('GroupsComponent', () => {\n//     let component: GroupsComponent;\n//     let fixture: ComponentFixture<GroupsComponent>;\n//     let httpMock: HttpTestingController;\n\n//     beforeEach(async(() => {\n//         // Mock the current user in session storage\n//         const mockUser = {\n//             username: 'user1',\n//             role: 3 \n//         };\n\n//         sessionStorage.setItem('current.user', JSON.stringify(mockUser));\n\n//         TestBed.configureTestingModule({\n//             imports: [\n//                 HttpClientTestingModule,\n//                 RouterTestingModule,\n//                 FormsModule \n//             ],\n//             declarations: [GroupsComponent]\n//         }).compileComponents();\n\n//         fixture = TestBed.createComponent(GroupsComponent);\n//         component = fixture.componentInstance;\n//         httpMock = TestBed.inject(HttpTestingController);\n//         fixture.detectChanges();\n//     }));\n\n//     afterEach(() => {\n//         httpMock.verify(); // Ensure that no requests are outstanding\n//     });\n\n//     it('should make an HTTP POST request when the requestButton is clicked', () => {\n//         const mockGroup = {\n//             groupID: 1, // Replace with an appropriate group ID\n//             userRequests: [] as string[] \n//             // Other properties of the mock group as needed\n//         };\n  \n//         component.loggedInUser = { username: 'user1' };\n  \n//         component.requestButton(mockGroup);\n  \n//         const req = httpMock.expectOne(`${BACKEND_URL}/update-groups`); // Assuming BACKEND_URL is imported\n//         expect(req.request.method).toBe('POST');\n//         expect(req.request.body).toEqual(mockGroup); // Ensure that the request body matches the group object\n  \n//         req.flush({}); // Mock a successful response\n  \n//         // Check that the user request was updated\n//         expect(mockGroup.userRequests).toContain('user1');\n  \n//         // Verify that the button is disabled after the request\n//         expect(component.buttonDisabledStates[mockGroup.groupID]).toBe(true);\n//     });\n// });\n"],"mappings":"AAAA,SAA2BA,OAAO,QAAQ,uBAAuB;AACjE,SAASC,uBAAuB,EAAEC,qBAAqB,QAAQ,8BAA8B;AAC7F,SAASC,mBAAmB,QAAQ,yBAAyB;AAC7D,SAASC,WAAW,QAAQ,gBAAgB;AAC5C,SAASC,eAAe,QAAQ,oBAAoB;AACpD,SAASC,MAAM,QAAQ,iBAAiB,CAAC,CAAC;AAC1C,SAASC,EAAE,QAAQ,MAAM,CAAC,CAAC;AAE3BC,QAAQ,CAAC,iBAAiB,EAAE,MAAK;EAC/B,IAAIC,SAA0B;EAC9B,IAAIC,OAA0C;EAC9C,IAAIC,QAA+B;EACnC,IAAIC,MAAc;EAElB,MAAMC,UAAU;IACdC,aAAaA,CAACC,GAAW;MAAI,OAAOA,GAAG;IAAE;;EAG3CC,UAAU,CAAC,MAAK;IACdhB,OAAO,CAACiB,sBAAsB,CAAC;MAC7BC,YAAY,EAAE,CAACb,eAAe,CAAC;MAC/Bc,OAAO,EAAE,CAAClB,uBAAuB,EAAEG,WAAW,EAAED,mBAAmB,CAAC;MACpEiB,SAAS,EAAE,CACT;QAAEC,OAAO,EAAEf,MAAM;QAAEgB,QAAQ,EAAET;MAAU,CAAE;KAE5C,CAAC;IACFH,OAAO,GAAGV,OAAO,CAACuB,eAAe,CAAClB,eAAe,CAAC;IAClDI,SAAS,GAAGC,OAAO,CAACc,iBAAiB;IACrCb,QAAQ,GAAGX,OAAO,CAACyB,MAAM,CAACvB,qBAAqB,CAAC;IAChDQ,OAAO,CAACgB,aAAa,EAAE;IACvBjB,SAAS,CAACkB,YAAY,GAAG;MAAEC,QAAQ,EAAE,UAAU;MAAEC,IAAI,EAAE;IAAC,CAAE,CAAC,CAAC;EAC9D,CAAC,CAAC;;EAEFC,SAAS,CAAC,MAAK;IACbnB,QAAQ,CAACoB,MAAM,EAAE;EACnB,CAAC,CAAC;EAEFC,EAAE,CAAC,eAAe,EAAE,MAAK;IACvBC,MAAM,CAACxB,SAAS,CAAC,CAACyB,UAAU,EAAE;EAChC,CAAC,CAAC;EAEFF,EAAE,CAAC,oBAAoB,EAAE,MAAK;IAC5B;IACAG,KAAK,CAAC1B,SAAS,CAAC2B,IAAI,EAAE,MAAM,CAAC,CAACC,GAAG,CAACC,WAAW,CAAC/B,EAAE,CAAC,EAAE,CAAC,CAAC;IAErD;IACA,MAAMgC,SAAS,GAAG;MAChBC,EAAE,EAAE,CAAC;MACLC,SAAS,EAAE,YAAY;MACvBC,OAAO,EAAE,CAAC,UAAU,CAAC;MACrBC,QAAQ,EAAE;QAAEC,QAAQ,EAAE,CAAC,UAAU,CAAC;QAAEC,QAAQ,EAAE;MAAE,CAAE,CAAC;KACpD;IAED;IACApC,SAAS,CAACqC,UAAU,CAACP,SAAS,CAAC;IAE/B;IACAN,MAAM,CAACxB,SAAS,CAAC2B,IAAI,CAACW,IAAI,CAAC,CAACC,oBAAoB,CAAC,GAAGC,WAAW,gBAAgB,EAAEV,SAAS,CAAC;IAE3F;EACF,CAAC,CAAC;AACJ,CAAC,CAAC;AAGF;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}