{"ast":null,"code":"import { TestBed } from '@angular/core/testing';\nimport { GroupsComponent } from './groups.component';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { FormsModule } from '@angular/forms';\nimport { Router } from '@angular/router';\ndescribe('GroupsComponent', () => {\n  let component;\n  let fixture;\n  let httpMock;\n  let router;\n  class MockRouter {\n    navigateByUrl(url) {\n      return url;\n    }\n  }\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      declarations: [GroupsComponent],\n      imports: [HttpClientTestingModule, FormsModule],\n      providers: [{\n        provide: Router,\n        useClass: MockRouter\n      }]\n    });\n    fixture = TestBed.createComponent(GroupsComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n});\n// import { TestBed, ComponentFixture, async } from '@angular/core/testing';\n// import { GroupsComponent } from './groups.component';\n// import { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\n// import { RouterTestingModule } from '@angular/router/testing';\n// import { FormsModule } from '@angular/forms';\n// import * as $ from 'jquery';\nconst BACKEND_URL = \"http://localhost:3000\";\ndescribe('GroupsComponent', () => {\n  let component;\n  let fixture;\n  let httpMock;\n  beforeEach(async(() => {\n    // Mock the current user in session storage\n    const mockUser = {\n      username: 'user1',\n      role: 3\n    };\n    sessionStorage.setItem('current.user', JSON.stringify(mockUser));\n    TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule, RouterTestingModule, FormsModule],\n      declarations: [GroupsComponent]\n    }).compileComponents();\n    fixture = TestBed.createComponent(GroupsComponent);\n    component = fixture.componentInstance;\n    httpMock = TestBed.inject(HttpTestingController);\n    fixture.detectChanges();\n  }));\n  afterEach(() => {\n    httpMock.verify(); // Ensure that no requests are outstanding\n  });\n\n  it('should make an HTTP POST request when the requestButton is clicked', () => {\n    const mockGroup = {\n      groupID: 1,\n      userRequests: []\n      // Other properties of the mock group as needed\n    };\n\n    component.loggedInUser = {\n      username: 'user1'\n    };\n    component.requestButton(mockGroup);\n    const req = httpMock.expectOne(`${BACKEND_URL}/update-groups`); // Assuming BACKEND_URL is imported\n    expect(req.request.method).toBe('POST');\n    expect(req.request.body).toEqual(mockGroup); // Ensure that the request body matches the group object\n    req.flush({}); // Mock a successful response\n    // Check that the user request was updated\n    expect(mockGroup.userRequests).toContain('user1');\n    // Verify that the button is disabled after the request\n    expect(component.buttonDisabledStates[mockGroup.groupID]).toBe(true);\n  });\n});","map":{"version":3,"names":["TestBed","GroupsComponent","HttpClientTestingModule","HttpTestingController","FormsModule","Router","describe","component","fixture","httpMock","router","MockRouter","navigateByUrl","url","beforeEach","configureTestingModule","declarations","imports","providers","provide","useClass","createComponent","componentInstance","detectChanges","it","expect","toBeTruthy","BACKEND_URL","async","mockUser","username","role","sessionStorage","setItem","JSON","stringify","RouterTestingModule","compileComponents","inject","afterEach","verify","mockGroup","groupID","userRequests","loggedInUser","requestButton","req","expectOne","request","method","toBe","body","toEqual","flush","toContain","buttonDisabledStates"],"sources":["/Users/frazerlinscott/Desktop/Software Frameworks/Assignments/Assignment1_SoftwareFrames_s2930588/src/app/groups/groups.component.spec.ts"],"sourcesContent":["import { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { HttpClientModule,  } from '@angular/common/http'; // Import HttpClientModule\nimport { GroupsComponent } from './groups.component';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\n\nimport { FormsModule } from '@angular/forms';\nimport { Router } from '@angular/router';\n\ndescribe('GroupsComponent', () => {\n  let component: GroupsComponent;\n  let fixture: ComponentFixture<GroupsComponent>;\n  let httpMock: HttpTestingController;\n  let router: Router;\n\n  class MockRouter {\n    navigateByUrl(url: string) { return url; }\n  }\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      declarations: [GroupsComponent],\n      imports: [ HttpClientTestingModule, FormsModule ],\n      providers: [\n        { provide: Router, useClass: MockRouter }\n      ]\n    });\n    fixture = TestBed.createComponent(GroupsComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n});\n\n\n// import { TestBed, ComponentFixture, async } from '@angular/core/testing';\n// import { GroupsComponent } from './groups.component';\n// import { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\n// import { RouterTestingModule } from '@angular/router/testing';\n// import { FormsModule } from '@angular/forms';\n// import * as $ from 'jquery';\n\nconst BACKEND_URL = \"http://localhost:3000\";\n\ndescribe('GroupsComponent', () => {\n    let component: GroupsComponent;\n    let fixture: ComponentFixture<GroupsComponent>;\n    let httpMock: HttpTestingController;\n\n    beforeEach(async(() => {\n        // Mock the current user in session storage\n        const mockUser = {\n            username: 'user1',\n            role: 3 \n        };\n\n        sessionStorage.setItem('current.user', JSON.stringify(mockUser));\n\n        TestBed.configureTestingModule({\n            imports: [\n                HttpClientTestingModule,\n                RouterTestingModule,\n                FormsModule \n            ],\n            declarations: [GroupsComponent]\n        }).compileComponents();\n\n        fixture = TestBed.createComponent(GroupsComponent);\n        component = fixture.componentInstance;\n        httpMock = TestBed.inject(HttpTestingController);\n        fixture.detectChanges();\n    }));\n\n    afterEach(() => {\n        httpMock.verify(); // Ensure that no requests are outstanding\n    });\n\n    it('should make an HTTP POST request when the requestButton is clicked', () => {\n        const mockGroup = {\n            groupID: 1, // Replace with an appropriate group ID\n            userRequests: [] as string[] \n            // Other properties of the mock group as needed\n        };\n  \n        component.loggedInUser = { username: 'user1' };\n  \n        component.requestButton(mockGroup);\n  \n        const req = httpMock.expectOne(`${BACKEND_URL}/update-groups`); // Assuming BACKEND_URL is imported\n        expect(req.request.method).toBe('POST');\n        expect(req.request.body).toEqual(mockGroup); // Ensure that the request body matches the group object\n  \n        req.flush({}); // Mock a successful response\n  \n        // Check that the user request was updated\n        expect(mockGroup.userRequests).toContain('user1');\n  \n        // Verify that the button is disabled after the request\n        expect(component.buttonDisabledStates[mockGroup.groupID]).toBe(true);\n    });\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}