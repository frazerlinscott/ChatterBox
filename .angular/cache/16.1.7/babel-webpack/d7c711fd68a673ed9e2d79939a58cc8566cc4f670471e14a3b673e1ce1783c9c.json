{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nconst BACKEND_URL = \"http://localhost:3000\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\nexport class ProfileComponent {\n  constructor(router, http) {\n    this.router = router;\n    this.http = http;\n    this.user = {};\n    this.allUsernames = [];\n    this.isUniqueUsername = true;\n    this.isUniqueEmail = true;\n    this.isUniquePassword = true;\n  }\n  ngOnInit() {\n    const storedUserData = sessionStorage.getItem('current.user');\n    this.http.get(BACKEND_URL + \"/usernames\").subscribe(usernames => {\n      this.allUsernames = usernames;\n      console.log(this.allUsernames);\n    });\n    if (storedUserData) {\n      const retrievedUser = JSON.parse(storedUserData);\n      console.log(retrievedUser);\n      this.user.username = retrievedUser.username;\n      this.user.userbirthdate = retrievedUser.birthdate;\n      this.user.email = retrievedUser.email;\n      this.user.password = retrievedUser.password;\n      this.user.pwdconfirm = retrievedUser.pwdconfirm;\n    }\n  }\n  onUsernameInput() {\n    // Check if username is unique while the user is typing\n    this.isUniqueUsername = !this.allUsernames.includes(this.user.username);\n    console.log(this.isUniqueUsername);\n  }\n  onSubmit() {\n    const storedUserData = sessionStorage.getItem('current.user');\n    let originalUsername;\n    if (storedUserData) {\n      let retrievedUser = JSON.parse(storedUserData);\n      originalUsername = retrievedUser.username;\n      retrievedUser.username = this.user.username;\n      retrievedUser.birthdate = this.user.userbirthdate;\n      retrievedUser.email = this.user.email;\n      retrievedUser.email = this.user.email;\n      retrievedUser.password = this.user.password;\n      retrievedUser.pwdconfirm = this.user.pwdconfirm;\n      // Update session storage with the new user data\n      sessionStorage.setItem('current.user', JSON.stringify(retrievedUser));\n    }\n    const newDetails = {\n      originalUsername: originalUsername,\n      updatedDetails: this.user // Send updated user details\n    };\n\n    console.log(newDetails);\n    this.http.post(BACKEND_URL + \"/update-user\", newDetails).subscribe(response => {\n      console.log('User details updated on the server.', response);\n      this.isUniqueEmail = false;\n    }, error => {\n      console.error('There was an error updating the user details on the server.', error);\n      alert('Error updating profile. Please try again.');\n      this.isUniqueEmail = false;\n    });\n    alert('Profile updated!');\n    this.router.navigateByUrl('/account'); // Assuming '/account' is your account page route\n  }\n\n  closeProfile() {\n    this.router.navigateByUrl('/account'); // Assuming '/account' is your account page route\n  }\n}\n\nProfileComponent.ɵfac = function ProfileComponent_Factory(t) {\n  return new (t || ProfileComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.HttpClient));\n};\nProfileComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ProfileComponent,\n  selectors: [[\"app-profile\"]],\n  decls: 17,\n  vars: 3,\n  consts: [[3, \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"username\"], [\"type\", \"text\", \"name\", \"username\", \"id\", \"username\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"birthdate\"], [\"type\", \"date\", \"name\", \"birthdate\", \"id\", \"birthdate\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"age\"], [\"type\", \"number\", \"name\", \"age\", \"id\", \"age\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\"], [1, \"btn\", \"btn-secondary\", 3, \"click\"]],\n  template: function ProfileComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function ProfileComponent_Template_form_ngSubmit_0_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(1, \"div\", 1)(2, \"label\", 2);\n      i0.ɵɵtext(3, \"Username:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"input\", 3);\n      i0.ɵɵlistener(\"ngModelChange\", function ProfileComponent_Template_input_ngModelChange_4_listener($event) {\n        return ctx.user.username = $event;\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(5, \"div\", 1)(6, \"label\", 4);\n      i0.ɵɵtext(7, \"Birthdate:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"input\", 5);\n      i0.ɵɵlistener(\"ngModelChange\", function ProfileComponent_Template_input_ngModelChange_8_listener($event) {\n        return ctx.user.userbirthdate = $event;\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(9, \"div\", 1)(10, \"label\", 6);\n      i0.ɵɵtext(11, \"Age:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(12, \"input\", 7);\n      i0.ɵɵlistener(\"ngModelChange\", function ProfileComponent_Template_input_ngModelChange_12_listener($event) {\n        return ctx.user.userage = $event;\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(13, \"button\", 8);\n      i0.ɵɵtext(14, \"Update Profile\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(15, \"button\", 9);\n      i0.ɵɵlistener(\"click\", function ProfileComponent_Template_button_click_15_listener() {\n        return ctx.closeProfile();\n      });\n      i0.ɵɵtext(16, \"Close\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.user.username);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.user.userbirthdate);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.user.userage);\n    }\n  },\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["HttpHeaders","BACKEND_URL","httpOptions","headers","ProfileComponent","constructor","router","http","user","allUsernames","isUniqueUsername","isUniqueEmail","isUniquePassword","ngOnInit","storedUserData","sessionStorage","getItem","get","subscribe","usernames","console","log","retrievedUser","JSON","parse","username","userbirthdate","birthdate","email","password","pwdconfirm","onUsernameInput","includes","onSubmit","originalUsername","setItem","stringify","newDetails","updatedDetails","post","response","error","alert","navigateByUrl","closeProfile","i0","ɵɵdirectiveInject","i1","Router","i2","HttpClient","selectors","decls","vars","consts","template","ProfileComponent_Template","rf","ctx","ɵɵelementStart","ɵɵlistener","ProfileComponent_Template_form_ngSubmit_0_listener","ɵɵtext","ɵɵelementEnd","ProfileComponent_Template_input_ngModelChange_4_listener","$event","ProfileComponent_Template_input_ngModelChange_8_listener","ProfileComponent_Template_input_ngModelChange_12_listener","userage","ProfileComponent_Template_button_click_15_listener","ɵɵadvance","ɵɵproperty"],"sources":["/Users/frazerlinscott/Desktop/Software Frameworks/Assignments/Assignment1_SoftwareFrames_s2930588/src/app/profile/profile.component.ts","/Users/frazerlinscott/Desktop/Software Frameworks/Assignments/Assignment1_SoftwareFrames_s2930588/src/app/profile/profile.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { User } from 'server/routes/userModel';\n\nconst BACKEND_URL = \"http://localhost:3000\";\nconst httpOptions = {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n};\n\n\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.css']\n})\nexport class ProfileComponent implements OnInit {\n  user: any = {};\n  allUsernames: string[] = [];\n  isUniqueUsername: boolean = true;\n  isUniqueEmail:boolean = true;\n  isUniquePassword: boolean = true;\n  \n  constructor(private router: Router, private http: HttpClient) { }\n\n  ngOnInit() {\n\n    const storedUserData = sessionStorage.getItem('current.user');\n\n    this.http.get<string[]>(BACKEND_URL + \"/usernames\").subscribe(usernames => {\n      this.allUsernames = usernames;\n      console.log(this.allUsernames);\n    });\n\n\n    if (storedUserData) {\n        const retrievedUser = JSON.parse(storedUserData);\n\n        console.log(retrievedUser)\n\n        this.user.username = retrievedUser.username;\n        this.user.userbirthdate = retrievedUser.birthdate\n        this.user.email = retrievedUser.email\n        this.user.password=retrievedUser.password\n        this.user.pwdconfirm=retrievedUser.pwdconfirm\n      }\n}\n\n  onUsernameInput() {\n  // Check if username is unique while the user is typing\n    this.isUniqueUsername = !this.allUsernames.includes(this.user.username);\n    console.log(this.isUniqueUsername)\n  }\n\n  onSubmit() {\n\n    const storedUserData = sessionStorage.getItem('current.user');\n    let originalUsername;\n\n    if (storedUserData) {\n        let retrievedUser = JSON.parse(storedUserData);\n        originalUsername = retrievedUser.username;\n\n\n        retrievedUser.username = this.user.username;\n        retrievedUser.birthdate = this.user.userbirthdate;\n        retrievedUser.email = this.user.email;\n        retrievedUser.email = this.user.email;\n        retrievedUser.password = this.user.password\n        retrievedUser.pwdconfirm = this.user.pwdconfirm\n\n        // Update session storage with the new user data\n        sessionStorage.setItem('current.user', JSON.stringify(retrievedUser));\n    }\n\n    const newDetails = {\n      originalUsername: originalUsername,  // Send original username\n      updatedDetails: this.user  // Send updated user details\n  };\n\n  console.log(newDetails);\n\n    this.http.post(BACKEND_URL+\"/update-user\", newDetails).subscribe(\n      response => {\n          console.log('User details updated on the server.', response);\n          this.isUniqueEmail=false\n      },\n      error => {\n          console.error('There was an error updating the user details on the server.', error);\n          alert('Error updating profile. Please try again.');\n          this.isUniqueEmail=false\n      }\n  )\n    alert('Profile updated!');\n    this.router.navigateByUrl('/account'); // Assuming '/account' is your account page route\n  }\n\n  closeProfile() {\n    this.router.navigateByUrl('/account'); // Assuming '/account' is your account page route\n  }\n\n  \n\n  \n}\n","<form (ngSubmit)=\"onSubmit()\">\n    <div class=\"form-group\">\n      <label for=\"username\">Username:</label>\n      <input type=\"text\" class=\"form-control\" [(ngModel)]=\"user.username\" name=\"username\" id=\"username\">\n    </div>\n  \n    <div class=\"form-group\">\n      <label for=\"birthdate\">Birthdate:</label>\n      <input type=\"date\" class=\"form-control\" [(ngModel)]=\"user.userbirthdate\" name=\"birthdate\" id=\"birthdate\">\n    </div>\n  \n    <div class=\"form-group\">\n      <label for=\"age\">Age:</label>\n      <input type=\"number\" class=\"form-control\" [(ngModel)]=\"user.userage\" name=\"age\" id=\"age\">\n    </div>\n  \n    <!-- Add other form groups for other data... -->\n  \n    <button type=\"submit\" class=\"btn btn-primary\">Update Profile</button>\n    <button (click)=\"closeProfile()\" class=\"btn btn-secondary\">Close</button>\n\n  </form>\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}