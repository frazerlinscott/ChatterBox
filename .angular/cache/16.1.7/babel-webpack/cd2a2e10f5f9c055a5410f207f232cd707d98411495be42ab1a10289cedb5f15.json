{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { HttpHeaders } from '@angular/common/http';\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\nconst BACKEND_URL = \"http://localhost:3000\";\nexport let ChannelsComponent = class ChannelsComponent {\n  constructor(http, route) {\n    this.http = http;\n    this.route = route;\n  }\n  ngOnInit() {\n    const storedUser = window.sessionStorage.getItem('current.user');\n    if (storedUser) {\n      this.loggedInUser = JSON.parse(storedUser);\n    }\n    this.loggedInUser.role = 1;\n    this.route.queryParams.subscribe(params => {\n      let currentGroupString = params['yourKey'];\n      // Check if the data is stringified object\n      try {\n        this.passedGroupObject = JSON.parse(currentGroupString);\n        console.log(this.passedGroupObject);\n      } catch (e) {\n        console.error('Error parsing the object', e);\n      }\n      this.getGroups();\n    });\n  }\n  // getchannelsKeys() {\n  //   this.currentChannelskeys = Object.keys(this.currentGroupObject.channels);\n  // }\n  addUserToChannel(targetChannel) {\n    this.getGroups();\n    console.log(targetChannel);\n    console.log(this.loggedInUser.username);\n    // Loop over each channel in this.currentGroup.channels\n    for (let channel in this.currentGroup.channels) {\n      // If the channel name matches the target and the user is not in the channel array\n      if (channel === targetChannel && !this.currentGroup.channels[channel].includes(this.loggedInUser.username)) {\n        this.currentGroup.channels[channel].push(this.loggedInUser.username);\n        console.log(`Added ${this.loggedInUser.username} to ${channel}`);\n        break; // Exit the loop as we've found and processed the target channel\n      }\n    }\n\n    this.http.post(BACKEND_URL + \"/update-groups\", this.currentGroup).subscribe(response => {\n      console.log('User details updated on the server.', response);\n      //refesh User list \n      this.getGroups();\n    }, error => {\n      console.error('There was an error updating the user details on the server.', error);\n      alert('Error updating profile. Please try again.');\n    });\n  }\n  removeUserFromChannel(targetChannel) {\n    // Fetch the groups\n    this.getGroups();\n    console.log(targetChannel);\n    console.log(this.loggedInUser.username);\n    // Loop over each channel in this.currentGroup.channels\n    for (let channel in this.currentGroup.channels) {\n      // If the channel name matches the target and the user is in the channel array\n      if (channel === targetChannel && this.currentGroup.channels[channel].includes(this.loggedInUser.username)) {\n        const userIndex = this.currentGroup.channels[channel].indexOf(this.loggedInUser.username);\n        if (userIndex > -1) {\n          this.currentGroup.channels[channel].splice(userIndex, 1); // Remove the user from the channel\n          console.log(`Removed ${this.loggedInUser.username} from ${channel}`);\n          break; // Exit the loop as we've found and processed the target channel\n        }\n      }\n    }\n    // Update the groups on the server\n    this.http.post(BACKEND_URL + \"/update-groups\", this.currentGroup).subscribe(response => {\n      console.log('User details updated on the server.', response);\n      // Refresh the User list \n      this.getGroups();\n    }, error => {\n      console.error('There was an error updating the user details on the server.', error);\n      alert('Error updating profile. Please try again.');\n    });\n  }\n  addChannel() {\n    console.log(this.newChannelName);\n  }\n  closeModal(modalType) {\n    $('#addChannelModal').modal('hide');\n  }\n  getGroups() {\n    this.http.post(BACKEND_URL + \"/all-groups\", httpOptions).subscribe(data => {\n      if (data) {\n        this.groups = data;\n        const matchedGroup = this.groups.find(group => group.groupID === this.passedGroupObject.groupID);\n        if (matchedGroup) {\n          this.currentGroup = matchedGroup;\n          //console.log(\"Matched\")\n          console.log(this.currentGroup);\n          this.myChannels = [];\n          this.toJoinChannels = [];\n          for (let channel in this.currentGroup.channels) {\n            if (this.currentGroup.channels[channel].includes(this.loggedInUser.username)) {\n              // If the loggedInUser is in the channel, add it to myChannels\n              this.myChannels.push(channel);\n            } else {\n              // Otherwise, add it to toJoinChannels\n              this.toJoinChannels.push(channel);\n            }\n          }\n          console.log(\"My Channels:\", this.myChannels);\n          console.log(\"Channels to Join:\", this.toJoinChannels);\n          // this.myChannels = \n          // // = Object.keys(this.currentGroup.channels);\n          // this.toJoinChannels=\n          // this.currentGroup.channel\n        } else {\n          console.log(`No group found with groupID: ${this.passedGroupObject.groupID}`);\n        }\n      } else {\n        alert(\"no Data Soz\");\n      }\n    }, error => {\n      console.error('There was an error:', error);\n    });\n  }\n};\nChannelsComponent = __decorate([Component({\n  selector: 'app-channels',\n  templateUrl: './channels.component.html',\n  styleUrls: ['./channels.component.css']\n})], ChannelsComponent);","map":{"version":3,"names":["Component","HttpHeaders","httpOptions","headers","BACKEND_URL","ChannelsComponent","constructor","http","route","ngOnInit","storedUser","window","sessionStorage","getItem","loggedInUser","JSON","parse","role","queryParams","subscribe","params","currentGroupString","passedGroupObject","console","log","e","error","getGroups","addUserToChannel","targetChannel","username","channel","currentGroup","channels","includes","push","post","response","alert","removeUserFromChannel","userIndex","indexOf","splice","addChannel","newChannelName","closeModal","modalType","$","modal","data","groups","matchedGroup","find","group","groupID","myChannels","toJoinChannels","__decorate","selector","templateUrl","styleUrls"],"sources":["/Users/frazerlinscott/Desktop/Software Frameworks/Assignments/Assignment1_SoftwareFrames_s2930588/src/app/channels/channels.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\nconst httpOptions = {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n};\n\nconst BACKEND_URL = \"http://localhost:3000\";\n\n\n@Component({\n  selector: 'app-channels',\n  templateUrl: './channels.component.html',\n  styleUrls: ['./channels.component.css']\n})\nexport class ChannelsComponent implements OnInit {\n\n  passedGroupObject: any;\n\n  myChannels: any;\n  toJoinChannels: any;\n\n  currentGroup: any;\n  currentChannels: any;\n\n\n  joinChannelskeys: any;\n  myChannelskeys: any;\n\n  loggedInUser:any; \n  groups: any;\n\n  newChannelName: string;\n\n  constructor(private http: HttpClient, private route: ActivatedRoute) { \n}\n\nngOnInit(): void {\n\n  const storedUser = window.sessionStorage.getItem('current.user');\n  if (storedUser) {\n\n    this.loggedInUser = JSON.parse(storedUser);\n  }\n\n  this.loggedInUser.role = 1\n\n  this.route.queryParams.subscribe(params => {\n    let currentGroupString = params['yourKey'];\n    \n    // Check if the data is stringified object\n    try {\n        this.passedGroupObject = JSON.parse(currentGroupString);\n        console.log(this.passedGroupObject);\n    } catch (e) {\n        console.error('Error parsing the object', e);\n    }\n\n    this.getGroups()\n\n });\n}\n\n// getchannelsKeys() {\n//   this.currentChannelskeys = Object.keys(this.currentGroupObject.channels);\n// }\n\naddUserToChannel(targetChannel: any) {\n  this.getGroups();\n  console.log(targetChannel);\n  console.log(this.loggedInUser.username);\n\n  // Loop over each channel in this.currentGroup.channels\n  for (let channel in this.currentGroup.channels) {\n      // If the channel name matches the target and the user is not in the channel array\n      if (channel === targetChannel && !this.currentGroup.channels[channel].includes(this.loggedInUser.username)) {\n          this.currentGroup.channels[channel].push(this.loggedInUser.username);\n          console.log(`Added ${this.loggedInUser.username} to ${channel}`);\n          break; // Exit the loop as we've found and processed the target channel\n      }\n  }\n  \n  this.http.post(BACKEND_URL+\"/update-groups\", this.currentGroup).subscribe(\n    response => {\n        console.log('User details updated on the server.', response);\n\n        //refesh User list \n        this.getGroups();\n    },\n    error => {\n        console.error('There was an error updating the user details on the server.', error);\n        alert('Error updating profile. Please try again.');\n    }\n  )}\n\n  removeUserFromChannel(targetChannel: any) {\n    // Fetch the groups\n    this.getGroups();\n    console.log(targetChannel);\n    console.log(this.loggedInUser.username);\n\n    // Loop over each channel in this.currentGroup.channels\n    for (let channel in this.currentGroup.channels) {\n        // If the channel name matches the target and the user is in the channel array\n        if (channel === targetChannel && this.currentGroup.channels[channel].includes(this.loggedInUser.username)) {\n            const userIndex = this.currentGroup.channels[channel].indexOf(this.loggedInUser.username);\n            \n            if (userIndex > -1) {\n                this.currentGroup.channels[channel].splice(userIndex, 1); // Remove the user from the channel\n                console.log(`Removed ${this.loggedInUser.username} from ${channel}`);\n                break; // Exit the loop as we've found and processed the target channel\n            }\n        }\n    }\n  \n    // Update the groups on the server\n    this.http.post(BACKEND_URL+\"/update-groups\", this.currentGroup).subscribe(\n        response => {\n            console.log('User details updated on the server.', response);\n\n            // Refresh the User list \n            this.getGroups();\n        },\n        error => {\n            console.error('There was an error updating the user details on the server.', error);\n            alert('Error updating profile. Please try again.');\n        }\n    );\n}\n\naddChannel(){\n  console.log(this.newChannelName)\n\n}\n\ncloseModal(modalType: string | undefined){\n\n    $('#addChannelModal').modal('hide');\n\n\n}\n\n\n\ngetGroups(){\n  this.http.post(BACKEND_URL + \"/all-groups\", httpOptions)\n  .subscribe(\n      (data: any) => {\n          if (data) {\n            this.groups = data\n            const matchedGroup = this.groups.find((group: { groupID: any; }) => group.groupID === this.passedGroupObject.groupID);\n            if (matchedGroup) {\n                this.currentGroup = matchedGroup;\n                //console.log(\"Matched\")\n                console.log(this.currentGroup)\n\n                this.myChannels = [];\n                this.toJoinChannels = [];\n\n                for (let channel in this.currentGroup.channels) {\n                  if (this.currentGroup.channels[channel].includes(this.loggedInUser.username)) {\n                      // If the loggedInUser is in the channel, add it to myChannels\n                      this.myChannels.push(channel);\n                  } else {\n                      // Otherwise, add it to toJoinChannels\n                      this.toJoinChannels.push(channel);\n                  }\n              }\n              console.log(\"My Channels:\", this.myChannels);\n              console.log(\"Channels to Join:\", this.toJoinChannels);\n\n                // this.myChannels = \n\n                // // = Object.keys(this.currentGroup.channels);\n                // this.toJoinChannels=\n\n                // this.currentGroup.channel\n\n            } else {\n                console.log(`No group found with groupID: ${this.passedGroupObject.groupID}`);\n            }\n\n\n\n\n\n\n          } else {\n              alert(\"no Data Soz\");\n          }\n      },\n      error => {console.error('There was an error:', error);}\n  );\n}\n\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAEjD,SAAqBC,WAAW,QAAQ,sBAAsB;AAE9D,MAAMC,WAAW,GAAG;EAClBC,OAAO,EAAE,IAAIF,WAAW,CAAC;IAAE,cAAc,EAAE;EAAkB,CAAE;CAChE;AAED,MAAMG,WAAW,GAAG,uBAAuB;AAQpC,WAAMC,iBAAiB,GAAvB,MAAMA,iBAAiB;EAmB5BC,YAAoBC,IAAgB,EAAUC,KAAqB;IAA/C,KAAAD,IAAI,GAAJA,IAAI;IAAsB,KAAAC,KAAK,GAALA,KAAK;EACrD;EAEAC,QAAQA,CAAA;IAEN,MAAMC,UAAU,GAAGC,MAAM,CAACC,cAAc,CAACC,OAAO,CAAC,cAAc,CAAC;IAChE,IAAIH,UAAU,EAAE;MAEd,IAAI,CAACI,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACN,UAAU,CAAC;;IAG5C,IAAI,CAACI,YAAY,CAACG,IAAI,GAAG,CAAC;IAE1B,IAAI,CAACT,KAAK,CAACU,WAAW,CAACC,SAAS,CAACC,MAAM,IAAG;MACxC,IAAIC,kBAAkB,GAAGD,MAAM,CAAC,SAAS,CAAC;MAE1C;MACA,IAAI;QACA,IAAI,CAACE,iBAAiB,GAAGP,IAAI,CAACC,KAAK,CAACK,kBAAkB,CAAC;QACvDE,OAAO,CAACC,GAAG,CAAC,IAAI,CAACF,iBAAiB,CAAC;OACtC,CAAC,OAAOG,CAAC,EAAE;QACRF,OAAO,CAACG,KAAK,CAAC,0BAA0B,EAAED,CAAC,CAAC;;MAGhD,IAAI,CAACE,SAAS,EAAE;IAEnB,CAAC,CAAC;EACH;EAEA;EACA;EACA;EAEAC,gBAAgBA,CAACC,aAAkB;IACjC,IAAI,CAACF,SAAS,EAAE;IAChBJ,OAAO,CAACC,GAAG,CAACK,aAAa,CAAC;IAC1BN,OAAO,CAACC,GAAG,CAAC,IAAI,CAACV,YAAY,CAACgB,QAAQ,CAAC;IAEvC;IACA,KAAK,IAAIC,OAAO,IAAI,IAAI,CAACC,YAAY,CAACC,QAAQ,EAAE;MAC5C;MACA,IAAIF,OAAO,KAAKF,aAAa,IAAI,CAAC,IAAI,CAACG,YAAY,CAACC,QAAQ,CAACF,OAAO,CAAC,CAACG,QAAQ,CAAC,IAAI,CAACpB,YAAY,CAACgB,QAAQ,CAAC,EAAE;QACxG,IAAI,CAACE,YAAY,CAACC,QAAQ,CAACF,OAAO,CAAC,CAACI,IAAI,CAAC,IAAI,CAACrB,YAAY,CAACgB,QAAQ,CAAC;QACpEP,OAAO,CAACC,GAAG,CAAC,SAAS,IAAI,CAACV,YAAY,CAACgB,QAAQ,OAAOC,OAAO,EAAE,CAAC;QAChE,MAAM,CAAC;;;;IAIf,IAAI,CAACxB,IAAI,CAAC6B,IAAI,CAAChC,WAAW,GAAC,gBAAgB,EAAE,IAAI,CAAC4B,YAAY,CAAC,CAACb,SAAS,CACvEkB,QAAQ,IAAG;MACPd,OAAO,CAACC,GAAG,CAAC,qCAAqC,EAAEa,QAAQ,CAAC;MAE5D;MACA,IAAI,CAACV,SAAS,EAAE;IACpB,CAAC,EACDD,KAAK,IAAG;MACJH,OAAO,CAACG,KAAK,CAAC,6DAA6D,EAAEA,KAAK,CAAC;MACnFY,KAAK,CAAC,2CAA2C,CAAC;IACtD,CAAC,CACF;EAAA;EAEDC,qBAAqBA,CAACV,aAAkB;IACtC;IACA,IAAI,CAACF,SAAS,EAAE;IAChBJ,OAAO,CAACC,GAAG,CAACK,aAAa,CAAC;IAC1BN,OAAO,CAACC,GAAG,CAAC,IAAI,CAACV,YAAY,CAACgB,QAAQ,CAAC;IAEvC;IACA,KAAK,IAAIC,OAAO,IAAI,IAAI,CAACC,YAAY,CAACC,QAAQ,EAAE;MAC5C;MACA,IAAIF,OAAO,KAAKF,aAAa,IAAI,IAAI,CAACG,YAAY,CAACC,QAAQ,CAACF,OAAO,CAAC,CAACG,QAAQ,CAAC,IAAI,CAACpB,YAAY,CAACgB,QAAQ,CAAC,EAAE;QACvG,MAAMU,SAAS,GAAG,IAAI,CAACR,YAAY,CAACC,QAAQ,CAACF,OAAO,CAAC,CAACU,OAAO,CAAC,IAAI,CAAC3B,YAAY,CAACgB,QAAQ,CAAC;QAEzF,IAAIU,SAAS,GAAG,CAAC,CAAC,EAAE;UAChB,IAAI,CAACR,YAAY,CAACC,QAAQ,CAACF,OAAO,CAAC,CAACW,MAAM,CAACF,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC;UAC1DjB,OAAO,CAACC,GAAG,CAAC,WAAW,IAAI,CAACV,YAAY,CAACgB,QAAQ,SAASC,OAAO,EAAE,CAAC;UACpE,MAAM,CAAC;;;;IAKnB;IACA,IAAI,CAACxB,IAAI,CAAC6B,IAAI,CAAChC,WAAW,GAAC,gBAAgB,EAAE,IAAI,CAAC4B,YAAY,CAAC,CAACb,SAAS,CACrEkB,QAAQ,IAAG;MACPd,OAAO,CAACC,GAAG,CAAC,qCAAqC,EAAEa,QAAQ,CAAC;MAE5D;MACA,IAAI,CAACV,SAAS,EAAE;IACpB,CAAC,EACDD,KAAK,IAAG;MACJH,OAAO,CAACG,KAAK,CAAC,6DAA6D,EAAEA,KAAK,CAAC;MACnFY,KAAK,CAAC,2CAA2C,CAAC;IACtD,CAAC,CACJ;EACL;EAEAK,UAAUA,CAAA;IACRpB,OAAO,CAACC,GAAG,CAAC,IAAI,CAACoB,cAAc,CAAC;EAElC;EAEAC,UAAUA,CAACC,SAA6B;IAEpCC,CAAC,CAAC,kBAAkB,CAAC,CAACC,KAAK,CAAC,MAAM,CAAC;EAGvC;EAIArB,SAASA,CAAA;IACP,IAAI,CAACpB,IAAI,CAAC6B,IAAI,CAAChC,WAAW,GAAG,aAAa,EAAEF,WAAW,CAAC,CACvDiB,SAAS,CACL8B,IAAS,IAAI;MACV,IAAIA,IAAI,EAAE;QACR,IAAI,CAACC,MAAM,GAAGD,IAAI;QAClB,MAAME,YAAY,GAAG,IAAI,CAACD,MAAM,CAACE,IAAI,CAAEC,KAAwB,IAAKA,KAAK,CAACC,OAAO,KAAK,IAAI,CAAChC,iBAAiB,CAACgC,OAAO,CAAC;QACrH,IAAIH,YAAY,EAAE;UACd,IAAI,CAACnB,YAAY,GAAGmB,YAAY;UAChC;UACA5B,OAAO,CAACC,GAAG,CAAC,IAAI,CAACQ,YAAY,CAAC;UAE9B,IAAI,CAACuB,UAAU,GAAG,EAAE;UACpB,IAAI,CAACC,cAAc,GAAG,EAAE;UAExB,KAAK,IAAIzB,OAAO,IAAI,IAAI,CAACC,YAAY,CAACC,QAAQ,EAAE;YAC9C,IAAI,IAAI,CAACD,YAAY,CAACC,QAAQ,CAACF,OAAO,CAAC,CAACG,QAAQ,CAAC,IAAI,CAACpB,YAAY,CAACgB,QAAQ,CAAC,EAAE;cAC1E;cACA,IAAI,CAACyB,UAAU,CAACpB,IAAI,CAACJ,OAAO,CAAC;aAChC,MAAM;cACH;cACA,IAAI,CAACyB,cAAc,CAACrB,IAAI,CAACJ,OAAO,CAAC;;;UAGzCR,OAAO,CAACC,GAAG,CAAC,cAAc,EAAE,IAAI,CAAC+B,UAAU,CAAC;UAC5ChC,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAE,IAAI,CAACgC,cAAc,CAAC;UAEnD;UAEA;UACA;UAEA;SAEH,MAAM;UACHjC,OAAO,CAACC,GAAG,CAAC,gCAAgC,IAAI,CAACF,iBAAiB,CAACgC,OAAO,EAAE,CAAC;;OAQlF,MAAM;QACHhB,KAAK,CAAC,aAAa,CAAC;;IAE5B,CAAC,EACDZ,KAAK,IAAG;MAAEH,OAAO,CAACG,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAAC,CAAC,CAC1D;EACH;CAEC;AApLYrB,iBAAiB,GAAAoD,UAAA,EAL7BzD,SAAS,CAAC;EACT0D,QAAQ,EAAE,cAAc;EACxBC,WAAW,EAAE,2BAA2B;EACxCC,SAAS,EAAE,CAAC,0BAA0B;CACvC,CAAC,C,EACWvD,iBAAiB,CAoL7B"},"metadata":{},"sourceType":"module","externalDependencies":[]}