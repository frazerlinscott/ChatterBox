{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { HttpHeaders } from '@angular/common/http';\nimport { User } from 'server/routes/userModel';\nconst BACKEND_URL = \"http://localhost:3000\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\nexport let CreateUserComponent = class CreateUserComponent {\n  constructor(router, http, uploadService) {\n    this.router = router;\n    this.http = http;\n    this.uploadService = uploadService;\n    this.user = new User('', '', 0, '', '', '', 1, [], true);\n    this.allUsernames = [];\n    this.isUniqueUsername = true;\n    this.isUniquePassword = true;\n    this.isUniqueEmail = true;\n  }\n  ngOnInit() {\n    this.isUniqueEmail = true;\n    this.http.get(BACKEND_URL + \"/usernames\").subscribe(usernames => {\n      this.allUsernames = usernames;\n      console.log(this.allUsernames);\n    });\n  }\n  onUsernameInput() {\n    // Check if username is unique while the user is typing\n    this.isUniqueUsername = !this.allUsernames.includes(this.user.username);\n  }\n  onCreate() {\n    if (this.user.password !== this.user.pwdconfirm) {\n      //alert('Passwords do not match!');  // Notify the user\n      this.isUniquePassword = false;\n      return;\n    }\n    const userToSend = {\n      ...this.user\n    };\n    this.http.post(BACKEND_URL + \"/addUser\", userToSend, httpOptions).subscribe(response => {\n      if (response && response.success) {\n        this.router.navigateByUrl('login');\n      } else {\n        alert(\"Email already exists!\");\n      }\n    }, error => {\n      console.error('There was an error during user creation:', error);\n      if (error && error.error && error.error.message) {\n        console.error('Server response:', error.error.message);\n        this.isUniqueEmail = false;\n      }\n    });\n  }\n  onUpload(event) {\n    const file = event.target.files[0];\n    if (file) {\n      const formData = new FormData();\n      formData.append('file', file, file.name);\n      this.uploadService.uploadFile(formData).subscribe(response => {\n        console.log('Upload successful', response);\n      }, error => {\n        console.error('Upload error', error);\n      });\n    }\n  }\n};\nCreateUserComponent = __decorate([Component({\n  selector: 'app-create-user',\n  templateUrl: './create-user.component.html',\n  styleUrls: ['./create-user.component.css']\n})], CreateUserComponent);","map":{"version":3,"names":["Component","HttpHeaders","User","BACKEND_URL","httpOptions","headers","CreateUserComponent","constructor","router","http","uploadService","user","allUsernames","isUniqueUsername","isUniquePassword","isUniqueEmail","ngOnInit","get","subscribe","usernames","console","log","onUsernameInput","includes","username","onCreate","password","pwdconfirm","userToSend","post","response","success","navigateByUrl","alert","error","message","onUpload","event","file","target","files","formData","FormData","append","name","uploadFile","__decorate","selector","templateUrl","styleUrls"],"sources":["/Users/frazerlinscott/Desktop/Software Frameworks/Assignments/Assignment1_SoftwareFrames_s2930588/src/app/create-user/create-user.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { User } from 'server/routes/userModel';\nimport { UploadService } from '../service/upload.service';\n\n\nconst BACKEND_URL = \"http://localhost:3000\";\nconst httpOptions = {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n};\n\n@Component({\n  selector: 'app-create-user',\n  templateUrl: './create-user.component.html',\n  styleUrls: ['./create-user.component.css']\n})\n\nexport class CreateUserComponent implements OnInit {\n\n  user: User = new User('', '', 0, '', '', '', 1, [], true);\n\n  allUsernames: string[] = [];\n  isUniqueUsername: boolean = true;\n  isUniquePassword: boolean = true;\n  isUniqueEmail:boolean = true;\n\n  constructor(private router: Router, private http: HttpClient, private uploadService: UploadService) {}\n\n  ngOnInit(): void {\n    this.isUniqueEmail=true; \n    this.http.get<string[]>(BACKEND_URL + \"/usernames\").subscribe(usernames => {\n      this.allUsernames = usernames;\n      console.log(this.allUsernames);\n    });\n  }\n\n  onUsernameInput() {\n    // Check if username is unique while the user is typing\n    this.isUniqueUsername = !this.allUsernames.includes(this.user.username);\n  }\n\n  onCreate() {\n    if (this.user.password !== this.user.pwdconfirm) {\n      //alert('Passwords do not match!');  // Notify the user\n      this.isUniquePassword=false; \n      return;\n    }\n\n    const userToSend = { ...this.user };\n\n    this.http.post(BACKEND_URL + \"/addUser\", userToSend, httpOptions).subscribe(\n      (response: any) => {\n        if (response && response.success) {\n          this.router.navigateByUrl('login');\n        } else {\n          alert(\"Email already exists!\");\n        }\n      },\n      error => {\n        console.error('There was an error during user creation:', error);\n      if (error && error.error && error.error.message) {\n        console.error('Server response:', error.error.message);\n        this.isUniqueEmail=false\n      }\n    }\n    );\n  }\n\n  onUpload(event: any) {\n    const file = event.target.files[0];\n    if (file) {\n      const formData = new FormData();\n      formData.append('file', file, file.name);\n\n      this.uploadService.uploadFile(formData).subscribe(response => {\n        console.log('Upload successful', response);\n      }, error => {\n        console.error('Upload error', error);\n      });\n    }\n  }\n\n}\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}