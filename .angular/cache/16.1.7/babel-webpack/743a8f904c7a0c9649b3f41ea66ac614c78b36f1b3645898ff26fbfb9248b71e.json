{"ast":null,"code":"import _asyncToGenerator from \"/Users/frazerlinscott/Desktop/Software Frameworks/Assignments/Assignment1_SoftwareFrames_s2930588/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// import { ComponentFixture, TestBed } from '@angular/core/testing';\n// import { AccountComponent } from './account.component';\n// describe('AccountComponent', () => {\n//   let component: AccountComponent;\n//   let fixture: ComponentFixture<AccountComponent>;\n//   beforeEach(() => {\n//     TestBed.configureTestingModule({\n//       declarations: [AccountComponent]\n//     });\n//     fixture = TestBed.createComponent(AccountComponent);\n//     component = fixture.componentInstance;\n//     fixture.detectChanges();\n//   });\n//   it('should create', () => {\n//     expect(component).toBeTruthy();\n//   });\n// });\nimport { TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { AccountComponent } from './account.component';\ndescribe('AccountComponent', () => {\n  let component;\n  let fixture;\n  let httpMock;\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    yield TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule, RouterTestingModule, ReactiveFormsModule],\n      declarations: [AccountComponent]\n    }).compileComponents();\n    fixture = TestBed.createComponent(AccountComponent);\n    component = fixture.componentInstance;\n    httpMock = TestBed.inject(HttpTestingController);\n    component.loggedInUser = {\n      username: 'testUser',\n      role: 1 /* or whatever is appropriate */\n    };\n  }));\n\n  afterEach(() => {\n    httpMock.verify(); // Ensure that there are no outstanding HTTP requests\n  });\n\n  it('should fetch all groups', () => {\n    const mockGroups = [{\n      id: 1,\n      groupName: \"Test Group\",\n      valid: true,\n      members: [\"testUser\"]\n    }];\n    component.getGroups();\n    const req = httpMock.expectOne(\"http://localhost:3000/all-groups\");\n    expect(req.request.method).toBe('GET');\n    req.flush(mockGroups);\n    expect(component.allGroups).toEqual(mockGroups);\n    expect(component.currentUserGroups).toEqual(mockGroups);\n  });\n  it('should fetch all users', () => {\n    const mockUsers = [{\n      id: 1,\n      username: \"testUser\"\n    }];\n    component.getUsers();\n    const req = httpMock.expectOne(\"http://localhost:3000/all-users\");\n    expect(req.request.method).toBe('GET');\n    req.flush(mockUsers);\n    expect(component.users).toEqual(mockUsers);\n  });\n});","map":{"version":3,"names":["TestBed","HttpClientTestingModule","HttpTestingController","RouterTestingModule","ReactiveFormsModule","AccountComponent","describe","component","fixture","httpMock","beforeEach","_asyncToGenerator","configureTestingModule","imports","declarations","compileComponents","createComponent","componentInstance","inject","loggedInUser","username","role","afterEach","verify","it","mockGroups","id","groupName","valid","members","getGroups","req","expectOne","expect","request","method","toBe","flush","allGroups","toEqual","currentUserGroups","mockUsers","getUsers","users"],"sources":["/Users/frazerlinscott/Desktop/Software Frameworks/Assignments/Assignment1_SoftwareFrames_s2930588/src/app/account/account.component.spec.ts"],"sourcesContent":["// import { ComponentFixture, TestBed } from '@angular/core/testing';\n\n// import { AccountComponent } from './account.component';\n\n// describe('AccountComponent', () => {\n//   let component: AccountComponent;\n//   let fixture: ComponentFixture<AccountComponent>;\n\n//   beforeEach(() => {\n//     TestBed.configureTestingModule({\n//       declarations: [AccountComponent]\n//     });\n//     fixture = TestBed.createComponent(AccountComponent);\n//     component = fixture.componentInstance;\n//     fixture.detectChanges();\n//   });\n\n//   it('should create', () => {\n//     expect(component).toBeTruthy();\n//   });\n// });\n\n\nimport { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { AccountComponent } from './account.component';\n\ndescribe('AccountComponent', () => {\n  let component: AccountComponent;\n  let fixture: ComponentFixture<AccountComponent>;\n  let httpMock: HttpTestingController;\n\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule, RouterTestingModule, ReactiveFormsModule],\n      declarations: [AccountComponent]\n    }).compileComponents();\n\n    fixture = TestBed.createComponent(AccountComponent);\n    component = fixture.componentInstance;\n    httpMock = TestBed.inject(HttpTestingController);\n    component.loggedInUser = { username: 'testUser', role: 1 /* or whatever is appropriate */ };\n\n  });\n\n  afterEach(() => {\n    httpMock.verify(); // Ensure that there are no outstanding HTTP requests\n  });\n\n  it('should fetch all groups', () => {\n    const mockGroups = [{\n      id: 1,\n      groupName: \"Test Group\",\n      valid: true,\n      members: [\"testUser\"]\n    }];\n\n    component.getGroups();\n\n    const req = httpMock.expectOne(\"http://localhost:3000/all-groups\");\n    expect(req.request.method).toBe('GET');\n    req.flush(mockGroups);\n\n    expect(component.allGroups).toEqual(mockGroups);\n    expect(component.currentUserGroups).toEqual(mockGroups);\n  });\n\n  it('should fetch all users', () => {\n    const mockUsers = [{\n      id: 1,\n      username: \"testUser\"\n    }];\n\n    component.getUsers();\n\n    const req = httpMock.expectOne(\"http://localhost:3000/all-users\");\n    expect(req.request.method).toBe('GET');\n    req.flush(mockUsers);\n\n    expect(component.users).toEqual(mockUsers);\n  });\n\n});\n"],"mappings":";AAAA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA,SAA2BA,OAAO,QAAQ,uBAAuB;AACjE,SAASC,uBAAuB,EAAEC,qBAAqB,QAAQ,8BAA8B;AAC7F,SAASC,mBAAmB,QAAQ,yBAAyB;AAC7D,SAASC,mBAAmB,QAAQ,gBAAgB;AACpD,SAASC,gBAAgB,QAAQ,qBAAqB;AAEtDC,QAAQ,CAAC,kBAAkB,EAAE,MAAK;EAChC,IAAIC,SAA2B;EAC/B,IAAIC,OAA2C;EAC/C,IAAIC,QAA+B;EAEnCC,UAAU,eAAAC,iBAAA,CAAC,aAAW;IACpB,MAAMX,OAAO,CAACY,sBAAsB,CAAC;MACnCC,OAAO,EAAE,CAACZ,uBAAuB,EAAEE,mBAAmB,EAAEC,mBAAmB,CAAC;MAC5EU,YAAY,EAAE,CAACT,gBAAgB;KAChC,CAAC,CAACU,iBAAiB,EAAE;IAEtBP,OAAO,GAAGR,OAAO,CAACgB,eAAe,CAACX,gBAAgB,CAAC;IACnDE,SAAS,GAAGC,OAAO,CAACS,iBAAiB;IACrCR,QAAQ,GAAGT,OAAO,CAACkB,MAAM,CAAChB,qBAAqB,CAAC;IAChDK,SAAS,CAACY,YAAY,GAAG;MAAEC,QAAQ,EAAE,UAAU;MAAEC,IAAI,EAAE,CAAC,CAAC;IAAgC,CAAE;EAE7F,CAAC,EAAC;;EAEFC,SAAS,CAAC,MAAK;IACbb,QAAQ,CAACc,MAAM,EAAE,CAAC,CAAC;EACrB,CAAC,CAAC;;EAEFC,EAAE,CAAC,yBAAyB,EAAE,MAAK;IACjC,MAAMC,UAAU,GAAG,CAAC;MAClBC,EAAE,EAAE,CAAC;MACLC,SAAS,EAAE,YAAY;MACvBC,KAAK,EAAE,IAAI;MACXC,OAAO,EAAE,CAAC,UAAU;KACrB,CAAC;IAEFtB,SAAS,CAACuB,SAAS,EAAE;IAErB,MAAMC,GAAG,GAAGtB,QAAQ,CAACuB,SAAS,CAAC,kCAAkC,CAAC;IAClEC,MAAM,CAACF,GAAG,CAACG,OAAO,CAACC,MAAM,CAAC,CAACC,IAAI,CAAC,KAAK,CAAC;IACtCL,GAAG,CAACM,KAAK,CAACZ,UAAU,CAAC;IAErBQ,MAAM,CAAC1B,SAAS,CAAC+B,SAAS,CAAC,CAACC,OAAO,CAACd,UAAU,CAAC;IAC/CQ,MAAM,CAAC1B,SAAS,CAACiC,iBAAiB,CAAC,CAACD,OAAO,CAACd,UAAU,CAAC;EACzD,CAAC,CAAC;EAEFD,EAAE,CAAC,wBAAwB,EAAE,MAAK;IAChC,MAAMiB,SAAS,GAAG,CAAC;MACjBf,EAAE,EAAE,CAAC;MACLN,QAAQ,EAAE;KACX,CAAC;IAEFb,SAAS,CAACmC,QAAQ,EAAE;IAEpB,MAAMX,GAAG,GAAGtB,QAAQ,CAACuB,SAAS,CAAC,iCAAiC,CAAC;IACjEC,MAAM,CAACF,GAAG,CAACG,OAAO,CAACC,MAAM,CAAC,CAACC,IAAI,CAAC,KAAK,CAAC;IACtCL,GAAG,CAACM,KAAK,CAACI,SAAS,CAAC;IAEpBR,MAAM,CAAC1B,SAAS,CAACoC,KAAK,CAAC,CAACJ,OAAO,CAACE,SAAS,CAAC;EAC5C,CAAC,CAAC;AAEJ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}