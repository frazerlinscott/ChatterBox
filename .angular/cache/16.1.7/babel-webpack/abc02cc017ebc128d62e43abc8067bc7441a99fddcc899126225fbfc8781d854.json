{"ast":null,"code":"import { TestBed } from '@angular/core/testing';\nimport { GroupsComponent } from './groups.component';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { FormsModule } from '@angular/forms';\ndescribe('GroupsComponent', () => {\n  let component;\n  let fixture;\n  let httpMock;\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      declarations: [GroupsComponent],\n      imports: [HttpClientTestingModule, FormsModule]\n    });\n    fixture = TestBed.createComponent(GroupsComponent);\n    component = fixture.componentInstance;\n    httpMock = TestBed.inject(HttpTestingController);\n  });\n  it('should leave group', () => {\n    // Mock the HTTP request\n    spyOn(component.http, 'post').and.returnValue(of({}));\n    // Call the leaveGroup method\n    component.leaveGroup(yourGroupObjectHere);\n    // Expect that the http.post method was called with the correct URL and data\n    expect(component.http.post).toHaveBeenCalledWith(`${BACKEND_URL}/update-groups`, yourGroupObjectHere);\n    // ... Additional expectations for the method's behavior\n    // Ensure that the component has been updated (use change detection)\n    fixture.detectChanges();\n    // ... Additional expectations based on the updated component state\n  });\n  // Add more tests for other methods and behaviors as needed\n  afterEach(() => {\n    httpMock.verify();\n  });\n});\n// import { TestBed, ComponentFixture, async } from '@angular/core/testing';\n// import { GroupsComponent } from './groups.component';\n// import { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\n// import { RouterTestingModule } from '@angular/router/testing';\n// import { FormsModule } from '@angular/forms';\n// import * as $ from 'jquery';\n// const BACKEND_URL = \"http://localhost:3000\";\n// describe('GroupsComponent', () => {\n//     let component: GroupsComponent;\n//     let fixture: ComponentFixture<GroupsComponent>;\n//     let httpMock: HttpTestingController;\n//     beforeEach(async(() => {\n//         // Mock the current user in session storage\n//         const mockUser = {\n//             username: 'user1',\n//             role: 3 \n//         };\n//         sessionStorage.setItem('current.user', JSON.stringify(mockUser));\n//         TestBed.configureTestingModule({\n//             imports: [\n//                 HttpClientTestingModule,\n//                 RouterTestingModule,\n//                 FormsModule \n//             ],\n//             declarations: [GroupsComponent]\n//         }).compileComponents();\n//         fixture = TestBed.createComponent(GroupsComponent);\n//         component = fixture.componentInstance;\n//         httpMock = TestBed.inject(HttpTestingController);\n//         fixture.detectChanges();\n//     }));\n//     afterEach(() => {\n//         httpMock.verify(); // Ensure that no requests are outstanding\n//     });\n//     it('should make an HTTP POST request when the requestButton is clicked', () => {\n//         const mockGroup = {\n//             groupID: 1, // Replace with an appropriate group ID\n//             userRequests: [] as string[] \n//             // Other properties of the mock group as needed\n//         };\n//         component.loggedInUser = { username: 'user1' };\n//         component.requestButton(mockGroup);\n//         const req = httpMock.expectOne(`${BACKEND_URL}/update-groups`); // Assuming BACKEND_URL is imported\n//         expect(req.request.method).toBe('POST');\n//         expect(req.request.body).toEqual(mockGroup); // Ensure that the request body matches the group object\n//         req.flush({}); // Mock a successful response\n//         // Check that the user request was updated\n//         expect(mockGroup.userRequests).toContain('user1');\n//         // Verify that the button is disabled after the request\n//         expect(component.buttonDisabledStates[mockGroup.groupID]).toBe(true);\n//     });\n// });","map":{"version":3,"names":["TestBed","GroupsComponent","HttpClientTestingModule","HttpTestingController","FormsModule","describe","component","fixture","httpMock","beforeEach","configureTestingModule","declarations","imports","createComponent","componentInstance","inject","it","spyOn","http","and","returnValue","of","leaveGroup","yourGroupObjectHere","expect","post","toHaveBeenCalledWith","BACKEND_URL","detectChanges","afterEach","verify"],"sources":["/Users/frazerlinscott/Desktop/Software Frameworks/Assignments/Assignment1_SoftwareFrames_s2930588/src/app/groups/groups.component.spec.ts"],"sourcesContent":["import { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { GroupsComponent } from './groups.component';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { FormsModule } from '@angular/forms';\n\ndescribe('GroupsComponent', () => {\n  let component: GroupsComponent;\n  let fixture: ComponentFixture<GroupsComponent>;\n  let httpMock: HttpTestingController;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      declarations: [GroupsComponent],\n      imports: [HttpClientTestingModule, FormsModule],\n    });\n\n    fixture = TestBed.createComponent(GroupsComponent);\n    component = fixture.componentInstance;\n    httpMock = TestBed.inject(HttpTestingController);\n  });\n\n  it('should leave group', () => {\n    // Mock the HTTP request\n    spyOn(component.http, 'post').and.returnValue(of({}));\n\n    // Call the leaveGroup method\n    component.leaveGroup(yourGroupObjectHere);\n\n    // Expect that the http.post method was called with the correct URL and data\n    expect(component.http.post).toHaveBeenCalledWith(`${BACKEND_URL}/update-groups`, yourGroupObjectHere);\n\n    // ... Additional expectations for the method's behavior\n\n    // Ensure that the component has been updated (use change detection)\n    fixture.detectChanges();\n\n    // ... Additional expectations based on the updated component state\n  });\n\n  // Add more tests for other methods and behaviors as needed\n\n  afterEach(() => {\n    httpMock.verify();\n  });\n});\n\n\n// import { TestBed, ComponentFixture, async } from '@angular/core/testing';\n// import { GroupsComponent } from './groups.component';\n// import { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\n// import { RouterTestingModule } from '@angular/router/testing';\n// import { FormsModule } from '@angular/forms';\n// import * as $ from 'jquery';\n\n// const BACKEND_URL = \"http://localhost:3000\";\n\n// describe('GroupsComponent', () => {\n//     let component: GroupsComponent;\n//     let fixture: ComponentFixture<GroupsComponent>;\n//     let httpMock: HttpTestingController;\n\n//     beforeEach(async(() => {\n//         // Mock the current user in session storage\n//         const mockUser = {\n//             username: 'user1',\n//             role: 3 \n//         };\n\n//         sessionStorage.setItem('current.user', JSON.stringify(mockUser));\n\n//         TestBed.configureTestingModule({\n//             imports: [\n//                 HttpClientTestingModule,\n//                 RouterTestingModule,\n//                 FormsModule \n//             ],\n//             declarations: [GroupsComponent]\n//         }).compileComponents();\n\n//         fixture = TestBed.createComponent(GroupsComponent);\n//         component = fixture.componentInstance;\n//         httpMock = TestBed.inject(HttpTestingController);\n//         fixture.detectChanges();\n//     }));\n\n//     afterEach(() => {\n//         httpMock.verify(); // Ensure that no requests are outstanding\n//     });\n\n//     it('should make an HTTP POST request when the requestButton is clicked', () => {\n//         const mockGroup = {\n//             groupID: 1, // Replace with an appropriate group ID\n//             userRequests: [] as string[] \n//             // Other properties of the mock group as needed\n//         };\n  \n//         component.loggedInUser = { username: 'user1' };\n  \n//         component.requestButton(mockGroup);\n  \n//         const req = httpMock.expectOne(`${BACKEND_URL}/update-groups`); // Assuming BACKEND_URL is imported\n//         expect(req.request.method).toBe('POST');\n//         expect(req.request.body).toEqual(mockGroup); // Ensure that the request body matches the group object\n  \n//         req.flush({}); // Mock a successful response\n  \n//         // Check that the user request was updated\n//         expect(mockGroup.userRequests).toContain('user1');\n  \n//         // Verify that the button is disabled after the request\n//         expect(component.buttonDisabledStates[mockGroup.groupID]).toBe(true);\n//     });\n// });\n"],"mappings":"AAAA,SAA2BA,OAAO,QAAQ,uBAAuB;AACjE,SAASC,eAAe,QAAQ,oBAAoB;AACpD,SAASC,uBAAuB,EAAEC,qBAAqB,QAAQ,8BAA8B;AAC7F,SAASC,WAAW,QAAQ,gBAAgB;AAE5CC,QAAQ,CAAC,iBAAiB,EAAE,MAAK;EAC/B,IAAIC,SAA0B;EAC9B,IAAIC,OAA0C;EAC9C,IAAIC,QAA+B;EAEnCC,UAAU,CAAC,MAAK;IACdT,OAAO,CAACU,sBAAsB,CAAC;MAC7BC,YAAY,EAAE,CAACV,eAAe,CAAC;MAC/BW,OAAO,EAAE,CAACV,uBAAuB,EAAEE,WAAW;KAC/C,CAAC;IAEFG,OAAO,GAAGP,OAAO,CAACa,eAAe,CAACZ,eAAe,CAAC;IAClDK,SAAS,GAAGC,OAAO,CAACO,iBAAiB;IACrCN,QAAQ,GAAGR,OAAO,CAACe,MAAM,CAACZ,qBAAqB,CAAC;EAClD,CAAC,CAAC;EAEFa,EAAE,CAAC,oBAAoB,EAAE,MAAK;IAC5B;IACAC,KAAK,CAACX,SAAS,CAACY,IAAI,EAAE,MAAM,CAAC,CAACC,GAAG,CAACC,WAAW,CAACC,EAAE,CAAC,EAAE,CAAC,CAAC;IAErD;IACAf,SAAS,CAACgB,UAAU,CAACC,mBAAmB,CAAC;IAEzC;IACAC,MAAM,CAAClB,SAAS,CAACY,IAAI,CAACO,IAAI,CAAC,CAACC,oBAAoB,CAAC,GAAGC,WAAW,gBAAgB,EAAEJ,mBAAmB,CAAC;IAErG;IAEA;IACAhB,OAAO,CAACqB,aAAa,EAAE;IAEvB;EACF,CAAC,CAAC;EAEF;EAEAC,SAAS,CAAC,MAAK;IACbrB,QAAQ,CAACsB,MAAM,EAAE;EACnB,CAAC,CAAC;AACJ,CAAC,CAAC;AAGF;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}