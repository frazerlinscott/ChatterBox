{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { HttpHeaders } from '@angular/common/http';\nconst BACKEND_URL = \"http://localhost:3000\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\nexport let ProfileComponent = class ProfileComponent {\n  constructor(router, http) {\n    this.router = router;\n    this.http = http;\n    this.user = {};\n    this.allUsernames = [];\n    this.isUniqueUsername = true;\n    this.isUniqueEmail = true;\n  }\n  ngOnInit() {\n    const storedUserData = sessionStorage.getItem('current.user');\n    this.http.get(BACKEND_URL + \"/usernames\").subscribe(usernames => {\n      this.allUsernames = usernames;\n      console.log(this.allUsernames);\n    });\n    if (storedUserData) {\n      const retrievedUser = JSON.parse(storedUserData);\n      console.log(retrievedUser);\n      this.user.username = retrievedUser.username;\n      this.user.userbirthdate = retrievedUser.birthdate;\n      this.user.email = retrievedUser.email;\n    }\n  }\n  onUsernameInput() {\n    // Check if username is unique while the user is typing\n    this.isUniqueUsername = !this.allUsernames.includes(this.user.username);\n    console.log(this.isUniqueUsername);\n  }\n  onSubmit() {\n    const storedUserData = sessionStorage.getItem('current.user');\n    let originalUsername;\n    if (storedUserData) {\n      let retrievedUser = JSON.parse(storedUserData);\n      originalUsername = retrievedUser.username;\n      retrievedUser.username = this.user.username;\n      retrievedUser.birthdate = this.user.userbirthdate;\n      retrievedUser.email = this.user.email;\n      // Update session storage with the new user data\n      sessionStorage.setItem('current.user', JSON.stringify(retrievedUser));\n    }\n    const newDetails = {\n      originalUsername: originalUsername,\n      updatedDetails: this.user // Send updated user details\n    };\n\n    console.log(newDetails);\n    this.http.post(BACKEND_URL + \"/update-user\", newDetails).subscribe(response => {\n      console.log('User details updated on the server.', response);\n      alert('Profile updated!');\n      this.isUniqueEmail = false;\n    }, error => {\n      console.error('There was an error updating the user details on the server.', error);\n      alert('Error updating profile. Please try again.');\n      this.isUniqueEmail = false;\n    });\n    alert('Profile updated!');\n  }\n  closeProfile() {\n    this.router.navigateByUrl('/account'); // Assuming '/account' is your account page route\n  }\n};\n\nProfileComponent = __decorate([Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.css']\n})], ProfileComponent);","map":{"version":3,"names":["Component","HttpHeaders","BACKEND_URL","httpOptions","headers","ProfileComponent","constructor","router","http","user","allUsernames","isUniqueUsername","isUniqueEmail","ngOnInit","storedUserData","sessionStorage","getItem","get","subscribe","usernames","console","log","retrievedUser","JSON","parse","username","userbirthdate","birthdate","email","onUsernameInput","includes","onSubmit","originalUsername","setItem","stringify","newDetails","updatedDetails","post","response","alert","error","closeProfile","navigateByUrl","__decorate","selector","templateUrl","styleUrls"],"sources":["/Users/frazerlinscott/Desktop/Software Frameworks/Assignments/Assignment1_SoftwareFrames_s2930588/src/app/profile/profile.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { User } from 'server/routes/userModel';\n\nconst BACKEND_URL = \"http://localhost:3000\";\nconst httpOptions = {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n};\n\n\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.css']\n})\nexport class ProfileComponent implements OnInit {\n  user: any = {};\n  allUsernames: string[] = [];\n  isUniqueUsername: boolean = true;\n  isUniqueEmail:boolean = true;\n  \n  constructor(private router: Router, private http: HttpClient) { }\n\n  ngOnInit() {\n\n    const storedUserData = sessionStorage.getItem('current.user');\n\n    this.http.get<string[]>(BACKEND_URL + \"/usernames\").subscribe(usernames => {\n      this.allUsernames = usernames;\n      console.log(this.allUsernames);\n    });\n\n\n    if (storedUserData) {\n        const retrievedUser = JSON.parse(storedUserData);\n\n        console.log(retrievedUser)\n\n        this.user.username = retrievedUser.username;\n        this.user.userbirthdate = retrievedUser.birthdate\n        this.user.email = retrievedUser.email\n\n      }\n}\n\n  onUsernameInput() {\n  // Check if username is unique while the user is typing\n    this.isUniqueUsername = !this.allUsernames.includes(this.user.username);\n    console.log(this.isUniqueUsername)\n  }\n\n  onSubmit() {\n\n    const storedUserData = sessionStorage.getItem('current.user');\n    let originalUsername;\n\n    if (storedUserData) {\n        let retrievedUser = JSON.parse(storedUserData);\n        originalUsername = retrievedUser.username;\n\n\n        retrievedUser.username = this.user.username;\n        retrievedUser.birthdate = this.user.userbirthdate;\n        retrievedUser.email = this.user.email;\n\n        // Update session storage with the new user data\n        sessionStorage.setItem('current.user', JSON.stringify(retrievedUser));\n    }\n\n    const newDetails = {\n      originalUsername: originalUsername,  // Send original username\n      updatedDetails: this.user  // Send updated user details\n  };\n\n  console.log(newDetails);\n\n    this.http.post(BACKEND_URL+\"/update-user\", newDetails).subscribe(\n      response => {\n          console.log('User details updated on the server.', response);\n          alert('Profile updated!');\n          this.isUniqueEmail=false\n      },\n      error => {\n          console.error('There was an error updating the user details on the server.', error);\n          alert('Error updating profile. Please try again.');\n          this.isUniqueEmail=false\n      }\n  )\n    alert('Profile updated!');\n  }\n\n  closeProfile() {\n    this.router.navigateByUrl('/account'); // Assuming '/account' is your account page route\n  }\n\n  \n\n  \n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}