{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nfunction ChannelsComponent_li_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementStart(2, \"input\", 1);\n    i0.ɵɵlistener(\"ngModelChange\", function ChannelsComponent_li_1_Template_input_ngModelChange_2_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const channel_r1 = restoredCtx.$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.currentGroupObject.channels[channel_r1] = $event);\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const channel_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", channel_r1, \": \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.currentGroupObject.channels[channel_r1]);\n  }\n}\nexport class ChannelsComponent {\n  constructor(route) {\n    this.route = route;\n  }\n  ngOnInit() {\n    this.route.queryParams.subscribe(params => {\n      let currentGroupString = params['yourKey'];\n      // Check if the data is stringified object\n      try {\n        this.currentGroupObject = JSON.parse(currentGroupString);\n        console.log(this.currentGroupObject);\n      } catch (e) {\n        console.error('Error parsing the object', e);\n      }\n      this.getchannelsKeys();\n    });\n  }\n  getchannelsKeys() {\n    return Object.keys(this.currentGroupObject.channels);\n  }\n}\nChannelsComponent.ɵfac = function ChannelsComponent_Factory(t) {\n  return new (t || ChannelsComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute));\n};\nChannelsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ChannelsComponent,\n  selectors: [[\"app-channels\"]],\n  decls: 2,\n  vars: 1,\n  consts: [[4, \"ngFor\", \"ngForOf\"], [3, \"ngModel\", \"ngModelChange\"]],\n  template: function ChannelsComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ul\");\n      i0.ɵɵtemplate(1, ChannelsComponent_li_1_Template, 3, 2, \"li\", 0);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.currentGroupObject);\n    }\n  },\n  dependencies: [i2.NgForOf, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgModel],\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["i0","ɵɵelementStart","ɵɵtext","ɵɵlistener","ChannelsComponent_li_1_Template_input_ngModelChange_2_listener","$event","restoredCtx","ɵɵrestoreView","_r3","channel_r1","$implicit","ctx_r2","ɵɵnextContext","ɵɵresetView","currentGroupObject","channels","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate1","ɵɵproperty","ctx_r0","ChannelsComponent","constructor","route","ngOnInit","queryParams","subscribe","params","currentGroupString","JSON","parse","console","log","e","error","getchannelsKeys","Object","keys","ɵɵdirectiveInject","i1","ActivatedRoute","selectors","decls","vars","consts","template","ChannelsComponent_Template","rf","ctx","ɵɵtemplate","ChannelsComponent_li_1_Template"],"sources":["/Users/frazerlinscott/Desktop/Software Frameworks/Assignments/Assignment1_SoftwareFrames_s2930588/src/app/channels/channels.component.ts","/Users/frazerlinscott/Desktop/Software Frameworks/Assignments/Assignment1_SoftwareFrames_s2930588/src/app/channels/channels.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n@Component({\n  selector: 'app-channels',\n  templateUrl: './channels.component.html',\n  styleUrls: ['./channels.component.css']\n})\nexport class ChannelsComponent implements OnInit {\n\n  currentGroupObject: any;\n  currentChannels: any;\n\n  constructor(private route: ActivatedRoute) { \n    \n}\n\nngOnInit(): void {\n\n  this.route.queryParams.subscribe(params => {\n    let currentGroupString = params['yourKey'];\n    \n    // Check if the data is stringified object\n    try {\n        this.currentGroupObject = JSON.parse(currentGroupString);\n        console.log(this.currentGroupObject);\n    } catch (e) {\n        console.error('Error parsing the object', e);\n    }\n\n    this.getchannelsKeys()\n\n });\n}\n\ngetchannelsKeys() {\n  return Object.keys(this.currentGroupObject.channels);\n}\n\n}\n","<ul>\n    <li *ngFor=\"let channel of currentGroupObject\">\n        {{channel}}: <input [(ngModel)]=\"currentGroupObject.channels[channel]\" />\n    </li>\n</ul>"],"mappings":";;;;;;;ICCIA,EAAA,CAAAC,cAAA,SAA+C;IAC3CD,EAAA,CAAAE,MAAA,GAAa;IAAAF,EAAA,CAAAC,cAAA,eAA4D;IAArDD,EAAA,CAAAG,UAAA,2BAAAC,+DAAAC,MAAA;MAAA,MAAAC,WAAA,GAAAN,EAAA,CAAAO,aAAA,CAAAC,GAAA;MAAA,MAAAC,UAAA,GAAAH,WAAA,CAAAI,SAAA;MAAA,MAAAC,MAAA,GAAAX,EAAA,CAAAY,aAAA;MAAA,OAAAZ,EAAA,CAAAa,WAAA,CAAAF,MAAA,CAAAG,kBAAA,CAAAC,QAAA,CAAAN,UAAA,IAAAJ,MAAA;IAAA,EAAkD;IAAzDL,EAAA,CAAAgB,YAAA,EAA4D;;;;;IAAzEhB,EAAA,CAAAiB,SAAA,GAAa;IAAbjB,EAAA,CAAAkB,kBAAA,MAAAT,UAAA,OAAa;IAAOT,EAAA,CAAAiB,SAAA,GAAkD;IAAlDjB,EAAA,CAAAmB,UAAA,YAAAC,MAAA,CAAAN,kBAAA,CAAAC,QAAA,CAAAN,UAAA,EAAkD;;;ADM9E,OAAM,MAAOY,iBAAiB;EAK5BC,YAAoBC,KAAqB;IAArB,KAAAA,KAAK,GAALA,KAAK;EAE3B;EAEAC,QAAQA,CAAA;IAEN,IAAI,CAACD,KAAK,CAACE,WAAW,CAACC,SAAS,CAACC,MAAM,IAAG;MACxC,IAAIC,kBAAkB,GAAGD,MAAM,CAAC,SAAS,CAAC;MAE1C;MACA,IAAI;QACA,IAAI,CAACb,kBAAkB,GAAGe,IAAI,CAACC,KAAK,CAACF,kBAAkB,CAAC;QACxDG,OAAO,CAACC,GAAG,CAAC,IAAI,CAAClB,kBAAkB,CAAC;OACvC,CAAC,OAAOmB,CAAC,EAAE;QACRF,OAAO,CAACG,KAAK,CAAC,0BAA0B,EAAED,CAAC,CAAC;;MAGhD,IAAI,CAACE,eAAe,EAAE;IAEzB,CAAC,CAAC;EACH;EAEAA,eAAeA,CAAA;IACb,OAAOC,MAAM,CAACC,IAAI,CAAC,IAAI,CAACvB,kBAAkB,CAACC,QAAQ,CAAC;EACtD;;AA7BaM,iBAAiB,C;mBAAjBA,iBAAiB,EAAArB,EAAA,CAAAsC,iBAAA,CAAAC,EAAA,CAAAC,cAAA;AAAA;AAAjBnB,iBAAiB,C;QAAjBA,iBAAiB;EAAAoB,SAAA;EAAAC,KAAA;EAAAC,IAAA;EAAAC,MAAA;EAAAC,QAAA,WAAAC,2BAAAC,EAAA,EAAAC,GAAA;IAAA,IAAAD,EAAA;MCR9B/C,EAAA,CAAAC,cAAA,SAAI;MACAD,EAAA,CAAAiD,UAAA,IAAAC,+BAAA,gBAEK;MACTlD,EAAA,CAAAgB,YAAA,EAAK;;;MAHuBhB,EAAA,CAAAiB,SAAA,GAAqB;MAArBjB,EAAA,CAAAmB,UAAA,YAAA6B,GAAA,CAAAlC,kBAAA,CAAqB"},"metadata":{},"sourceType":"module","externalDependencies":[]}