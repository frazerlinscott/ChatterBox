{"ast":null,"code":"import { Observable } from 'rxjs';\nimport io from \"socket.io-client\";\nimport * as i0 from \"@angular/core\";\nconst SERVER_URL = 'http://localhost:3000';\nexport class SocketService {\n  constructor() {}\n  initSocket() {\n    if (!this.socket) {\n      this.socket = io(SERVER_URL);\n    }\n    return () => {\n      this.socket.disconnect();\n    };\n  }\n  join(channel) {\n    this.socket.emit('join', channel);\n  }\n  //   send(message: string, channel: string): void {\n  //     //console.log('send method called'); // Add this line\n  //     const storedUser = window.sessionStorage.getItem('current.user');\n  //     if (storedUser) {\n  //         let userObject = JSON.parse(storedUser);\n  //         let username = userObject.username;\n  //         const timestamp = new Date();\n  //         const dataToSend = { message, channel, username, timestamp };\n  //         this.socket.emit('message', dataToSend);\n  //     }\n  // }\n  send(message, channel, groupName) {\n    const storedUser = window.sessionStorage.getItem('current.user');\n    if (storedUser) {\n      let userObject = JSON.parse(storedUser);\n      let username = userObject.username;\n      const timestamp = new Date();\n      const dataToSend = {\n        message,\n        channel,\n        username,\n        timestamp,\n        groupName\n      };\n      this.socket.emit('message', dataToSend);\n    }\n  }\n  isSocketInitialized() {\n    return this.socket ? true : false;\n  }\n  getMessage() {\n    return new Observable(observer => {\n      this.socket.on('message', data => {\n        observer.next(data);\n      });\n    });\n  }\n}\nSocketService.ɵfac = function SocketService_Factory(t) {\n  return new (t || SocketService)();\n};\nSocketService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: SocketService,\n  factory: SocketService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["Observable","io","SERVER_URL","SocketService","constructor","initSocket","socket","disconnect","join","channel","emit","send","message","groupName","storedUser","window","sessionStorage","getItem","userObject","JSON","parse","username","timestamp","Date","dataToSend","isSocketInitialized","getMessage","observer","on","data","next","factory","ɵfac","providedIn"],"sources":["/Users/frazerlinscott/Desktop/Software Frameworks/Assignments/Assignment1_SoftwareFrames_s2930588/src/app/service/socket.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {Observable} from 'rxjs';\nimport io from \"socket.io-client\";\n\n\nconst SERVER_URL = 'http://localhost:3000'\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class SocketService {\n\n  socket:any;\n  username: any; \n\n  constructor() { }\n\n  initSocket(){\n    if (!this.socket) {\n        this.socket = io(SERVER_URL);\n    }\n    return () => { this.socket.disconnect(); }\n}\n\n  join(channel: string): void {\n    this.socket.emit('join', channel);\n  }\n\n//   send(message: string, channel: string): void {\n//     //console.log('send method called'); // Add this line\n//     const storedUser = window.sessionStorage.getItem('current.user');\n//     if (storedUser) {\n//         let userObject = JSON.parse(storedUser);\n//         let username = userObject.username;\n//         const timestamp = new Date();\n//         const dataToSend = { message, channel, username, timestamp };\n//         this.socket.emit('message', dataToSend);\n//     }\n// }\n\nsend(message: string, channel: string, groupName: string): void {\n  const storedUser = window.sessionStorage.getItem('current.user');\n  if (storedUser) {\n    let userObject = JSON.parse(storedUser);\n    let username = userObject.username;\n    const timestamp = new Date();\n    const dataToSend = { message, channel, username, timestamp, groupName };\n    this.socket.emit('message', dataToSend);\n  }\n}\n\nisSocketInitialized(): boolean {\n  return this.socket ? true : false;\n}\n\n\ngetMessage(): Observable<any> {\n  return new Observable<any>(observer => {\n      this.socket.on('message', (data: any) => {\n          observer.next(data);\n      });\n  });\n}\n}\n"],"mappings":"AACA,SAAQA,UAAU,QAAO,MAAM;AAC/B,OAAOC,EAAE,MAAM,kBAAkB;;AAGjC,MAAMC,UAAU,GAAG,uBAAuB;AAM1C,OAAM,MAAOC,aAAa;EAKxBC,YAAA,GAAgB;EAEhBC,UAAUA,CAAA;IACR,IAAI,CAAC,IAAI,CAACC,MAAM,EAAE;MACd,IAAI,CAACA,MAAM,GAAGL,EAAE,CAACC,UAAU,CAAC;;IAEhC,OAAO,MAAK;MAAG,IAAI,CAACI,MAAM,CAACC,UAAU,EAAE;IAAE,CAAC;EAC9C;EAEEC,IAAIA,CAACC,OAAe;IAClB,IAAI,CAACH,MAAM,CAACI,IAAI,CAAC,MAAM,EAAED,OAAO,CAAC;EACnC;EAEF;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEAE,IAAIA,CAACC,OAAe,EAAEH,OAAe,EAAEI,SAAiB;IACtD,MAAMC,UAAU,GAAGC,MAAM,CAACC,cAAc,CAACC,OAAO,CAAC,cAAc,CAAC;IAChE,IAAIH,UAAU,EAAE;MACd,IAAII,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACN,UAAU,CAAC;MACvC,IAAIO,QAAQ,GAAGH,UAAU,CAACG,QAAQ;MAClC,MAAMC,SAAS,GAAG,IAAIC,IAAI,EAAE;MAC5B,MAAMC,UAAU,GAAG;QAAEZ,OAAO;QAAEH,OAAO;QAAEY,QAAQ;QAAEC,SAAS;QAAET;MAAS,CAAE;MACvE,IAAI,CAACP,MAAM,CAACI,IAAI,CAAC,SAAS,EAAEc,UAAU,CAAC;;EAE3C;EAEAC,mBAAmBA,CAAA;IACjB,OAAO,IAAI,CAACnB,MAAM,GAAG,IAAI,GAAG,KAAK;EACnC;EAGAoB,UAAUA,CAAA;IACR,OAAO,IAAI1B,UAAU,CAAM2B,QAAQ,IAAG;MAClC,IAAI,CAACrB,MAAM,CAACsB,EAAE,CAAC,SAAS,EAAGC,IAAS,IAAI;QACpCF,QAAQ,CAACG,IAAI,CAACD,IAAI,CAAC;MACvB,CAAC,CAAC;IACN,CAAC,CAAC;EACJ;;AApDa1B,aAAa,C;mBAAbA,aAAa;AAAA;AAAbA,aAAa,C;SAAbA,aAAa;EAAA4B,OAAA,EAAb5B,aAAa,CAAA6B,IAAA;EAAAC,UAAA,EAHZ;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}