{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { HttpHeaders } from '@angular/common/http';\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\nconst BACKEND_URL = \"http://localhost:3000\";\nexport let ChannelsComponent = class ChannelsComponent {\n  constructor(http, route, router) {\n    this.http = http;\n    this.route = route;\n    this.router = router;\n    this.isAdmin = false;\n  }\n  ngOnInit() {\n    const storedUser = window.sessionStorage.getItem('current.user');\n    if (storedUser) {\n      this.loggedInUser = JSON.parse(storedUser);\n      this.profilePicPath = BACKEND_URL + \"/\" + this.loggedInUser.profilePic;\n    }\n    if (this.loggedInUser.role === 3) {\n      this.isAdmin = true;\n      console.log(this.isAdmin);\n    }\n    console.log(this.loggedInUser.role);\n    this.route.queryParams.subscribe(params => {\n      let currentGroupString = params['yourKey'];\n      // Check if the data is stringified object\n      try {\n        this.passedGroupObject = JSON.parse(currentGroupString);\n        console.log(this.passedGroupObject);\n        this.currentGroupString = this.passedGroupObject.groupName;\n      } catch (e) {\n        console.error('Error parsing the object', e);\n      }\n      this.getGroups();\n      this.getUsers();\n    });\n  }\n  // getchannelsKeys() {\n  //   this.currentChannelskeys = Object.keys(this.currentGroupObject.channels);\n  // }\n  addUserToChannel(targetChannel) {\n    this.getGroups();\n    console.log(targetChannel);\n    console.log(this.loggedInUser.username);\n    // Loop over each channel in this.currentGroup.channels\n    for (let channel in this.currentGroup.channels) {\n      // If the channel name matches the target and the user is not in the channel array\n      if (channel === targetChannel && !this.currentGroup.channels[channel].includes(this.loggedInUser.username)) {\n        this.currentGroup.channels[channel].push(this.loggedInUser.username);\n        console.log(`Added ${this.loggedInUser.username} to ${channel}`);\n        break; // Exit the loop as we've found and processed the target channel\n      }\n    }\n\n    this.http.post(BACKEND_URL + \"/update-groups\", this.currentGroup).subscribe(response => {\n      console.log('User details updated on the server.', response);\n      //refesh User list \n      this.getGroups();\n    }, error => {\n      console.error('There was an error updating the user details on the server.', error);\n      alert('Error updating profile. Please try again.');\n    });\n  }\n  removeUserFromChannel(targetChannel) {\n    // Fetch the groups\n    this.getGroups();\n    console.log(targetChannel);\n    console.log(this.loggedInUser.username);\n    // Loop over each channel in this.currentGroup.channels\n    for (let channel in this.currentGroup.channels) {\n      // If the channel name matches the target and the user is in the channel array\n      if (channel === targetChannel && this.currentGroup.channels[channel].includes(this.loggedInUser.username)) {\n        const userIndex = this.currentGroup.channels[channel].indexOf(this.loggedInUser.username);\n        if (userIndex > -1) {\n          this.currentGroup.channels[channel].splice(userIndex, 1); // Remove the user from the channel\n          console.log(`Removed ${this.loggedInUser.username} from ${channel}`);\n          break; // Exit the loop as we've found and processed the target channel\n        }\n      }\n    }\n    // Update the groups on the server\n    this.http.post(BACKEND_URL + \"/update-groups\", this.currentGroup).subscribe(response => {\n      console.log('User details updated on the server.', response);\n      // Refresh the User list \n      this.getGroups();\n    }, error => {\n      console.error('There was an error updating the user details on the server.', error);\n      alert('Error updating profile. Please try again.');\n    });\n  }\n  addChannel(buttonType) {\n    if (buttonType == 'button') {\n      this.newChannelName = '';\n      $('#addChannelModal').modal('show');\n    } else {\n      if (this.newChannelName) {\n        this.currentGroup.channels[this.newChannelName] = [];\n      } else {\n        console.error('newChannelName is undefined!');\n      }\n      this.http.post(BACKEND_URL + \"/update-groups\", this.currentGroup).subscribe(response => {\n        console.log(' details updated on the server.', response);\n        this.getGroups();\n      }, error => {\n        console.error('There was an error updating the  details on the server.', error);\n        alert('Error updating profile. Please try again.');\n      });\n      this.closeModal(\"\");\n    }\n  }\n  closeModal(modalType) {\n    $('#addChannelModal').modal('hide');\n    if (modalType === \"editUsers\") {\n      $('#editmemberUsers').modal('hide');\n    }\n  }\n  deleteChannel(targetChannel) {\n    console.log(targetChannel);\n    if (this.currentGroup.channels && this.currentGroup.channels.hasOwnProperty(targetChannel)) {\n      delete this.currentGroup.channels[targetChannel];\n    } else {\n      console.warn('Channel not found in current group.');\n    }\n    console.log(this.currentGroup);\n    this.http.post(BACKEND_URL + \"/update-groups\", this.currentGroup).subscribe(response => {\n      console.log(' details updated on the server.', response);\n      this.getGroups();\n    }, error => {\n      console.error('There was an error updating the  details on the server.', error);\n      alert('Error updating profile. Please try again.');\n    });\n  }\n  membersChannel(channel) {\n    this.getGroups();\n    console.log(channel);\n    console.log(this.usernames);\n    console.log(this.currentGroup);\n    this.currentChannel = channel;\n    let membersOfCurrentChannel = this.currentGroup.channels[channel];\n    // Filtering this.usernames based on the list of members from the current channel\n    this.channelMembers = this.usernames.filter(username => membersOfCurrentChannel.includes(username));\n    console.log(this.channelMembers);\n    console.log(this.channelMembers);\n    $('#editmemberUsers').modal('show');\n  }\n  adminRemoveMember(username) {\n    console.log(this.currentGroup);\n    console.log(username);\n    console.log(this.currentChannel);\n    // Loop over each channel in this.currentGroup.channels\n    for (let channel in this.currentGroup.channels) {\n      // If the channel name matches the target and the user is in the channel array\n      if (channel === this.currentChannel && this.currentGroup.channels[channel].includes(username)) {\n        const userIndex = this.currentGroup.channels[channel].indexOf(username);\n        if (userIndex > -1) {\n          this.currentGroup.channels[channel].splice(userIndex, 1); // Remove the user from the channel\n          break; // Exit the loop as we've found and processed the target channel\n        }\n      }\n    }\n    // Update the groups on the server\n    this.http.post(BACKEND_URL + \"/update-groups\", this.currentGroup).subscribe(response => {\n      console.log('User details updated on the server.', response);\n      // Refresh the User list \n      this.getGroups();\n      this.membersChannel(this.currentChannel);\n    }, error => {\n      console.error('There was an error updating the user details on the server.', error);\n      alert('Error updating profile. Please try again.');\n    });\n    //$('#editmemberUsers').modal('show');\n  }\n\n  onChannelCardClick(channel) {\n    console.log('Channel card clicked', channel);\n    this.router.navigate(['/chat'], {\n      queryParams: {\n        channel: channel,\n        currentGroup: this.currentGroupString\n      }\n    });\n  }\n  getUsers() {\n    this.http.get(BACKEND_URL + \"/all-users\", httpOptions).subscribe(data => {\n      if (data) {\n        this.users = data;\n        //console.log(this.users)\n        this.usernames = this.users.filter(u => u.valid).map(u => u.username);\n      } else {\n        alert(\"no Data Soz\");\n      }\n    }, error => {\n      console.error('There was an error:', error);\n    });\n  }\n  getGroups() {\n    this.http.get(BACKEND_URL + \"/all-groups\", httpOptions).subscribe(data => {\n      if (data) {\n        this.groups = data;\n        const matchedGroup = this.groups.find(group => group.groupID === this.passedGroupObject.groupID);\n        if (matchedGroup) {\n          this.currentGroup = matchedGroup;\n          //console.log(\"Matched\")\n          if (this.currentGroup.groupAdmins.includes(this.loggedInUser.username)) {\n            this.isAdmin = true;\n          } else if (this.loggedInUser.role == 3) {\n            this.isAdmin = true;\n          } else {\n            this.isAdmin = false;\n          }\n          this.myChannels = [];\n          this.toJoinChannels = [];\n          for (let channel in this.currentGroup.channels) {\n            if (this.currentGroup.channels[channel].includes(this.loggedInUser.username)) {\n              // If the loggedInUser is in the channel, add it to myChannels\n              this.myChannels.push(channel);\n            } else {\n              // Otherwise, add it to toJoinChannels\n              this.toJoinChannels.push(channel);\n            }\n          }\n          this.channelsUserCreated;\n          // this.myChannels = \n          // // = Object.keys(this.currentGroup.channels);\n          // this.toJoinChannels=\n          // this.currentGroup.channel\n        } else {\n          console.log(`No group found with groupID: ${this.passedGroupObject.groupID}`);\n        }\n      } else {\n        alert(\"no Data Soz\");\n      }\n    }, error => {\n      console.error('There was an error:', error);\n    });\n  }\n};\nChannelsComponent = __decorate([Component({\n  selector: 'app-channels',\n  templateUrl: './channels.component.html',\n  styleUrls: ['./channels.component.css']\n})], ChannelsComponent);","map":{"version":3,"names":["Component","HttpHeaders","httpOptions","headers","BACKEND_URL","ChannelsComponent","constructor","http","route","router","isAdmin","ngOnInit","storedUser","window","sessionStorage","getItem","loggedInUser","JSON","parse","profilePicPath","profilePic","role","console","log","queryParams","subscribe","params","currentGroupString","passedGroupObject","groupName","e","error","getGroups","getUsers","addUserToChannel","targetChannel","username","channel","currentGroup","channels","includes","push","post","response","alert","removeUserFromChannel","userIndex","indexOf","splice","addChannel","buttonType","newChannelName","$","modal","closeModal","modalType","deleteChannel","hasOwnProperty","warn","membersChannel","usernames","currentChannel","membersOfCurrentChannel","channelMembers","filter","adminRemoveMember","onChannelCardClick","navigate","get","data","users","u","valid","map","groups","matchedGroup","find","group","groupID","groupAdmins","myChannels","toJoinChannels","channelsUserCreated","__decorate","selector","templateUrl","styleUrls"],"sources":["/Users/frazerlinscott/Desktop/Software Frameworks/Assignments/Assignment1_SoftwareFrames_s2930588/src/app/channels/channels.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\nconst httpOptions = {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n};\n\nconst BACKEND_URL = \"http://localhost:3000\";\n\ndeclare var $: any;\n\n@Component({\n  selector: 'app-channels',\n  templateUrl: './channels.component.html',\n  styleUrls: ['./channels.component.css']\n})\nexport class ChannelsComponent implements OnInit {\n\n  passedGroupObject: any;\n\n  myChannels: any;\n  toJoinChannels: any;\n\n  currentGroup: any;\n  currentChannels: any;\n\n\n  joinChannelskeys: any;\n  myChannelskeys: any;\n\n  loggedInUser:any; \n  groups: any;\n\n  newChannelName: any;\n\n  channelsUserCreated:any; \n\n  isAdmin = false\n\n  channelMembers:any;\n  usernames:any;\n  users: any;\n  currentChannel:any;\n  currentGroupString:any;\n  profilePicPath: any;\n\n  constructor(private http: HttpClient, private route: ActivatedRoute, private router: Router) { \n}\n\nngOnInit(): void {\n\n  const storedUser = window.sessionStorage.getItem('current.user');\n  if (storedUser) {\n\n    this.loggedInUser = JSON.parse(storedUser);\n\n    this.profilePicPath=BACKEND_URL + \"/\" + this.loggedInUser.profilePic\n  }\n\n  if (this.loggedInUser.role === 3){\n    this.isAdmin = true;\n    console.log(this.isAdmin)\n  }\n\n  console.log(this.loggedInUser.role)\n\n\n  this.route.queryParams.subscribe(params => {\n    let currentGroupString = params['yourKey'];\n    \n    // Check if the data is stringified object\n    try {\n        this.passedGroupObject = JSON.parse(currentGroupString);\n        console.log(this.passedGroupObject);\n        this.currentGroupString=this.passedGroupObject.groupName\n\n    } catch (e) {\n        console.error('Error parsing the object', e);\n    }\n\n    this.getGroups()\n    this.getUsers()\n\n });\n}\n\n// getchannelsKeys() {\n//   this.currentChannelskeys = Object.keys(this.currentGroupObject.channels);\n// }\n\naddUserToChannel(targetChannel: any) {\n  this.getGroups();\n  console.log(targetChannel);\n  console.log(this.loggedInUser.username);\n\n  // Loop over each channel in this.currentGroup.channels\n  for (let channel in this.currentGroup.channels) {\n      // If the channel name matches the target and the user is not in the channel array\n      if (channel === targetChannel && !this.currentGroup.channels[channel].includes(this.loggedInUser.username)) {\n          this.currentGroup.channels[channel].push(this.loggedInUser.username);\n          console.log(`Added ${this.loggedInUser.username} to ${channel}`);\n          break; // Exit the loop as we've found and processed the target channel\n      }\n  }\n  \n  this.http.post(BACKEND_URL+\"/update-groups\", this.currentGroup).subscribe(\n    response => {\n        console.log('User details updated on the server.', response);\n\n        //refesh User list \n        this.getGroups();\n    },\n    error => {\n        console.error('There was an error updating the user details on the server.', error);\n        alert('Error updating profile. Please try again.');\n    }\n  )}\n\n  removeUserFromChannel(targetChannel: any) {\n    // Fetch the groups\n    this.getGroups();\n    console.log(targetChannel);\n    console.log(this.loggedInUser.username);\n\n    // Loop over each channel in this.currentGroup.channels\n    for (let channel in this.currentGroup.channels) {\n        // If the channel name matches the target and the user is in the channel array\n        if (channel === targetChannel && this.currentGroup.channels[channel].includes(this.loggedInUser.username)) {\n            const userIndex = this.currentGroup.channels[channel].indexOf(this.loggedInUser.username);\n            \n            if (userIndex > -1) {\n                this.currentGroup.channels[channel].splice(userIndex, 1); // Remove the user from the channel\n                console.log(`Removed ${this.loggedInUser.username} from ${channel}`);\n                break; // Exit the loop as we've found and processed the target channel\n            }\n        }\n    }\n\n    \n  \n    // Update the groups on the server\n    this.http.post(BACKEND_URL+\"/update-groups\", this.currentGroup).subscribe(\n        response => {\n            console.log('User details updated on the server.', response);\n\n            // Refresh the User list \n            this.getGroups();\n        },\n        error => {\n            console.error('There was an error updating the user details on the server.', error);\n            alert('Error updating profile. Please try again.');\n        }\n    );\n}\n\naddChannel(buttonType: string | undefined) {\n  \n  if(buttonType == 'button'){\n    this.newChannelName='';\n    $('#addChannelModal').modal('show');\n  }else{\n    if (this.newChannelName) {\n      this.currentGroup.channels[this.newChannelName] = [];\n    } else {\n      console.error('newChannelName is undefined!');\n    }\n  \n    \n  \n  \n    this.http.post(BACKEND_URL+\"/update-groups\", this.currentGroup).subscribe(\n      response => {\n          console.log(' details updated on the server.', response);\n  \n          this.getGroups();\n          \n      },\n      error => {\n          console.error('There was an error updating the  details on the server.', error);\n          alert('Error updating profile. Please try again.');\n      }\n    )\n    this.closeModal(\"\");\n  }\n\n\n\n}\n\ncloseModal(modalType: string | undefined){\n    $('#addChannelModal').modal('hide');\n\n    if(modalType ===\"editUsers\"){\n      $('#editmemberUsers').modal('hide');\n    }\n}\n\ndeleteChannel(targetChannel: any) {\n  console.log(targetChannel);\n\n  if (this.currentGroup.channels && this.currentGroup.channels.hasOwnProperty(targetChannel)) {\n    delete this.currentGroup.channels[targetChannel];\n  } else {\n    console.warn('Channel not found in current group.');\n  }\n  console.log(this.currentGroup);\n\n  this.http.post(BACKEND_URL+\"/update-groups\", this.currentGroup).subscribe(\n    response => {\n        console.log(' details updated on the server.', response);\n\n        this.getGroups();\n        \n    },\n    error => {\n        console.error('There was an error updating the  details on the server.', error);\n        alert('Error updating profile. Please try again.');\n    }\n  )\n}\n\nmembersChannel(channel: any){\n\n  this.getGroups();\n\n  console.log(channel) \n  console.log(this.usernames);\n  console.log(this.currentGroup)\n\n\n  this.currentChannel=channel;\n\n\n\n  let membersOfCurrentChannel = this.currentGroup.channels[channel];\n\n// Filtering this.usernames based on the list of members from the current channel\n    this.channelMembers = this.usernames.filter((username: any) => membersOfCurrentChannel.includes(username));\n\n    console.log(this.channelMembers)\n\n    console.log(this.channelMembers);\n    $('#editmemberUsers').modal('show');\n}\n\nadminRemoveMember(username: any){\n\n\n  console.log(this.currentGroup);\n  console.log(username);\n  console.log(this.currentChannel)\n\n  // Loop over each channel in this.currentGroup.channels\n  for (let channel in this.currentGroup.channels) {\n      // If the channel name matches the target and the user is in the channel array\n      if (channel === this.currentChannel && this.currentGroup.channels[channel].includes(username)) {\n          const userIndex = this.currentGroup.channels[channel].indexOf(username);\n          \n          if (userIndex > -1) {\n              this.currentGroup.channels[channel].splice(userIndex, 1); // Remove the user from the channel\n              break; // Exit the loop as we've found and processed the target channel\n          }\n      }\n  }\n\n  \n\n  // Update the groups on the server\n  this.http.post(BACKEND_URL+\"/update-groups\", this.currentGroup).subscribe(\n      response => {\n          console.log('User details updated on the server.', response);\n\n          // Refresh the User list \n          this.getGroups();\n          this.membersChannel(this.currentChannel)\n      },\n      error => {\n          console.error('There was an error updating the user details on the server.', error);\n          alert('Error updating profile. Please try again.');\n      }\n      \n  );\n  //$('#editmemberUsers').modal('show');\n}\n\nonChannelCardClick(channel: any) {\n  console.log('Channel card clicked', channel);\n  this.router.navigate(['/chat'], { \n    queryParams: { \n      channel: channel,\n      currentGroup: this.currentGroupString \n    } \n  });\n}\n\n\n\ngetUsers(){\n  this.http.get(BACKEND_URL + \"/all-users\", httpOptions)\n  .subscribe(\n      (data: any) => {\n          if (data) {\n            this.users = data\n            //console.log(this.users)\n            this.usernames = this.users.filter((u: { valid: any; }) => u.valid).map((u: { username: any; }) => u.username);\n\n          } else {\n              alert(\"no Data Soz\");\n          }\n      },\n      error => {console.error('There was an error:', error);}\n  );\n}\n\ngetGroups(){\n  this.http.get(BACKEND_URL + \"/all-groups\", httpOptions)\n  .subscribe(\n      (data: any) => {\n          if (data) {\n            this.groups = data\n            const matchedGroup = this.groups.find((group: { groupID: any; }) => group.groupID === this.passedGroupObject.groupID);\n            if (matchedGroup) {\n                this.currentGroup = matchedGroup;\n                //console.log(\"Matched\")\n                if (this.currentGroup.groupAdmins.includes(this.loggedInUser.username)) {\n                  this.isAdmin = true;\n                } else if (this.loggedInUser.role==3){\n                this.isAdmin = true;\n                }else{\n                  this.isAdmin = false;\n                }\n                \n\n\n\n                this.myChannels = [];\n                this.toJoinChannels = [];\n\n                for (let channel in this.currentGroup.channels) {\n                  if (this.currentGroup.channels[channel].includes(this.loggedInUser.username)) {\n                      // If the loggedInUser is in the channel, add it to myChannels\n                      this.myChannels.push(channel);\n                  } else {\n                      // Otherwise, add it to toJoinChannels\n                      this.toJoinChannels.push(channel);\n                  }\n              }\n\n              this.channelsUserCreated\n\n\n                // this.myChannels = \n\n                // // = Object.keys(this.currentGroup.channels);\n                // this.toJoinChannels=\n\n                // this.currentGroup.channel\n\n            } else {\n                console.log(`No group found with groupID: ${this.passedGroupObject.groupID}`);\n            }\n\n\n\n\n\n\n          } else {\n              alert(\"no Data Soz\");\n          }\n      },\n      error => {console.error('There was an error:', error);}\n  );\n}\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}