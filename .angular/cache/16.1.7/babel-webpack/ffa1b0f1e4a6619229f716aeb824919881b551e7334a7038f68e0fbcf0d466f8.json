{"ast":null,"code":"// import { ComponentFixture, TestBed } from '@angular/core/testing';\n// import { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\n// import { FormsModule } from '@angular/forms';\n// import { ChatComponent } from './chat.component';\n// import { UploadService } from '../service/upload.service';\n// import { RouterTestingModule } from '@angular/router/testing'; // Import RouterTestingModule\n// describe('ChatComponent', () => {\n//   let component: ChatComponent;\n//   let fixture: ComponentFixture<ChatComponent>;\n//   let uploadService: UploadService;\n//   let httpMock: HttpTestingController;\n//   beforeEach(() => {\n//     TestBed.configureTestingModule({\n//       declarations: [ChatComponent],\n//       imports: [HttpClientTestingModule, FormsModule, RouterTestingModule], // Add RouterTestingModule here\n//       providers: [\n//         // No need to provide ActivatedRoute\n//       ]\n//     });\n//     fixture = TestBed.createComponent(ChatComponent);\n//     component = fixture.componentInstance;\n//     uploadService = TestBed.inject(UploadService);\n//     httpMock = TestBed.inject(HttpTestingController);\n//     fixture.detectChanges();\n//   });\n//   afterEach(() => {\n//     httpMock.verify();\n//   });\n//   it('should create', () => {\n//     expect(component).toBeTruthy();\n//     // Expect an HTTP request\n//     const req = httpMock.expectOne('http://localhost:3000/messages?groupName=undefined&channelName=undefined');\n//     // Check if the request method is GET (or POST/PUT/DELETE as per your component's logic)\n//     expect(req.request.method).toBe('GET'); // Change 'GET' to the expected method\n//     // Provide a mock response\n//     const mockResponse = {\n//       // Your mock response data\n//     };\n//     req.flush(mockResponse); // Flush the request with the mock response\n//   });\n// });\nimport { TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { FormsModule } from '@angular/forms';\nimport { ChatComponent } from './chat.component';\nimport { RouterTestingModule } from '@angular/router/testing';\ndescribe('ChatComponent', () => {\n  let component;\n  let fixture;\n  let httpMock;\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      declarations: [ChatComponent],\n      imports: [HttpClientTestingModule, FormsModule, RouterTestingModule]\n    });\n    fixture = TestBed.createComponent(ChatComponent);\n    component = fixture.componentInstance;\n    httpMock = TestBed.inject(HttpTestingController);\n    fixture.detectChanges();\n  });\n  afterEach(() => {\n    httpMock.verify();\n  });\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n  it('should fetch previous messages', () => {\n    // Set up test data\n    const groupName = group1 - Super;\n    const channelName = PhotoTest;\n    // Call the fetchPreviousMessages method\n    component.fetchPreviousMessages(groupName, channelName);\n    // Expect an HTTP request with the correct URL\n    const expectedUrl = `http://localhost:3000/messages?groupName=${groupName}&channelName=${channelName}`;\n    const req = httpMock.expectOne(expectedUrl);\n    expect(req.request.method).toBe('GET');\n    // Provide a mock response\n    const mockResponse = [\n      // Your mock message data\n    ];\n    req.flush(mockResponse);\n    // Expect that the messages property is updated with the mock response\n    expect(component.messages).toEqual(mockResponse);\n  });\n});","map":{"version":3,"names":["TestBed","HttpClientTestingModule","HttpTestingController","FormsModule","ChatComponent","RouterTestingModule","describe","component","fixture","httpMock","beforeEach","configureTestingModule","declarations","imports","createComponent","componentInstance","inject","detectChanges","afterEach","verify","it","expect","toBeTruthy","groupName","group1","Super","channelName","PhotoTest","fetchPreviousMessages","expectedUrl","req","expectOne","request","method","toBe","mockResponse","flush","messages","toEqual"],"sources":["/Users/frazerlinscott/Desktop/Software Frameworks/Assignments/Assignment1_SoftwareFrames_s2930588/src/app/chat/chat.component.spec.ts"],"sourcesContent":["// import { ComponentFixture, TestBed } from '@angular/core/testing';\n// import { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\n// import { FormsModule } from '@angular/forms';\n// import { ChatComponent } from './chat.component';\n// import { UploadService } from '../service/upload.service';\n// import { RouterTestingModule } from '@angular/router/testing'; // Import RouterTestingModule\n\n// describe('ChatComponent', () => {\n//   let component: ChatComponent;\n//   let fixture: ComponentFixture<ChatComponent>;\n//   let uploadService: UploadService;\n//   let httpMock: HttpTestingController;\n\n//   beforeEach(() => {\n//     TestBed.configureTestingModule({\n//       declarations: [ChatComponent],\n//       imports: [HttpClientTestingModule, FormsModule, RouterTestingModule], // Add RouterTestingModule here\n//       providers: [\n//         // No need to provide ActivatedRoute\n//       ]\n//     });\n\n//     fixture = TestBed.createComponent(ChatComponent);\n//     component = fixture.componentInstance;\n//     uploadService = TestBed.inject(UploadService);\n//     httpMock = TestBed.inject(HttpTestingController);\n\n//     fixture.detectChanges();\n//   });\n\n//   afterEach(() => {\n//     httpMock.verify();\n//   });\n\n//   it('should create', () => {\n//     expect(component).toBeTruthy();\n    \n//     // Expect an HTTP request\n//     const req = httpMock.expectOne('http://localhost:3000/messages?groupName=undefined&channelName=undefined');\n  \n//     // Check if the request method is GET (or POST/PUT/DELETE as per your component's logic)\n//     expect(req.request.method).toBe('GET'); // Change 'GET' to the expected method\n  \n//     // Provide a mock response\n//     const mockResponse = {\n//       // Your mock response data\n//     };\n//     req.flush(mockResponse); // Flush the request with the mock response\n//   });\n  \n// });\n\n\nimport { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { FormsModule } from '@angular/forms';\nimport { ChatComponent } from './chat.component';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { Message } from 'server/models/messageModel';\n\n\ndescribe('ChatComponent', () => {\n  let component: ChatComponent;\n  let fixture: ComponentFixture<ChatComponent>;\n  let httpMock: HttpTestingController;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      declarations: [ChatComponent],\n      imports: [HttpClientTestingModule, FormsModule, RouterTestingModule],\n    });\n\n    fixture = TestBed.createComponent(ChatComponent);\n    component = fixture.componentInstance;\n    httpMock = TestBed.inject(HttpTestingController);\n\n    fixture.detectChanges();\n  });\n\n  afterEach(() => {\n    httpMock.verify();\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n\n  it('should fetch previous messages', () => {\n    // Set up test data\n    const groupName = group1-Super;\n    const channelName = PhotoTest;\n\n    // Call the fetchPreviousMessages method\n    component.fetchPreviousMessages(groupName, channelName);\n\n    // Expect an HTTP request with the correct URL\n    const expectedUrl = `http://localhost:3000/messages?groupName=${groupName}&channelName=${channelName}`;\n    const req = httpMock.expectOne(expectedUrl);\n    expect(req.request.method).toBe('GET');\n\n    // Provide a mock response\n    const mockResponse: Message[] = [\n      // Your mock message data\n    ];\n    req.flush(mockResponse);\n\n    // Expect that the messages property is updated with the mock response\n    expect(component.messages).toEqual(mockResponse);\n  });\n});\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA,SAA2BA,OAAO,QAAQ,uBAAuB;AACjE,SAASC,uBAAuB,EAAEC,qBAAqB,QAAQ,8BAA8B;AAC7F,SAASC,WAAW,QAAQ,gBAAgB;AAC5C,SAASC,aAAa,QAAQ,kBAAkB;AAChD,SAASC,mBAAmB,QAAQ,yBAAyB;AAI7DC,QAAQ,CAAC,eAAe,EAAE,MAAK;EAC7B,IAAIC,SAAwB;EAC5B,IAAIC,OAAwC;EAC5C,IAAIC,QAA+B;EAEnCC,UAAU,CAAC,MAAK;IACdV,OAAO,CAACW,sBAAsB,CAAC;MAC7BC,YAAY,EAAE,CAACR,aAAa,CAAC;MAC7BS,OAAO,EAAE,CAACZ,uBAAuB,EAAEE,WAAW,EAAEE,mBAAmB;KACpE,CAAC;IAEFG,OAAO,GAAGR,OAAO,CAACc,eAAe,CAACV,aAAa,CAAC;IAChDG,SAAS,GAAGC,OAAO,CAACO,iBAAiB;IACrCN,QAAQ,GAAGT,OAAO,CAACgB,MAAM,CAACd,qBAAqB,CAAC;IAEhDM,OAAO,CAACS,aAAa,EAAE;EACzB,CAAC,CAAC;EAEFC,SAAS,CAAC,MAAK;IACbT,QAAQ,CAACU,MAAM,EAAE;EACnB,CAAC,CAAC;EAEFC,EAAE,CAAC,eAAe,EAAE,MAAK;IACvBC,MAAM,CAACd,SAAS,CAAC,CAACe,UAAU,EAAE;EAChC,CAAC,CAAC;EAEFF,EAAE,CAAC,gCAAgC,EAAE,MAAK;IACxC;IACA,MAAMG,SAAS,GAAGC,MAAM,GAACC,KAAK;IAC9B,MAAMC,WAAW,GAAGC,SAAS;IAE7B;IACApB,SAAS,CAACqB,qBAAqB,CAACL,SAAS,EAAEG,WAAW,CAAC;IAEvD;IACA,MAAMG,WAAW,GAAG,4CAA4CN,SAAS,gBAAgBG,WAAW,EAAE;IACtG,MAAMI,GAAG,GAAGrB,QAAQ,CAACsB,SAAS,CAACF,WAAW,CAAC;IAC3CR,MAAM,CAACS,GAAG,CAACE,OAAO,CAACC,MAAM,CAAC,CAACC,IAAI,CAAC,KAAK,CAAC;IAEtC;IACA,MAAMC,YAAY,GAAc;MAC9B;IAAA,CACD;IACDL,GAAG,CAACM,KAAK,CAACD,YAAY,CAAC;IAEvB;IACAd,MAAM,CAACd,SAAS,CAAC8B,QAAQ,CAAC,CAACC,OAAO,CAACH,YAAY,CAAC;EAClD,CAAC,CAAC;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}