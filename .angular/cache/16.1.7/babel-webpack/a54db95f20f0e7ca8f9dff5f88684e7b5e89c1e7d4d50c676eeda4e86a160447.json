{"ast":null,"code":"// import { ComponentFixture, TestBed } from '@angular/core/testing';\n// import { GroupsComponent } from './groups.component';\n// describe('GroupsComponent', () => {\n//   let component: GroupsComponent;\n//   let fixture: ComponentFixture<GroupsComponent>;\n//   beforeEach(() => {\n//     TestBed.configureTestingModule({\n//       declarations: [GroupsComponent]\n//     });\n//     fixture = TestBed.createComponent(GroupsComponent);\n//     component = fixture.componentInstance;\n//     fixture.detectChanges();\n//   });\n//   it('should create', () => {\n//     expect(component).toBeTruthy();\n//   });\n// });\nimport { TestBed, async } from '@angular/core/testing';\nimport { GroupsComponent } from './groups.component';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { RouterTestingModule } from '@angular/router/testing';\ndescribe('GroupsComponent', () => {\n  let component;\n  let fixture;\n  let httpMock;\n  BACKEND_URL;\n  beforeEach(async(() => {\n    TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule, RouterTestingModule],\n      declarations: [GroupsComponent]\n    }).compileComponents();\n    fixture = TestBed.createComponent(GroupsComponent);\n    component = fixture.componentInstance;\n    httpMock = TestBed.inject(HttpTestingController);\n    fixture.detectChanges();\n  }));\n  it('should remove a user from a group and its channels', () => {\n    const mockGroup = {\n      members: ['user1', 'user2'],\n      channels: {\n        channel1: ['user1', 'user2'],\n        channel2: ['user1']\n      }\n    };\n    component.loggedInUser = {\n      username: 'user1'\n    };\n    component.leaveGroup(mockGroup);\n    const req = httpMock.expectOne(`${component.BACKEND_URL}/update-groups`);\n    expect(req.request.method).toBe('POST');\n    req.flush({}); // mock a successful response\n    expect(mockGroup.members).toEqual(['user2']);\n    expect(mockGroup.channels.channel1).toEqual(['user2']);\n    expect(mockGroup.channels.channel2).toEqual([]);\n  });\n  it('should save a group if it is unique', () => {\n    component.isUniqueGroup = true;\n    component.loggedInUser = {\n      username: 'user1'\n    };\n    component.newGroupName = 'TestGroup';\n    component.groupChannels = ['channel1', 'channel2'];\n    component.newGroupID = '1234';\n    component.saveGroup();\n    const req = httpMock.expectOne(`${component.BACKEND_URL}/update-groups`);\n    expect(req.request.method).toBe('POST');\n    req.flush({}); // mock a successful response\n    expect(component.group.groupName).toEqual('TestGroup');\n    expect(component.group.members).toEqual(['user1']);\n    expect(component.group.channels.channel1).toEqual([]);\n    expect(component.group.channels.channel2).toEqual([]);\n  });\n  it('should not save a group if it is not unique', () => {\n    component.isUniqueGroup = false;\n    component.saveGroup();\n    const reqs = httpMock.match(`${component.BACKEND_URL}/update-groups`);\n    expect(reqs.length).toBe(0); // Expect no HTTP requests to be made\n  });\n\n  afterEach(() => {\n    httpMock.verify(); // Ensure that no requests are outstanding\n  });\n});","map":{"version":3,"names":["TestBed","async","GroupsComponent","HttpClientTestingModule","HttpTestingController","RouterTestingModule","describe","component","fixture","httpMock","BACKEND_URL","beforeEach","configureTestingModule","imports","declarations","compileComponents","createComponent","componentInstance","inject","detectChanges","it","mockGroup","members","channels","channel1","channel2","loggedInUser","username","leaveGroup","req","expectOne","expect","request","method","toBe","flush","toEqual","isUniqueGroup","newGroupName","groupChannels","newGroupID","saveGroup","group","groupName","reqs","match","length","afterEach","verify"],"sources":["/Users/frazerlinscott/Desktop/Software Frameworks/Assignments/Assignment1_SoftwareFrames_s2930588/src/app/groups/groups.component.spec.ts"],"sourcesContent":["// import { ComponentFixture, TestBed } from '@angular/core/testing';\n\n// import { GroupsComponent } from './groups.component';\n\n// describe('GroupsComponent', () => {\n//   let component: GroupsComponent;\n//   let fixture: ComponentFixture<GroupsComponent>;\n\n//   beforeEach(() => {\n//     TestBed.configureTestingModule({\n//       declarations: [GroupsComponent]\n//     });\n//     fixture = TestBed.createComponent(GroupsComponent);\n//     component = fixture.componentInstance;\n//     fixture.detectChanges();\n//   });\n\n//   it('should create', () => {\n//     expect(component).toBeTruthy();\n//   });\n// });\n\n\nimport { TestBed, ComponentFixture, async } from '@angular/core/testing';\nimport { GroupsComponent } from './groups.component';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { RouterTestingModule } from '@angular/router/testing';\n\ndescribe('GroupsComponent', () => {\n    let component: GroupsComponent;\n    let fixture: ComponentFixture<GroupsComponent>;\n    let httpMock: HttpTestingController;\n\n    BACKEND_URL\n\n    beforeEach(async(() => {\n        TestBed.configureTestingModule({\n            imports: [HttpClientTestingModule, RouterTestingModule],\n            declarations: [GroupsComponent]\n        }).compileComponents();\n\n        fixture = TestBed.createComponent(GroupsComponent);\n        component = fixture.componentInstance;\n        httpMock = TestBed.inject(HttpTestingController);\n        fixture.detectChanges();\n    }));\n\n    it('should remove a user from a group and its channels', () => {\n        const mockGroup = {\n            members: ['user1', 'user2'],\n            channels: {\n                channel1: ['user1', 'user2'],\n                channel2: ['user1']\n            }\n        };\n\n        component.loggedInUser = { username: 'user1' };\n\n        component.leaveGroup(mockGroup);\n\n        const req = httpMock.expectOne(`${component.BACKEND_URL}/update-groups`);\n        expect(req.request.method).toBe('POST');\n        req.flush({}); // mock a successful response\n\n        expect(mockGroup.members).toEqual(['user2']);\n        expect(mockGroup.channels.channel1).toEqual(['user2']);\n        expect(mockGroup.channels.channel2).toEqual([]);\n    });\n\n    it('should save a group if it is unique', () => {\n        component.isUniqueGroup = true;\n        component.loggedInUser = { username: 'user1' };\n        component.newGroupName = 'TestGroup';\n        component.groupChannels = ['channel1', 'channel2'];\n        component.newGroupID = '1234';\n        \n        component.saveGroup();\n\n        const req = httpMock.expectOne(`${component.BACKEND_URL}/update-groups`);\n        expect(req.request.method).toBe('POST');\n        req.flush({}); // mock a successful response\n\n        expect(component.group.groupName).toEqual('TestGroup');\n        expect(component.group.members).toEqual(['user1']);\n        expect(component.group.channels.channel1).toEqual([]);\n        expect(component.group.channels.channel2).toEqual([]);\n    });\n\n    it('should not save a group if it is not unique', () => {\n        component.isUniqueGroup = false;\n        component.saveGroup();\n        \n        const reqs = httpMock.match(`${component.BACKEND_URL}/update-groups`);\n        expect(reqs.length).toBe(0); // Expect no HTTP requests to be made\n    });\n\n    afterEach(() => {\n        httpMock.verify(); // Ensure that no requests are outstanding\n    });\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}