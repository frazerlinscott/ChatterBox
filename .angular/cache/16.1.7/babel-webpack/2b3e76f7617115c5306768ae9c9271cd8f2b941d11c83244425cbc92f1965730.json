{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/service/socket.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nconst _c0 = function (a0, a1) {\n  return {\n    \"right\": a0,\n    \"left\": a1\n  };\n};\nfunction ChatComponent_li_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\", 11);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const msg_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(2, _c0, msg_r1.username === ctx_r0.loggedInUser, msg_r1.username !== ctx_r0.loggedInUser));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", msg_r1.content, \" \");\n  }\n}\nexport class ChatComponent {\n  constructor(socketService, router, route) {\n    this.socketService = socketService;\n    this.router = router;\n    this.route = route;\n    this.messagecontent = \"\";\n    this.currentChannel = null;\n    this.messages = [];\n  }\n  ngOnInit() {\n    const storedUser = window.sessionStorage.getItem('current.user');\n    if (storedUser) {\n      this.loggedInUser = JSON.parse(storedUser);\n      console.log(this.loggedInUser.username);\n    }\n    this.route.queryParams.subscribe(params => {\n      this.channel = params['yourKey'];\n      this.initIoConnection();\n      this.socketService.join(this.channel);\n      this.messages = []; // Clear the previous messages when changing the channel.\n    });\n  }\n  // initIoConnection() {\n  //   this.socketService.initSocket();\n  //   this.ioConnection = this.socketService.getMessage().subscribe((data: any) => {\n  //     console.log(data); // log the data to check its structure\n  //     // only add the message to messages array if the channels match\n  //     if (data.channel === this.channel) {\n  //       this.messages.push(data.message);\n  //     }\n  //   });\n  // }\n  initIoConnection() {\n    this.socketService.initSocket();\n    this.ioConnection = this.socketService.getMessage().subscribe(data => {\n      if (data.channel === this.channel) {\n        this.messages.push(data);\n      }\n    });\n  }\n  sendMessage() {\n    if (this.messagecontent) {\n      this.socketService.send(this.messagecontent, this.channel);\n      this.messagecontent = \"\";\n    }\n  }\n}\nChatComponent.ɵfac = function ChatComponent_Factory(t) {\n  return new (t || ChatComponent)(i0.ɵɵdirectiveInject(i1.SocketService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i2.ActivatedRoute));\n};\nChatComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ChatComponent,\n  selectors: [[\"app-chat\"]],\n  decls: 13,\n  vars: 2,\n  consts: [[1, \"container\", \"mt-5\"], [1, \"card\"], [1, \"card-header\"], [1, \"card-body\"], [1, \"list-group\", \"chat-messages\"], [\"class\", \"list-group-item\", 3, \"ngClass\", 4, \"ngFor\", \"ngForOf\"], [1, \"card-footer\"], [1, \"form-inline\"], [1, \"form-group\", \"flex-grow-1\", \"mr-2\"], [\"type\", \"text\", \"name\", \"messagecontent\", \"placeholder\", \"Type a message\", 1, \"form-control\", \"w-100\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"click\"], [1, \"list-group-item\", 3, \"ngClass\"]],\n  template: function ChatComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2);\n      i0.ɵɵtext(3, \" Chat Room \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"div\", 3)(5, \"ul\", 4);\n      i0.ɵɵtemplate(6, ChatComponent_li_6_Template, 2, 5, \"li\", 5);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(7, \"div\", 6)(8, \"form\", 7)(9, \"div\", 8)(10, \"input\", 9);\n      i0.ɵɵlistener(\"ngModelChange\", function ChatComponent_Template_input_ngModelChange_10_listener($event) {\n        return ctx.messagecontent = $event;\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(11, \"button\", 10);\n      i0.ɵɵlistener(\"click\", function ChatComponent_Template_button_click_11_listener() {\n        return ctx.sendMessage();\n      });\n      i0.ɵɵtext(12, \"Send\");\n      i0.ɵɵelementEnd()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngForOf\", ctx.messages);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.messagecontent);\n    }\n  },\n  dependencies: [i3.NgClass, i3.NgForOf, i4.ɵNgNoValidate, i4.DefaultValueAccessor, i4.NgControlStatus, i4.NgControlStatusGroup, i4.NgModel, i4.NgForm],\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵproperty","ɵɵpureFunction2","_c0","msg_r1","username","ctx_r0","loggedInUser","ɵɵadvance","ɵɵtextInterpolate1","content","ChatComponent","constructor","socketService","router","route","messagecontent","currentChannel","messages","ngOnInit","storedUser","window","sessionStorage","getItem","JSON","parse","console","log","queryParams","subscribe","params","channel","initIoConnection","join","initSocket","ioConnection","getMessage","data","push","sendMessage","send","ɵɵdirectiveInject","i1","SocketService","i2","Router","ActivatedRoute","selectors","decls","vars","consts","template","ChatComponent_Template","rf","ctx","ɵɵtemplate","ChatComponent_li_6_Template","ɵɵlistener","ChatComponent_Template_input_ngModelChange_10_listener","$event","ChatComponent_Template_button_click_11_listener"],"sources":["/Users/frazerlinscott/Desktop/Software Frameworks/Assignments/Assignment1_SoftwareFrames_s2930588/src/app/chat/chat.component.ts","/Users/frazerlinscott/Desktop/Software Frameworks/Assignments/Assignment1_SoftwareFrames_s2930588/src/app/chat/chat.component.html"],"sourcesContent":["import { Component, OnInit, } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {SocketService} from 'src/app/service/socket.service';\nimport {FormsModule} from '@angular/forms';\nimport { Message } from 'server/models/messageModel';\n\n@Component({\n  selector: 'app-chat',\n  templateUrl: './chat.component.html',\n  styleUrls: ['./chat.component.css']\n})\n\nexport class ChatComponent implements OnInit {\n\n  messagecontent: string=\"\";\n  //messages: string[] = [];\n  ioConnection:any;\n  channel: any;\n  currentChannel: string | null = null;\n  loggedInUser : any;\n  messages: Message[] = [];\n\n\n\n  constructor (private socketService: SocketService, private router: Router, private route: ActivatedRoute) { }\n\n  ngOnInit(): void {\n\n    const storedUser = window.sessionStorage.getItem('current.user');\n    if (storedUser) {\n\n      this.loggedInUser = JSON.parse(storedUser);\n      console.log(this.loggedInUser.username)\n    }\n    this.route.queryParams.subscribe(params => {\n        this.channel = params['yourKey'];\n        this.initIoConnection();\n        this.socketService.join(this.channel);\n        this.messages = []; // Clear the previous messages when changing the channel.\n    });\n}\n\n\n  // initIoConnection() {\n  //   this.socketService.initSocket();\n  //   this.ioConnection = this.socketService.getMessage().subscribe((data: any) => {\n  //     console.log(data); // log the data to check its structure\n  //     // only add the message to messages array if the channels match\n  //     if (data.channel === this.channel) {\n  //       this.messages.push(data.message);\n  //     }\n  //   });\n  // }\n\n  initIoConnection() {\n    this.socketService.initSocket();\n    this.ioConnection = this.socketService.getMessage().subscribe((data: any) => {\n      if (data.channel === this.channel) {\n        this.messages.push(data as Message);\n      }\n    });\n    \n  }\n\n\n\n    sendMessage() {\n      if (this.messagecontent) {\n          this.socketService.send(this.messagecontent, this.channel);\n          this.messagecontent = \"\";\n      }\n    }\n\n\n}","<div class=\"container mt-5\">\n    <div class=\"card\">\n        <div class=\"card-header\">\n            Chat Room\n        </div>\n        <div class=\"card-body\">\n            <ul class=\"list-group chat-messages\">\n                <!-- Add ngClass directive to apply classes conditionally -->\n                <li class=\"list-group-item\" \n                    *ngFor=\"let msg of messages\"\n                    [ngClass]=\"{'right': msg.username === loggedInUser, 'left': msg.username !== loggedInUser}\">\n                    {{ msg.content }} <!-- Access message from the msg object -->\n                </li>\n            </ul>\n        </div>\n        <div class=\"card-footer\">\n            <form class=\"form-inline\">\n                <div class=\"form-group flex-grow-1 mr-2\">\n                    <input type=\"text\" class=\"form-control w-100\" [(ngModel)]=\"messagecontent\" name=\"messagecontent\" placeholder=\"Type a message\">\n                </div>\n                <button class=\"btn btn-primary\" (click)=\"sendMessage()\" type=\"submit\">Send</button>\n            </form>\n        </div>\n    </div>\n</div>\n"],"mappings":";;;;;;;;;;;;;ICQgBA,EAAA,CAAAC,cAAA,aAEgG;IAC5FD,EAAA,CAAAE,MAAA,GAAkB;IACtBF,EAAA,CAAAG,YAAA,EAAK;;;;;IAFDH,EAAA,CAAAI,UAAA,YAAAJ,EAAA,CAAAK,eAAA,IAAAC,GAAA,EAAAC,MAAA,CAAAC,QAAA,KAAAC,MAAA,CAAAC,YAAA,EAAAH,MAAA,CAAAC,QAAA,KAAAC,MAAA,CAAAC,YAAA,EAA2F;IAC3FV,EAAA,CAAAW,SAAA,GAAkB;IAAlBX,EAAA,CAAAY,kBAAA,MAAAL,MAAA,CAAAM,OAAA,MAAkB;;;ADCtC,OAAM,MAAOC,aAAa;EAYxBC,YAAqBC,aAA4B,EAAUC,MAAc,EAAUC,KAAqB;IAAnF,KAAAF,aAAa,GAAbA,aAAa;IAAyB,KAAAC,MAAM,GAANA,MAAM;IAAkB,KAAAC,KAAK,GAALA,KAAK;IAVxF,KAAAC,cAAc,GAAS,EAAE;IAIzB,KAAAC,cAAc,GAAkB,IAAI;IAEpC,KAAAC,QAAQ,GAAc,EAAE;EAIoF;EAE5GC,QAAQA,CAAA;IAEN,MAAMC,UAAU,GAAGC,MAAM,CAACC,cAAc,CAACC,OAAO,CAAC,cAAc,CAAC;IAChE,IAAIH,UAAU,EAAE;MAEd,IAAI,CAACb,YAAY,GAAGiB,IAAI,CAACC,KAAK,CAACL,UAAU,CAAC;MAC1CM,OAAO,CAACC,GAAG,CAAC,IAAI,CAACpB,YAAY,CAACF,QAAQ,CAAC;;IAEzC,IAAI,CAACU,KAAK,CAACa,WAAW,CAACC,SAAS,CAACC,MAAM,IAAG;MACtC,IAAI,CAACC,OAAO,GAAGD,MAAM,CAAC,SAAS,CAAC;MAChC,IAAI,CAACE,gBAAgB,EAAE;MACvB,IAAI,CAACnB,aAAa,CAACoB,IAAI,CAAC,IAAI,CAACF,OAAO,CAAC;MACrC,IAAI,CAACb,QAAQ,GAAG,EAAE,CAAC,CAAC;IACxB,CAAC,CAAC;EACN;EAGE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEAc,gBAAgBA,CAAA;IACd,IAAI,CAACnB,aAAa,CAACqB,UAAU,EAAE;IAC/B,IAAI,CAACC,YAAY,GAAG,IAAI,CAACtB,aAAa,CAACuB,UAAU,EAAE,CAACP,SAAS,CAAEQ,IAAS,IAAI;MAC1E,IAAIA,IAAI,CAACN,OAAO,KAAK,IAAI,CAACA,OAAO,EAAE;QACjC,IAAI,CAACb,QAAQ,CAACoB,IAAI,CAACD,IAAe,CAAC;;IAEvC,CAAC,CAAC;EAEJ;EAIEE,WAAWA,CAAA;IACT,IAAI,IAAI,CAACvB,cAAc,EAAE;MACrB,IAAI,CAACH,aAAa,CAAC2B,IAAI,CAAC,IAAI,CAACxB,cAAc,EAAE,IAAI,CAACe,OAAO,CAAC;MAC1D,IAAI,CAACf,cAAc,GAAG,EAAE;;EAE9B;;AA3DSL,aAAa,C;mBAAbA,aAAa,EAAAd,EAAA,CAAA4C,iBAAA,CAAAC,EAAA,CAAAC,aAAA,GAAA9C,EAAA,CAAA4C,iBAAA,CAAAG,EAAA,CAAAC,MAAA,GAAAhD,EAAA,CAAA4C,iBAAA,CAAAG,EAAA,CAAAE,cAAA;AAAA;AAAbnC,aAAa,C;QAAbA,aAAa;EAAAoC,SAAA;EAAAC,KAAA;EAAAC,IAAA;EAAAC,MAAA;EAAAC,QAAA,WAAAC,uBAAAC,EAAA,EAAAC,GAAA;IAAA,IAAAD,EAAA;MCZ1BxD,EAAA,CAAAC,cAAA,aAA4B;MAGhBD,EAAA,CAAAE,MAAA,kBACJ;MAAAF,EAAA,CAAAG,YAAA,EAAM;MACNH,EAAA,CAAAC,cAAA,aAAuB;MAGfD,EAAA,CAAA0D,UAAA,IAAAC,2BAAA,gBAIK;MACT3D,EAAA,CAAAG,YAAA,EAAK;MAETH,EAAA,CAAAC,cAAA,aAAyB;MAGiCD,EAAA,CAAA4D,UAAA,2BAAAC,uDAAAC,MAAA;QAAA,OAAAL,GAAA,CAAAtC,cAAA,GAAA2C,MAAA;MAAA,EAA4B;MAA1E9D,EAAA,CAAAG,YAAA,EAA8H;MAElIH,EAAA,CAAAC,cAAA,kBAAsE;MAAtCD,EAAA,CAAA4D,UAAA,mBAAAG,gDAAA;QAAA,OAASN,GAAA,CAAAf,WAAA,EAAa;MAAA,EAAC;MAAe1C,EAAA,CAAAE,MAAA,YAAI;MAAAF,EAAA,CAAAG,YAAA,EAAS;;;MAX/DH,EAAA,CAAAW,SAAA,GAAW;MAAXX,EAAA,CAAAI,UAAA,YAAAqD,GAAA,CAAApC,QAAA,CAAW;MASmBrB,EAAA,CAAAW,SAAA,GAA4B;MAA5BX,EAAA,CAAAI,UAAA,YAAAqD,GAAA,CAAAtC,cAAA,CAA4B"},"metadata":{},"sourceType":"module","externalDependencies":[]}