{"ast":null,"code":"// import { ComponentFixture, TestBed } from '@angular/core/testing';\n// import { GroupsComponent } from './groups.component';\n// describe('GroupsComponent', () => {\n//   let component: GroupsComponent;\n//   let fixture: ComponentFixture<GroupsComponent>;\n//   beforeEach(() => {\n//     TestBed.configureTestingModule({\n//       declarations: [GroupsComponent]\n//     });\n//     fixture = TestBed.createComponent(GroupsComponent);\n//     component = fixture.componentInstance;\n//     fixture.detectChanges();\n//   });\n//   it('should create', () => {\n//     expect(component).toBeTruthy();\n//   });\n// });\nimport { TestBed, async } from '@angular/core/testing';\nimport { GroupsComponent } from './groups.component';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { FormsModule } from '@angular/forms'; // Import FormsModule\nconst BACKEND_URL = \"http://localhost:3000\";\ndescribe('GroupsComponent', () => {\n  let component;\n  let fixture;\n  let httpMock;\n  beforeEach(async(() => {\n    // Mock the current user in session storage\n    const mockUser = {\n      username: 'user1',\n      role: 3\n    };\n    sessionStorage.setItem('current.user', JSON.stringify(mockUser));\n    TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule, RouterTestingModule, FormsModule],\n      declarations: [GroupsComponent]\n    }).compileComponents();\n    fixture = TestBed.createComponent(GroupsComponent);\n    component = fixture.componentInstance;\n    httpMock = TestBed.inject(HttpTestingController);\n    fixture.detectChanges();\n  }));\n  afterEach(() => {\n    httpMock.verify(); // Ensure that no requests are outstanding\n  });\n\n  it('should make an HTTP POST request when the requestButton is clicked', () => {\n    const mockGroup = {\n      groupID: '1',\n      userRequests: []\n      // Other properties of the mock group as needed\n    };\n\n    component.loggedInUser = {\n      username: 'user1'\n    };\n    component.requestButton(mockGroup);\n    const req = httpMock.expectOne(`${BACKEND_URL}/update-groups`); // Assuming BACKEND_URL is imported\n    expect(req.request.method).toBe('POST');\n    expect(req.request.body).toEqual(mockGroup); // Ensure that the request body matches the group object\n    req.flush({}); // Mock a successful response\n    expect(mockGroup.userRequests).toContain('user1'); // Ensure that the user request was updated\n  });\n});","map":{"version":3,"names":["TestBed","async","GroupsComponent","HttpClientTestingModule","HttpTestingController","RouterTestingModule","FormsModule","BACKEND_URL","describe","component","fixture","httpMock","beforeEach","mockUser","username","role","sessionStorage","setItem","JSON","stringify","configureTestingModule","imports","declarations","compileComponents","createComponent","componentInstance","inject","detectChanges","afterEach","verify","it","mockGroup","groupID","userRequests","loggedInUser","requestButton","req","expectOne","expect","request","method","toBe","body","toEqual","flush","toContain"],"sources":["/Users/frazerlinscott/Desktop/Software Frameworks/Assignments/Assignment1_SoftwareFrames_s2930588/src/app/groups/groups.component.spec.ts"],"sourcesContent":["// import { ComponentFixture, TestBed } from '@angular/core/testing';\n\n// import { GroupsComponent } from './groups.component';\n\n// describe('GroupsComponent', () => {\n//   let component: GroupsComponent;\n//   let fixture: ComponentFixture<GroupsComponent>;\n\n//   beforeEach(() => {\n//     TestBed.configureTestingModule({\n//       declarations: [GroupsComponent]\n//     });\n//     fixture = TestBed.createComponent(GroupsComponent);\n//     component = fixture.componentInstance;\n//     fixture.detectChanges();\n//   });\n\n//   it('should create', () => {\n//     expect(component).toBeTruthy();\n//   });\n// });\n\nimport { TestBed, ComponentFixture, async } from '@angular/core/testing';\nimport { GroupsComponent } from './groups.component';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { FormsModule } from '@angular/forms'; // Import FormsModule\nimport * as $ from 'jquery';\n\nconst BACKEND_URL = \"http://localhost:3000\";\n\ndescribe('GroupsComponent', () => {\n    let component: GroupsComponent;\n    let fixture: ComponentFixture<GroupsComponent>;\n    let httpMock: HttpTestingController;\n\n    beforeEach(async(() => {\n        // Mock the current user in session storage\n        const mockUser = {\n            username: 'user1',\n            role: 3 \n        };\n\n        sessionStorage.setItem('current.user', JSON.stringify(mockUser));\n\n        TestBed.configureTestingModule({\n            imports: [\n                HttpClientTestingModule,\n                RouterTestingModule,\n                FormsModule \n            ],\n            declarations: [GroupsComponent]\n        }).compileComponents();\n\n        fixture = TestBed.createComponent(GroupsComponent);\n        component = fixture.componentInstance;\n        httpMock = TestBed.inject(HttpTestingController);\n        fixture.detectChanges();\n    }));\n\n    afterEach(() => {\n        httpMock.verify(); // Ensure that no requests are outstanding\n    });\n\n    it('should make an HTTP POST request when the requestButton is clicked', () => {\n      const mockGroup = {\n          groupID: '1', // Replace with an appropriate group ID\n          userRequests: [] as string[] \n          // Other properties of the mock group as needed\n      };\n  \n      component.loggedInUser = { username: 'user1' };\n  \n      component.requestButton(mockGroup);\n  \n      const req = httpMock.expectOne(`${BACKEND_URL}/update-groups`); // Assuming BACKEND_URL is imported\n      expect(req.request.method).toBe('POST');\n      expect(req.request.body).toEqual(mockGroup); // Ensure that the request body matches the group object\n  \n      req.flush({}); // Mock a successful response\n  \n      expect(mockGroup.userRequests).toContain('user1'); // Ensure that the user request was updated\n  });\n});\n"],"mappings":"AAAA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA,SAASA,OAAO,EAAoBC,KAAK,QAAQ,uBAAuB;AACxE,SAASC,eAAe,QAAQ,oBAAoB;AACpD,SAASC,uBAAuB,EAAEC,qBAAqB,QAAQ,8BAA8B;AAC7F,SAASC,mBAAmB,QAAQ,yBAAyB;AAC7D,SAASC,WAAW,QAAQ,gBAAgB,CAAC,CAAC;AAG9C,MAAMC,WAAW,GAAG,uBAAuB;AAE3CC,QAAQ,CAAC,iBAAiB,EAAE,MAAK;EAC7B,IAAIC,SAA0B;EAC9B,IAAIC,OAA0C;EAC9C,IAAIC,QAA+B;EAEnCC,UAAU,CAACX,KAAK,CAAC,MAAK;IAClB;IACA,MAAMY,QAAQ,GAAG;MACbC,QAAQ,EAAE,OAAO;MACjBC,IAAI,EAAE;KACT;IAEDC,cAAc,CAACC,OAAO,CAAC,cAAc,EAAEC,IAAI,CAACC,SAAS,CAACN,QAAQ,CAAC,CAAC;IAEhEb,OAAO,CAACoB,sBAAsB,CAAC;MAC3BC,OAAO,EAAE,CACLlB,uBAAuB,EACvBE,mBAAmB,EACnBC,WAAW,CACd;MACDgB,YAAY,EAAE,CAACpB,eAAe;KACjC,CAAC,CAACqB,iBAAiB,EAAE;IAEtBb,OAAO,GAAGV,OAAO,CAACwB,eAAe,CAACtB,eAAe,CAAC;IAClDO,SAAS,GAAGC,OAAO,CAACe,iBAAiB;IACrCd,QAAQ,GAAGX,OAAO,CAAC0B,MAAM,CAACtB,qBAAqB,CAAC;IAChDM,OAAO,CAACiB,aAAa,EAAE;EAC3B,CAAC,CAAC,CAAC;EAEHC,SAAS,CAAC,MAAK;IACXjB,QAAQ,CAACkB,MAAM,EAAE,CAAC,CAAC;EACvB,CAAC,CAAC;;EAEFC,EAAE,CAAC,oEAAoE,EAAE,MAAK;IAC5E,MAAMC,SAAS,GAAG;MACdC,OAAO,EAAE,GAAG;MACZC,YAAY,EAAE;MACd;KACH;;IAEDxB,SAAS,CAACyB,YAAY,GAAG;MAAEpB,QAAQ,EAAE;IAAO,CAAE;IAE9CL,SAAS,CAAC0B,aAAa,CAACJ,SAAS,CAAC;IAElC,MAAMK,GAAG,GAAGzB,QAAQ,CAAC0B,SAAS,CAAC,GAAG9B,WAAW,gBAAgB,CAAC,CAAC,CAAC;IAChE+B,MAAM,CAACF,GAAG,CAACG,OAAO,CAACC,MAAM,CAAC,CAACC,IAAI,CAAC,MAAM,CAAC;IACvCH,MAAM,CAACF,GAAG,CAACG,OAAO,CAACG,IAAI,CAAC,CAACC,OAAO,CAACZ,SAAS,CAAC,CAAC,CAAC;IAE7CK,GAAG,CAACQ,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC;IAEfN,MAAM,CAACP,SAAS,CAACE,YAAY,CAAC,CAACY,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;EACvD,CAAC,CAAC;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}