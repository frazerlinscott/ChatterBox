{"ast":null,"code":"// import { ComponentFixture, TestBed } from '@angular/core/testing';\n// import { GroupsComponent } from './groups.component';\n// describe('GroupsComponent', () => {\n//   let component: GroupsComponent;\n//   let fixture: ComponentFixture<GroupsComponent>;\n//   beforeEach(() => {\n//     TestBed.configureTestingModule({\n//       declarations: [GroupsComponent]\n//     });\n//     fixture = TestBed.createComponent(GroupsComponent);\n//     component = fixture.componentInstance;\n//     fixture.detectChanges();\n//   });\n//   it('should create', () => {\n//     expect(component).toBeTruthy();\n//   });\n// });\nimport { TestBed, async } from '@angular/core/testing';\nimport { GroupsComponent } from './groups.component';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { FormsModule } from '@angular/forms'; // Import FormsModule\nconst BACKEND_URL = \"http://localhost:3000\";\ndescribe('GroupsComponent', () => {\n  let component;\n  let fixture;\n  let httpMock;\n  beforeEach(async(() => {\n    // Mock the current user in session storage\n    const mockUser = {\n      username: 'user1',\n      role: 3 // Assuming role is a number\n    };\n\n    sessionStorage.setItem('current.user', JSON.stringify(mockUser));\n    TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule, RouterTestingModule, FormsModule],\n      declarations: [GroupsComponent]\n    }).compileComponents();\n    fixture = TestBed.createComponent(GroupsComponent);\n    component = fixture.componentInstance;\n    httpMock = TestBed.inject(HttpTestingController);\n    fixture.detectChanges();\n  }));\n  afterEach(() => {\n    httpMock.verify(); // Ensure that no requests are outstanding\n  });\n\n  it('should remove a user from a group and its channels', () => {\n    const mockGroup = {\n      members: ['user1', 'user2'],\n      channels: {\n        channel1: ['user1', 'user2'],\n        channel2: ['user1']\n      }\n    };\n    component.loggedInUser = {\n      username: 'user1'\n    };\n    component.leaveGroup(mockGroup);\n    const req = httpMock.expectOne(`${BACKEND_URL}/update-groups`);\n    expect(req.request.method).toBe('POST');\n    req.flush({}); // mock a successful response\n    expect(mockGroup.members).toEqual(['user2']);\n    expect(mockGroup.channels.channel1).toEqual(['user2']);\n    expect(mockGroup.channels.channel2).toEqual([]);\n  });\n  it('should save a group if it is unique', () => {\n    component.isUniqueGroup = true;\n    component.loggedInUser = {\n      username: 'user1'\n    };\n    component.newGroupName = 'TestGroup';\n    component.groupChannels = ['channel1', 'channel2'];\n    component.newGroupID = '1234';\n    component.saveGroup();\n    const req = httpMock.expectOne(`${BACKEND_URL}/update-groups`);\n    expect(req.request.method).toBe('POST');\n    req.flush({}); // mock a successful response\n    expect(component.group.groupName).toEqual('TestGroup');\n    expect(component.group.members).toEqual(['user1']);\n    expect(component.group.channels['channel1']).toEqual([]);\n    expect(component.group.channels['channel2']).toEqual([]);\n  });\n  it('should not save a group if it is not unique', () => {\n    component.isUniqueGroup = false;\n    component.saveGroup();\n    const reqs = httpMock.match(`${BACKEND_URL}/update-groups`);\n    expect(reqs.length).toBe(0); // Expect no HTTP requests to be made\n  });\n  // Handle the missing GET requests\n  it('should handle GET requests', () => {\n    const req1 = httpMock.expectOne(`${BACKEND_URL}/all-groups`);\n    expect(req1.request.method).toBe('GET');\n    req1.flush({}); // mock a successful response\n    const req2 = httpMock.expectOne(`${BACKEND_URL}/all-users`);\n    expect(req2.request.method).toBe('GET');\n    req2.flush({}); // mock a successful response\n    const req3 = httpMock.expectOne(`${BACKEND_URL}/groups`);\n    expect(req3.request.method).toBe('GET');\n    req3.flush({}); // mock a successful response\n    const req4 = httpMock.expectOne(`${BACKEND_URL}/all-groups`);\n    expect(req4.request.method).toBe('GET');\n    req4.flush({}); // mock a successful response\n  });\n});","map":{"version":3,"names":["TestBed","async","GroupsComponent","HttpClientTestingModule","HttpTestingController","RouterTestingModule","FormsModule","BACKEND_URL","describe","component","fixture","httpMock","beforeEach","mockUser","username","role","sessionStorage","setItem","JSON","stringify","configureTestingModule","imports","declarations","compileComponents","createComponent","componentInstance","inject","detectChanges","afterEach","verify","it","mockGroup","members","channels","channel1","channel2","loggedInUser","leaveGroup","req","expectOne","expect","request","method","toBe","flush","toEqual","isUniqueGroup","newGroupName","groupChannels","newGroupID","saveGroup","group","groupName","reqs","match","length","req1","req2","req3","req4"],"sources":["/Users/frazerlinscott/Desktop/Software Frameworks/Assignments/Assignment1_SoftwareFrames_s2930588/src/app/groups/groups.component.spec.ts"],"sourcesContent":["// import { ComponentFixture, TestBed } from '@angular/core/testing';\n\n// import { GroupsComponent } from './groups.component';\n\n// describe('GroupsComponent', () => {\n//   let component: GroupsComponent;\n//   let fixture: ComponentFixture<GroupsComponent>;\n\n//   beforeEach(() => {\n//     TestBed.configureTestingModule({\n//       declarations: [GroupsComponent]\n//     });\n//     fixture = TestBed.createComponent(GroupsComponent);\n//     component = fixture.componentInstance;\n//     fixture.detectChanges();\n//   });\n\n//   it('should create', () => {\n//     expect(component).toBeTruthy();\n//   });\n// });\n\nimport { TestBed, ComponentFixture, async } from '@angular/core/testing';\nimport { GroupsComponent } from './groups.component';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { FormsModule } from '@angular/forms'; // Import FormsModule\nimport * as $ from 'jquery';\n\nconst BACKEND_URL = \"http://localhost:3000\";\n\ndescribe('GroupsComponent', () => {\n    let component: GroupsComponent;\n    let fixture: ComponentFixture<GroupsComponent>;\n    let httpMock: HttpTestingController;\n\n    beforeEach(async(() => {\n        // Mock the current user in session storage\n        const mockUser = {\n            username: 'user1',\n            role: 3 // Assuming role is a number\n        };\n        sessionStorage.setItem('current.user', JSON.stringify(mockUser));\n\n        TestBed.configureTestingModule({\n            imports: [\n                HttpClientTestingModule,\n                RouterTestingModule,\n                FormsModule \n            ],\n            declarations: [GroupsComponent]\n        }).compileComponents();\n\n        fixture = TestBed.createComponent(GroupsComponent);\n        component = fixture.componentInstance;\n        httpMock = TestBed.inject(HttpTestingController);\n        fixture.detectChanges();\n    }));\n\n    afterEach(() => {\n        httpMock.verify(); // Ensure that no requests are outstanding\n    });\n\n    it('should remove a user from a group and its channels', () => {\n        const mockGroup = {\n            members: ['user1', 'user2'],\n            channels: {\n                channel1: ['user1', 'user2'],\n                channel2: ['user1']\n            }\n        };\n\n        component.loggedInUser = { username: 'user1' };\n\n        component.leaveGroup(mockGroup);\n\n        const req = httpMock.expectOne(`${BACKEND_URL}/update-groups`);\n        expect(req.request.method).toBe('POST');\n        req.flush({}); // mock a successful response\n\n        expect(mockGroup.members).toEqual(['user2']);\n        expect(mockGroup.channels.channel1).toEqual(['user2']);\n        expect(mockGroup.channels.channel2).toEqual([]);\n    });\n\n    it('should save a group if it is unique', () => {\n        component.isUniqueGroup = true;\n        component.loggedInUser = { username: 'user1' };\n        component.newGroupName = 'TestGroup';\n        component.groupChannels = ['channel1', 'channel2'];\n        component.newGroupID = '1234';\n\n        component.saveGroup();\n\n        const req = httpMock.expectOne(`${BACKEND_URL}/update-groups`);\n        expect(req.request.method).toBe('POST');\n        req.flush({}); // mock a successful response\n\n        expect(component.group.groupName).toEqual('TestGroup');\n        expect(component.group.members).toEqual(['user1']);\n        expect(component.group.channels['channel1']).toEqual([]);\n        expect(component.group.channels['channel2']).toEqual([]);\n    });\n\n    it('should not save a group if it is not unique', () => {\n        component.isUniqueGroup = false;\n        component.saveGroup();\n        \n        const reqs = httpMock.match(`${BACKEND_URL}/update-groups`);\n        expect(reqs.length).toBe(0); // Expect no HTTP requests to be made\n    });\n\n    // Handle the missing GET requests\n    it('should handle GET requests', () => {\n        const req1 = httpMock.expectOne(`${BACKEND_URL}/all-groups`);\n        expect(req1.request.method).toBe('GET');\n        req1.flush({}); // mock a successful response\n\n        const req2 = httpMock.expectOne(`${BACKEND_URL}/all-users`);\n        expect(req2.request.method).toBe('GET');\n        req2.flush({}); // mock a successful response\n\n        const req3 = httpMock.expectOne(`${BACKEND_URL}/groups`);\n        expect(req3.request.method).toBe('GET');\n        req3.flush({}); // mock a successful response\n\n        const req4 = httpMock.expectOne(`${BACKEND_URL}/all-groups`);\n        expect(req4.request.method).toBe('GET');\n        req4.flush({}); // mock a successful response\n    });\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}