{"ast":null,"code":"// import { ComponentFixture, TestBed } from '@angular/core/testing';\n// import { LoginComponent } from './login.component';\n// describe('LoginComponent', () => {\n//   let component: LoginComponent;\n//   let fixture: ComponentFixture<LoginComponent>;\n//   beforeEach(() => {\n//     TestBed.configureTestingModule({\n//       declarations: [LoginComponent]\n//     });\n//     fixture = TestBed.createComponent(LoginComponent);\n//     component = fixture.componentInstance;\n//     fixture.detectChanges();\n//   });\n//   it('should create', () => {\n//     expect(component).toBeTruthy();\n//   });\n// });\nimport { TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { Router } from '@angular/router';\nimport { LoginComponent } from './login.component';\nimport { FormsModule } from '@angular/forms';\ndescribe('LoginComponent', () => {\n  let component;\n  let fixture;\n  let httpMock;\n  let router;\n  class MockRouter {\n    navigateByUrl(url) {\n      return url;\n    }\n  }\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      declarations: [LoginComponent],\n      imports: [HttpClientTestingModule, FormsModule],\n      providers: [{\n        provide: Router,\n        useClass: MockRouter\n      }]\n    }).compileComponents();\n    fixture = TestBed.createComponent(LoginComponent);\n    component = fixture.componentInstance;\n    httpMock = TestBed.inject(HttpTestingController);\n    router = TestBed.inject(Router);\n    fixture.detectChanges();\n  });\n  it('should set session storage and navigate to account when login is successful', () => {\n    const mockResponse = {\n      ok: true,\n      user: {\n        id: 1,\n        username: 'testUser'\n      }\n    };\n    spyOn(sessionStorage, 'setItem');\n    spyOn(router, 'navigateByUrl');\n    component.userpwd = {\n      username: \"test\",\n      password: \"test123\"\n    };\n    component.loginfunc();\n    const req = httpMock.expectOne('http://localhost:3000/login');\n    expect(req.request.method).toBe('POST');\n    req.flush(mockResponse);\n    expect(sessionStorage.setItem).toHaveBeenCalledWith('current.user', JSON.stringify(mockResponse.user));\n    expect(router.navigateByUrl).toHaveBeenCalledWith('account');\n  });\n  it('should navigate to create-user when creatfunc is called', () => {\n    spyOn(router, 'navigateByUrl');\n    component.creatfunc();\n    expect(router.navigateByUrl).toHaveBeenCalledWith('create-user');\n  });\n});","map":{"version":3,"names":["TestBed","HttpClientTestingModule","HttpTestingController","Router","LoginComponent","FormsModule","describe","component","fixture","httpMock","router","MockRouter","navigateByUrl","url","beforeEach","configureTestingModule","declarations","imports","providers","provide","useClass","compileComponents","createComponent","componentInstance","inject","detectChanges","it","mockResponse","ok","user","id","username","spyOn","sessionStorage","userpwd","password","loginfunc","req","expectOne","expect","request","method","toBe","flush","setItem","toHaveBeenCalledWith","JSON","stringify","creatfunc"],"sources":["/Users/frazerlinscott/Desktop/Software Frameworks/Assignments/Assignment1_SoftwareFrames_s2930588/src/app/login/login.component.spec.ts"],"sourcesContent":["// import { ComponentFixture, TestBed } from '@angular/core/testing';\n\n// import { LoginComponent } from './login.component';\n\n// describe('LoginComponent', () => {\n//   let component: LoginComponent;\n//   let fixture: ComponentFixture<LoginComponent>;\n\n//   beforeEach(() => {\n//     TestBed.configureTestingModule({\n//       declarations: [LoginComponent]\n//     });\n//     fixture = TestBed.createComponent(LoginComponent);\n//     component = fixture.componentInstance;\n//     fixture.detectChanges();\n//   });\n\n//   it('should create', () => {\n//     expect(component).toBeTruthy();\n//   });\n// });\n\n\nimport { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { Router } from '@angular/router';\n\nimport { LoginComponent } from './login.component';\n\nimport { FormsModule } from '@angular/forms';\n\n\ndescribe('LoginComponent', () => {\n  let component: LoginComponent;\n  let fixture: ComponentFixture<LoginComponent>;\n  let httpMock: HttpTestingController;\n  let router: Router;\n\n  class MockRouter {\n    navigateByUrl(url: string) { return url; }\n  }\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      declarations: [ LoginComponent ],\n      imports: [ HttpClientTestingModule, FormsModule ],  // Added FormsModule here\n      providers: [\n        { provide: Router, useClass: MockRouter }\n      ]\n    }).compileComponents();\n\n    fixture = TestBed.createComponent(LoginComponent);\n    component = fixture.componentInstance;\n    httpMock = TestBed.inject(HttpTestingController);\n    router = TestBed.inject(Router);\n\n    fixture.detectChanges();\n  });\n\n  it('should set session storage and navigate to account when login is successful', () => {\n    const mockResponse = {\n      ok: true,\n      user: { id: 1, username: 'testUser' }\n    };\n  \n    spyOn(sessionStorage, 'setItem');\n    spyOn(router, 'navigateByUrl');\n  \n    component.userpwd = { username: \"test\", password: \"test123\" };\n    component.loginfunc();\n  \n    const req = httpMock.expectOne('http://localhost:3000/login');\n    expect(req.request.method).toBe('POST');\n    req.flush(mockResponse);\n  \n    expect(sessionStorage.setItem).toHaveBeenCalledWith('current.user', JSON.stringify(mockResponse.user));\n    expect(router.navigateByUrl).toHaveBeenCalledWith('account');\n  });\n\n  it('should navigate to create-user when creatfunc is called', () => {\n    spyOn(router, 'navigateByUrl');\n    component.creatfunc();\n    expect(router.navigateByUrl).toHaveBeenCalledWith('create-user');\n  });\n  \n\n});\n"],"mappings":"AAAA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA,SAA2BA,OAAO,QAAQ,uBAAuB;AACjE,SAASC,uBAAuB,EAAEC,qBAAqB,QAAQ,8BAA8B;AAC7F,SAASC,MAAM,QAAQ,iBAAiB;AAExC,SAASC,cAAc,QAAQ,mBAAmB;AAElD,SAASC,WAAW,QAAQ,gBAAgB;AAG5CC,QAAQ,CAAC,gBAAgB,EAAE,MAAK;EAC9B,IAAIC,SAAyB;EAC7B,IAAIC,OAAyC;EAC7C,IAAIC,QAA+B;EACnC,IAAIC,MAAc;EAElB,MAAMC,UAAU;IACdC,aAAaA,CAACC,GAAW;MAAI,OAAOA,GAAG;IAAE;;EAG3CC,UAAU,CAAC,MAAK;IACdd,OAAO,CAACe,sBAAsB,CAAC;MAC7BC,YAAY,EAAE,CAAEZ,cAAc,CAAE;MAChCa,OAAO,EAAE,CAAEhB,uBAAuB,EAAEI,WAAW,CAAE;MACjDa,SAAS,EAAE,CACT;QAAEC,OAAO,EAAEhB,MAAM;QAAEiB,QAAQ,EAAET;MAAU,CAAE;KAE5C,CAAC,CAACU,iBAAiB,EAAE;IAEtBb,OAAO,GAAGR,OAAO,CAACsB,eAAe,CAAClB,cAAc,CAAC;IACjDG,SAAS,GAAGC,OAAO,CAACe,iBAAiB;IACrCd,QAAQ,GAAGT,OAAO,CAACwB,MAAM,CAACtB,qBAAqB,CAAC;IAChDQ,MAAM,GAAGV,OAAO,CAACwB,MAAM,CAACrB,MAAM,CAAC;IAE/BK,OAAO,CAACiB,aAAa,EAAE;EACzB,CAAC,CAAC;EAEFC,EAAE,CAAC,6EAA6E,EAAE,MAAK;IACrF,MAAMC,YAAY,GAAG;MACnBC,EAAE,EAAE,IAAI;MACRC,IAAI,EAAE;QAAEC,EAAE,EAAE,CAAC;QAAEC,QAAQ,EAAE;MAAU;KACpC;IAEDC,KAAK,CAACC,cAAc,EAAE,SAAS,CAAC;IAChCD,KAAK,CAACtB,MAAM,EAAE,eAAe,CAAC;IAE9BH,SAAS,CAAC2B,OAAO,GAAG;MAAEH,QAAQ,EAAE,MAAM;MAAEI,QAAQ,EAAE;IAAS,CAAE;IAC7D5B,SAAS,CAAC6B,SAAS,EAAE;IAErB,MAAMC,GAAG,GAAG5B,QAAQ,CAAC6B,SAAS,CAAC,6BAA6B,CAAC;IAC7DC,MAAM,CAACF,GAAG,CAACG,OAAO,CAACC,MAAM,CAAC,CAACC,IAAI,CAAC,MAAM,CAAC;IACvCL,GAAG,CAACM,KAAK,CAAChB,YAAY,CAAC;IAEvBY,MAAM,CAACN,cAAc,CAACW,OAAO,CAAC,CAACC,oBAAoB,CAAC,cAAc,EAAEC,IAAI,CAACC,SAAS,CAACpB,YAAY,CAACE,IAAI,CAAC,CAAC;IACtGU,MAAM,CAAC7B,MAAM,CAACE,aAAa,CAAC,CAACiC,oBAAoB,CAAC,SAAS,CAAC;EAC9D,CAAC,CAAC;EAEFnB,EAAE,CAAC,yDAAyD,EAAE,MAAK;IACjEM,KAAK,CAACtB,MAAM,EAAE,eAAe,CAAC;IAC9BH,SAAS,CAACyC,SAAS,EAAE;IACrBT,MAAM,CAAC7B,MAAM,CAACE,aAAa,CAAC,CAACiC,oBAAoB,CAAC,aAAa,CAAC;EAClE,CAAC,CAAC;AAGJ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}