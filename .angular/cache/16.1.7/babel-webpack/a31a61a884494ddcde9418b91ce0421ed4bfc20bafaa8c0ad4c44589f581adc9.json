{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport io from \"socket.io-client\";\nconst SERVER_URL = 'http://localhost:3000';\nexport let SocketService = class SocketService {\n  constructor(sessionStorageService) {\n    this.sessionStorageService = sessionStorageService;\n  }\n  initSocket() {\n    this.socket = io(SERVER_URL);\n    return () => {\n      this.socket.disconnect();\n    };\n  }\n  join(channel) {\n    this.socket.emit('join', channel);\n  }\n  send(message, channel) {\n    const username = this.sessionStorageService.getUsername();\n    console.log(username);\n    this.socket.emit('message', {\n      message,\n      channel,\n      username\n    });\n  }\n  getMessage() {\n    return new Observable(observer => {\n      this.socket.on('message', data => {\n        observer.next(data);\n      });\n    });\n  }\n};\nSocketService = __decorate([Injectable({\n  providedIn: 'root'\n})], SocketService);\n;","map":{"version":3,"names":["Injectable","Observable","io","SERVER_URL","SocketService","constructor","sessionStorageService","initSocket","socket","disconnect","join","channel","emit","send","message","username","getUsername","console","log","getMessage","observer","on","data","next","__decorate","providedIn"],"sources":["/Users/frazerlinscott/Desktop/Software Frameworks/Assignments/Assignment1_SoftwareFrames_s2930588/src/app/service/socket.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {Observable} from 'rxjs';\nimport io from \"socket.io-client\";\n\n\nconst SERVER_URL = 'http://localhost:3000'\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class SocketService {\n\n  socket:any;\n\n  constructor(private sessionStorageService: GetCurrentUserService) { }\n\n  initSocket(){\n    this.socket = io(SERVER_URL);\n    return () =>{this.socket.disconnect();}\n  }\n\n  join(channel: string): void {\n    this.socket.emit('join', channel);\n  }\n\n  send(message: string, channel: string): void {\n    const username = this.sessionStorageService.getUsername();\n    console.log(username);\n    this.socket.emit('message', { message, channel, username });\n  }\n\n\n  getMessage(): Observable<string> {\n    return new Observable<string>(observer => {\n      this.socket.on('message', (data: string) => {\n        observer.next(data);\n      });\n    });\n  }\n};\n"],"mappings":";AAAA,SAASA,UAAU,QAAQ,eAAe;AAC1C,SAAQC,UAAU,QAAO,MAAM;AAC/B,OAAOC,EAAE,MAAM,kBAAkB;AAGjC,MAAMC,UAAU,GAAG,uBAAuB;AAMnC,WAAMC,aAAa,GAAnB,MAAMA,aAAa;EAIxBC,YAAoBC,qBAA4C;IAA5C,KAAAA,qBAAqB,GAArBA,qBAAqB;EAA2B;EAEpEC,UAAUA,CAAA;IACR,IAAI,CAACC,MAAM,GAAGN,EAAE,CAACC,UAAU,CAAC;IAC5B,OAAO,MAAK;MAAC,IAAI,CAACK,MAAM,CAACC,UAAU,EAAE;IAAC,CAAC;EACzC;EAEAC,IAAIA,CAACC,OAAe;IAClB,IAAI,CAACH,MAAM,CAACI,IAAI,CAAC,MAAM,EAAED,OAAO,CAAC;EACnC;EAEAE,IAAIA,CAACC,OAAe,EAAEH,OAAe;IACnC,MAAMI,QAAQ,GAAG,IAAI,CAACT,qBAAqB,CAACU,WAAW,EAAE;IACzDC,OAAO,CAACC,GAAG,CAACH,QAAQ,CAAC;IACrB,IAAI,CAACP,MAAM,CAACI,IAAI,CAAC,SAAS,EAAE;MAAEE,OAAO;MAAEH,OAAO;MAAEI;IAAQ,CAAE,CAAC;EAC7D;EAGAI,UAAUA,CAAA;IACR,OAAO,IAAIlB,UAAU,CAASmB,QAAQ,IAAG;MACvC,IAAI,CAACZ,MAAM,CAACa,EAAE,CAAC,SAAS,EAAGC,IAAY,IAAI;QACzCF,QAAQ,CAACG,IAAI,CAACD,IAAI,CAAC;MACrB,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;CACD;AA7BYlB,aAAa,GAAAoB,UAAA,EAJzBxB,UAAU,CAAC;EACVyB,UAAU,EAAE;CACb,CAAC,C,EAEWrB,aAAa,CA6BzB;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}