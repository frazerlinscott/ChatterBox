{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"src/app/service/socket.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/forms\";\nconst _c0 = function (a0, a1) {\n  return {\n    \"right\": a0,\n    \"left\": a1\n  };\n};\nfunction ChatComponent_li_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\", 11);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const msg_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(3, _c0, msg_r1.username === ctx_r0.loggedInUser.username, msg_r1.username !== ctx_r0.loggedInUser.username));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\" \", msg_r1.username, \" : \", msg_r1.message, \" \");\n  }\n}\nconst BACKEND_URL = \"http://localhost:3000\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\nexport class ChatComponent {\n  constructor(http, socketService, router, route) {\n    this.http = http;\n    this.socketService = socketService;\n    this.router = router;\n    this.route = route;\n    this.messagecontent = \"\";\n    this.currentChannel = null;\n    this.messages = [];\n  }\n  ngOnInit() {\n    this.socketService.initSocket();\n    const storedUser = window.sessionStorage.getItem('current.user');\n    if (storedUser) {\n      this.loggedInUser = JSON.parse(storedUser);\n      //console.log(this.loggedInUser.username)\n    }\n\n    this.route.queryParams.subscribe(params => {\n      this.channel = params['channel'];\n      this.currentGroupString = params['currentGroup'];\n      this.initIoConnection();\n      this.socketService.join(this.channel);\n      this.messages = []; // Clear the previous messages when changing the channel.\n    });\n  }\n\n  initIoConnection() {\n    console.log('initIoConnection called');\n    if (this.ioConnection) {\n      this.ioConnection.unsubscribe();\n    }\n    this.ioConnection = this.socketService.getMessage().subscribe(data => {\n      console.log('Received:', data);\n      if (data.channel === this.channel) {\n        this.messages.push(data);\n        console.log(this.messages);\n        // const messageData = {\n        //     groupName: this.group, // Assuming you have this.group set to the current group name\n        //     channelName: this.channel,\n        //     message: {\n        //         messageString: data.message, // The actual message content\n        //         sentBy: data.username, // The user who sent the message\n        //         timestamp: new Date().toISOString() // Current timestamp\n        //     }\n        // };\n      }\n    });\n  }\n\n  sendMessage() {\n    if (this.messagecontent) {\n      this.socketService.send(this.messagecontent, this.channel, this.currentGroupString);\n      this.messagecontent = \"\";\n    }\n  }\n}\nChatComponent.ɵfac = function ChatComponent_Factory(t) {\n  return new (t || ChatComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i2.SocketService), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i3.ActivatedRoute));\n};\nChatComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ChatComponent,\n  selectors: [[\"app-chat\"]],\n  decls: 13,\n  vars: 2,\n  consts: [[1, \"container\", \"mt-5\"], [1, \"card\"], [1, \"card-header\"], [1, \"card-body\"], [1, \"list-group\", \"chat-messages\"], [\"class\", \"list-group-item\", 3, \"ngClass\", 4, \"ngFor\", \"ngForOf\"], [1, \"card-footer\"], [1, \"form-inline\"], [1, \"form-group\", \"flex-grow-1\", \"mr-2\"], [\"type\", \"text\", \"name\", \"messagecontent\", \"placeholder\", \"Type a message\", 1, \"form-control\", \"w-100\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"button\", 1, \"btn\", \"btn-primary\", 3, \"click\"], [1, \"list-group-item\", 3, \"ngClass\"]],\n  template: function ChatComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2);\n      i0.ɵɵtext(3, \" Chat Room \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"div\", 3)(5, \"ul\", 4);\n      i0.ɵɵtemplate(6, ChatComponent_li_6_Template, 2, 6, \"li\", 5);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(7, \"div\", 6)(8, \"form\", 7)(9, \"div\", 8)(10, \"input\", 9);\n      i0.ɵɵlistener(\"ngModelChange\", function ChatComponent_Template_input_ngModelChange_10_listener($event) {\n        return ctx.messagecontent = $event;\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(11, \"button\", 10);\n      i0.ɵɵlistener(\"click\", function ChatComponent_Template_button_click_11_listener() {\n        return ctx.sendMessage();\n      });\n      i0.ɵɵtext(12, \"Send\");\n      i0.ɵɵelementEnd()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngForOf\", ctx.messages);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.messagecontent);\n    }\n  },\n  dependencies: [i4.NgClass, i4.NgForOf, i5.ɵNgNoValidate, i5.DefaultValueAccessor, i5.NgControlStatus, i5.NgControlStatusGroup, i5.NgModel, i5.NgForm],\n  styles: [\".right[_ngcontent-%COMP%] {\\n    text-align: right;\\n    color: blue;\\n  }\\n  \\n  .left[_ngcontent-%COMP%] {\\n    text-align: left;\\n    color: green;\\n  }\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY2hhdC9jaGF0LmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxpQkFBaUI7SUFDakIsV0FBVztFQUNiOztFQUVBO0lBQ0UsZ0JBQWdCO0lBQ2hCLFlBQVk7RUFDZCIsInNvdXJjZXNDb250ZW50IjpbIi5yaWdodCB7XG4gICAgdGV4dC1hbGlnbjogcmlnaHQ7XG4gICAgY29sb3I6IGJsdWU7XG4gIH1cbiAgXG4gIC5sZWZ0IHtcbiAgICB0ZXh0LWFsaWduOiBsZWZ0O1xuICAgIGNvbG9yOiBncmVlbjtcbiAgfSJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"names":["HttpHeaders","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵproperty","ɵɵpureFunction2","_c0","msg_r1","username","ctx_r0","loggedInUser","ɵɵadvance","ɵɵtextInterpolate2","message","BACKEND_URL","httpOptions","headers","ChatComponent","constructor","http","socketService","router","route","messagecontent","currentChannel","messages","ngOnInit","initSocket","storedUser","window","sessionStorage","getItem","JSON","parse","queryParams","subscribe","params","channel","currentGroupString","initIoConnection","join","console","log","ioConnection","unsubscribe","getMessage","data","push","sendMessage","send","ɵɵdirectiveInject","i1","HttpClient","i2","SocketService","i3","Router","ActivatedRoute","selectors","decls","vars","consts","template","ChatComponent_Template","rf","ctx","ɵɵtemplate","ChatComponent_li_6_Template","ɵɵlistener","ChatComponent_Template_input_ngModelChange_10_listener","$event","ChatComponent_Template_button_click_11_listener"],"sources":["/Users/frazerlinscott/Desktop/Software Frameworks/Assignments/Assignment1_SoftwareFrames_s2930588/src/app/chat/chat.component.ts","/Users/frazerlinscott/Desktop/Software Frameworks/Assignments/Assignment1_SoftwareFrames_s2930588/src/app/chat/chat.component.html"],"sourcesContent":["import { Component, OnInit, } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {SocketService} from 'src/app/service/socket.service';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport {FormsModule} from '@angular/forms';\nimport { Message } from 'server/models/messageModel';\n\nconst BACKEND_URL = \"http://localhost:3000\";\n\nconst httpOptions = {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n};\n\n@Component({\n  selector: 'app-chat',\n  templateUrl: './chat.component.html',\n  styleUrls: ['./chat.component.css']\n})\n\n\nexport class ChatComponent implements OnInit {\n\n  messagecontent: string=\"\";\n  //messages: string[] = [];\n  ioConnection:any;\n  channel: any;\n  currentChannel: string | null = null;\n  loggedInUser : any;\n  messages: Message[] = [];\n \n  group: any;\n  currentGroupString:any\n\n  constructor (private http: HttpClient, private socketService: SocketService, private router: Router, private route: ActivatedRoute) { }\n\n  ngOnInit(): void {\n    this.socketService.initSocket();\n\n    const storedUser = window.sessionStorage.getItem('current.user');\n    if (storedUser) {\n\n      this.loggedInUser = JSON.parse(storedUser);\n      //console.log(this.loggedInUser.username)\n    }\n    this.route.queryParams.subscribe(params => {\n      this.channel = params['channel'];\n      this.currentGroupString = params['currentGroup'];\n\n        this.initIoConnection();\n\n        this.socketService.join(this.channel);\n\n        this.messages = []; // Clear the previous messages when changing the channel.\n    });\n}\n\n\ninitIoConnection() {\n  console.log('initIoConnection called');\n\n  if (this.ioConnection) {\n    this.ioConnection.unsubscribe();\n  }\n\n  this.ioConnection = this.socketService.getMessage().subscribe((data: any) => {\n      console.log('Received:', data);\n\n      if (data.channel === this.channel) {\n          this.messages.push(data as Message);\n          console.log(this.messages);\n\n          // const messageData = {\n          //     groupName: this.group, // Assuming you have this.group set to the current group name\n          //     channelName: this.channel,\n          //     message: {\n          //         messageString: data.message, // The actual message content\n          //         sentBy: data.username, // The user who sent the message\n          //         timestamp: new Date().toISOString() // Current timestamp\n          //     }\n          // };\n\n\n      }\n  });\n}\n\nsendMessage() {\n  if (this.messagecontent) {\n    this.socketService.send(this.messagecontent, this.channel, this.currentGroupString);\n    this.messagecontent = \"\";\n  }\n}\n}","<div class=\"container mt-5\">\n    <div class=\"card\">\n        <div class=\"card-header\">\n            Chat Room\n        </div>\n        <div class=\"card-body\">\n            <ul class=\"list-group chat-messages\">\n                <li class=\"list-group-item\" \n                    *ngFor=\"let msg of messages\"\n                    [ngClass]=\"{'right': msg.username === loggedInUser.username, 'left': msg.username !== loggedInUser.username}\">\n                    {{ msg.username }} : {{ msg.message }}\n                </li>\n            </ul>\n        </div>\n        <div class=\"card-footer\">\n            <form class=\"form-inline\">\n                <div class=\"form-group flex-grow-1 mr-2\">\n                    <input type=\"text\" class=\"form-control w-100\" [(ngModel)]=\"messagecontent\" name=\"messagecontent\" placeholder=\"Type a message\">\n                </div>\n                <button class=\"btn btn-primary\" (click)=\"sendMessage()\" type=\"button\">Send</button>\n            </form>\n        </div>\n    </div>\n</div>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}