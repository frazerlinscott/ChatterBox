{"ast":null,"code":"import { TestBed } from '@angular/core/testing';\nimport { FormsModule } from '@angular/forms';\nimport { GroupsComponent } from './groups.component';\ndescribe('GroupsComponent', () => {\n  let component;\n  let fixture;\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      declarations: [GroupsComponent],\n      imports: [FormsModule]\n    });\n    fixture = TestBed.createComponent(GroupsComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n    component.loggedInUser = {\n      username: 'testUser'\n    }; // Set up a loggedInUser\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n  it('should leave group', () => {\n    // Create a mock group\n    const mockGroup = {\n      id: 1,\n      groupName: 'Test Group',\n      members: ['testUser'],\n      channels: {\n        channel1: ['testUser'],\n        channel2: [] // Example channel with no members\n      }\n    };\n    // Call the leaveGroup method\n    component.leaveGroup(mockGroup);\n    // Expect that the user is removed from the group members\n    expect(mockGroup.members).toEqual([]);\n    // Expect that the user is removed from all channels in the group\n    for (const channelName in mockGroup.channels) {\n      expect(mockGroup.channels[channelName]).toEqual([]);\n    }\n    // ... Additional expectations for the method's behavior\n  });\n});\n// import { TestBed, ComponentFixture, async } from '@angular/core/testing';\n// import { GroupsComponent } from './groups.component';\n// import { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\n// import { RouterTestingModule } from '@angular/router/testing';\n// import { FormsModule } from '@angular/forms';\n// import * as $ from 'jquery';\n// const BACKEND_URL = \"http://localhost:3000\";\n// describe('GroupsComponent', () => {\n//     let component: GroupsComponent;\n//     let fixture: ComponentFixture<GroupsComponent>;\n//     let httpMock: HttpTestingController;\n//     beforeEach(async(() => {\n//         // Mock the current user in session storage\n//         const mockUser = {\n//             username: 'user1',\n//             role: 3 \n//         };\n//         sessionStorage.setItem('current.user', JSON.stringify(mockUser));\n//         TestBed.configureTestingModule({\n//             imports: [\n//                 HttpClientTestingModule,\n//                 RouterTestingModule,\n//                 FormsModule \n//             ],\n//             declarations: [GroupsComponent]\n//         }).compileComponents();\n//         fixture = TestBed.createComponent(GroupsComponent);\n//         component = fixture.componentInstance;\n//         httpMock = TestBed.inject(HttpTestingController);\n//         fixture.detectChanges();\n//     }));\n//     afterEach(() => {\n//         httpMock.verify(); // Ensure that no requests are outstanding\n//     });\n//     it('should make an HTTP POST request when the requestButton is clicked', () => {\n//         const mockGroup = {\n//             groupID: 1, // Replace with an appropriate group ID\n//             userRequests: [] as string[] \n//             // Other properties of the mock group as needed\n//         };\n//         component.loggedInUser = { username: 'user1' };\n//         component.requestButton(mockGroup);\n//         const req = httpMock.expectOne(`${BACKEND_URL}/update-groups`); // Assuming BACKEND_URL is imported\n//         expect(req.request.method).toBe('POST');\n//         expect(req.request.body).toEqual(mockGroup); // Ensure that the request body matches the group object\n//         req.flush({}); // Mock a successful response\n//         // Check that the user request was updated\n//         expect(mockGroup.userRequests).toContain('user1');\n//         // Verify that the button is disabled after the request\n//         expect(component.buttonDisabledStates[mockGroup.groupID]).toBe(true);\n//     });\n// });","map":{"version":3,"names":["TestBed","FormsModule","GroupsComponent","describe","component","fixture","beforeEach","configureTestingModule","declarations","imports","createComponent","componentInstance","detectChanges","loggedInUser","username","it","expect","toBeTruthy","mockGroup","id","groupName","members","channels","channel1","channel2","leaveGroup","toEqual","channelName"],"sources":["/Users/frazerlinscott/Desktop/Software Frameworks/Assignments/Assignment1_SoftwareFrames_s2930588/src/app/groups/groups.component.spec.ts"],"sourcesContent":["import { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { FormsModule } from '@angular/forms';\nimport { GroupsComponent } from './groups.component';\n\ndescribe('GroupsComponent', () => {\n  let component: GroupsComponent;\n  let fixture: ComponentFixture<GroupsComponent>;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      declarations: [GroupsComponent],\n      imports: [FormsModule],\n    });\n\n    fixture = TestBed.createComponent(GroupsComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n    component.loggedInUser = { username: 'testUser' }; // Set up a loggedInUser\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n\n  it('should leave group', () => {\n    // Create a mock group\n    const mockGroup: {\n      id: number;\n      groupName: string;\n      members: string[];\n      channels: Record<string, string[]>; // Type annotation for channels object\n    } = {\n      id: 1,\n      groupName: 'Test Group',\n      members: ['testUser'],\n      channels: {\n        channel1: ['testUser'], // Example channel with user 'testUser'\n        channel2: [], // Example channel with no members\n      },\n    };\n\n    // Call the leaveGroup method\n    component.leaveGroup(mockGroup);\n\n    // Expect that the user is removed from the group members\n    expect(mockGroup.members).toEqual([]);\n\n    // Expect that the user is removed from all channels in the group\n    for (const channelName in mockGroup.channels) {\n      expect(mockGroup.channels[channelName]).toEqual([]);\n    }\n\n    // ... Additional expectations for the method's behavior\n  });\n});\n\n\n\n// import { TestBed, ComponentFixture, async } from '@angular/core/testing';\n// import { GroupsComponent } from './groups.component';\n// import { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\n// import { RouterTestingModule } from '@angular/router/testing';\n// import { FormsModule } from '@angular/forms';\n// import * as $ from 'jquery';\n\n// const BACKEND_URL = \"http://localhost:3000\";\n\n// describe('GroupsComponent', () => {\n//     let component: GroupsComponent;\n//     let fixture: ComponentFixture<GroupsComponent>;\n//     let httpMock: HttpTestingController;\n\n//     beforeEach(async(() => {\n//         // Mock the current user in session storage\n//         const mockUser = {\n//             username: 'user1',\n//             role: 3 \n//         };\n\n//         sessionStorage.setItem('current.user', JSON.stringify(mockUser));\n\n//         TestBed.configureTestingModule({\n//             imports: [\n//                 HttpClientTestingModule,\n//                 RouterTestingModule,\n//                 FormsModule \n//             ],\n//             declarations: [GroupsComponent]\n//         }).compileComponents();\n\n//         fixture = TestBed.createComponent(GroupsComponent);\n//         component = fixture.componentInstance;\n//         httpMock = TestBed.inject(HttpTestingController);\n//         fixture.detectChanges();\n//     }));\n\n//     afterEach(() => {\n//         httpMock.verify(); // Ensure that no requests are outstanding\n//     });\n\n//     it('should make an HTTP POST request when the requestButton is clicked', () => {\n//         const mockGroup = {\n//             groupID: 1, // Replace with an appropriate group ID\n//             userRequests: [] as string[] \n//             // Other properties of the mock group as needed\n//         };\n  \n//         component.loggedInUser = { username: 'user1' };\n  \n//         component.requestButton(mockGroup);\n  \n//         const req = httpMock.expectOne(`${BACKEND_URL}/update-groups`); // Assuming BACKEND_URL is imported\n//         expect(req.request.method).toBe('POST');\n//         expect(req.request.body).toEqual(mockGroup); // Ensure that the request body matches the group object\n  \n//         req.flush({}); // Mock a successful response\n  \n//         // Check that the user request was updated\n//         expect(mockGroup.userRequests).toContain('user1');\n  \n//         // Verify that the button is disabled after the request\n//         expect(component.buttonDisabledStates[mockGroup.groupID]).toBe(true);\n//     });\n// });\n"],"mappings":"AAAA,SAA2BA,OAAO,QAAQ,uBAAuB;AACjE,SAASC,WAAW,QAAQ,gBAAgB;AAC5C,SAASC,eAAe,QAAQ,oBAAoB;AAEpDC,QAAQ,CAAC,iBAAiB,EAAE,MAAK;EAC/B,IAAIC,SAA0B;EAC9B,IAAIC,OAA0C;EAE9CC,UAAU,CAAC,MAAK;IACdN,OAAO,CAACO,sBAAsB,CAAC;MAC7BC,YAAY,EAAE,CAACN,eAAe,CAAC;MAC/BO,OAAO,EAAE,CAACR,WAAW;KACtB,CAAC;IAEFI,OAAO,GAAGL,OAAO,CAACU,eAAe,CAACR,eAAe,CAAC;IAClDE,SAAS,GAAGC,OAAO,CAACM,iBAAiB;IACrCN,OAAO,CAACO,aAAa,EAAE;IACvBR,SAAS,CAACS,YAAY,GAAG;MAAEC,QAAQ,EAAE;IAAU,CAAE,CAAC,CAAC;EACrD,CAAC,CAAC;;EAEFC,EAAE,CAAC,eAAe,EAAE,MAAK;IACvBC,MAAM,CAACZ,SAAS,CAAC,CAACa,UAAU,EAAE;EAChC,CAAC,CAAC;EAEFF,EAAE,CAAC,oBAAoB,EAAE,MAAK;IAC5B;IACA,MAAMG,SAAS,GAKX;MACFC,EAAE,EAAE,CAAC;MACLC,SAAS,EAAE,YAAY;MACvBC,OAAO,EAAE,CAAC,UAAU,CAAC;MACrBC,QAAQ,EAAE;QACRC,QAAQ,EAAE,CAAC,UAAU,CAAC;QACtBC,QAAQ,EAAE,EAAE,CAAE;;KAEjB;IAED;IACApB,SAAS,CAACqB,UAAU,CAACP,SAAS,CAAC;IAE/B;IACAF,MAAM,CAACE,SAAS,CAACG,OAAO,CAAC,CAACK,OAAO,CAAC,EAAE,CAAC;IAErC;IACA,KAAK,MAAMC,WAAW,IAAIT,SAAS,CAACI,QAAQ,EAAE;MAC5CN,MAAM,CAACE,SAAS,CAACI,QAAQ,CAACK,WAAW,CAAC,CAAC,CAACD,OAAO,CAAC,EAAE,CAAC;;IAGrD;EACF,CAAC,CAAC;AACJ,CAAC,CAAC;AAIF;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}