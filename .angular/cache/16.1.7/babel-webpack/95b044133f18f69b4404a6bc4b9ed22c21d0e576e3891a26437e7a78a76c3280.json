{"ast":null,"code":"import { TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { FormsModule } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport { of } from 'rxjs';\nimport { ChatComponent } from './chat.component';\nimport { UploadService } from '../service/upload.service';\nimport { throwError } from 'rxjs';\ndescribe('ChatComponent', () => {\n  let component;\n  let fixture;\n  let uploadService;\n  let httpMock;\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      declarations: [ChatComponent],\n      imports: [HttpClientTestingModule, FormsModule],\n      providers: [{\n        provide: ActivatedRoute,\n        useValue: {\n          paramMap: of({\n            get: id => '1'\n          })\n        }\n      }, UploadService]\n    });\n    fixture = TestBed.createComponent(ChatComponent);\n    component = fixture.componentInstance;\n    uploadService = TestBed.inject(UploadService);\n    httpMock = TestBed.inject(HttpTestingController);\n    fixture.detectChanges();\n  });\n  afterEach(() => {\n    httpMock.verify();\n  });\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n  it('should call uploadAttachment and handle success', () => {\n    const formData = new FormData();\n    const mockResponse = {\n      message: 'Upload successful'\n    }; // Replace with your mock response data\n    spyOn(uploadService, 'uploadAttachment').and.returnValue(of(mockResponse));\n    component.someComponentMethodUsingUploadService();\n    expect(uploadService.uploadAttachment).toHaveBeenCalled();\n    httpMock.expectOne(uploadService.BACKEND_URL + '/attachPhoto').flush(mockResponse);\n    // Add your expectations for the component's behavior here\n  });\n\n  it('should handle uploadAttachment error', () => {\n    const formData = new FormData();\n    const mockError = {\n      status: 500,\n      statusText: 'Internal Server Error'\n    }; // Replace with your mock error data\n    spyOn(uploadService, 'uploadAttachment').and.returnValue(throwError(mockError) // Use throwError to create an observable that emits an error\n    );\n\n    component.someComponentMethodUsingUploadService();\n    expect(uploadService.uploadAttachment).toHaveBeenCalled();\n    // Add your expectations for how the component handles the error here\n  });\n});","map":{"version":3,"names":["TestBed","HttpClientTestingModule","HttpTestingController","FormsModule","ActivatedRoute","of","ChatComponent","UploadService","throwError","describe","component","fixture","uploadService","httpMock","beforeEach","configureTestingModule","declarations","imports","providers","provide","useValue","paramMap","get","id","createComponent","componentInstance","inject","detectChanges","afterEach","verify","it","expect","toBeTruthy","formData","FormData","mockResponse","message","spyOn","and","returnValue","someComponentMethodUsingUploadService","uploadAttachment","toHaveBeenCalled","expectOne","BACKEND_URL","flush","mockError","status","statusText"],"sources":["/Users/frazerlinscott/Desktop/Software Frameworks/Assignments/Assignment1_SoftwareFrames_s2930588/src/app/chat/chat.component.spec.ts"],"sourcesContent":["import { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { FormsModule } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport { of } from 'rxjs';\nimport { ChatComponent } from './chat.component';\nimport { UploadService } from '../service/upload.service';\nimport { throwError } from 'rxjs';\n\ndescribe('ChatComponent', () => {\n  let component: ChatComponent;\n  let fixture: ComponentFixture<ChatComponent>;\n  let uploadService: UploadService;\n  let httpMock: HttpTestingController;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      declarations: [ChatComponent],\n      imports: [HttpClientTestingModule, FormsModule],\n      providers: [\n        {\n          provide: ActivatedRoute,\n          useValue: { paramMap: of({ get: (id: string) => '1' }) }\n        },\n        UploadService\n      ]\n    });\n\n    fixture = TestBed.createComponent(ChatComponent);\n    component = fixture.componentInstance;\n    uploadService = TestBed.inject(UploadService);\n    httpMock = TestBed.inject(HttpTestingController);\n\n    fixture.detectChanges();\n  });\n\n  afterEach(() => {\n    httpMock.verify();\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n\n  it('should call uploadAttachment and handle success', () => {\n    const formData = new FormData();\n    const mockResponse = { message: 'Upload successful' }; // Replace with your mock response data\n\n    spyOn(uploadService, 'uploadAttachment').and.returnValue(of(mockResponse));\n\n    component.someComponentMethodUsingUploadService();\n\n    expect(uploadService.uploadAttachment).toHaveBeenCalled();\n\n    httpMock.expectOne(uploadService.BACKEND_URL + '/attachPhoto').flush(mockResponse);\n\n    // Add your expectations for the component's behavior here\n  });\n\n  it('should handle uploadAttachment error', () => {\n    const formData = new FormData();\n    const mockError = { status: 500, statusText: 'Internal Server Error' }; // Replace with your mock error data\n  \n    spyOn(uploadService, 'uploadAttachment').and.returnValue(\n      throwError(mockError) // Use throwError to create an observable that emits an error\n    );\n  \n    component.someComponentMethodUsingUploadService();\n  \n    expect(uploadService.uploadAttachment).toHaveBeenCalled();\n\n    // Add your expectations for how the component handles the error here\n  });\n});\n"],"mappings":"AAAA,SAA2BA,OAAO,QAAQ,uBAAuB;AACjE,SAASC,uBAAuB,EAAEC,qBAAqB,QAAQ,8BAA8B;AAC7F,SAASC,WAAW,QAAQ,gBAAgB;AAC5C,SAASC,cAAc,QAAQ,iBAAiB;AAChD,SAASC,EAAE,QAAQ,MAAM;AACzB,SAASC,aAAa,QAAQ,kBAAkB;AAChD,SAASC,aAAa,QAAQ,2BAA2B;AACzD,SAASC,UAAU,QAAQ,MAAM;AAEjCC,QAAQ,CAAC,eAAe,EAAE,MAAK;EAC7B,IAAIC,SAAwB;EAC5B,IAAIC,OAAwC;EAC5C,IAAIC,aAA4B;EAChC,IAAIC,QAA+B;EAEnCC,UAAU,CAAC,MAAK;IACdd,OAAO,CAACe,sBAAsB,CAAC;MAC7BC,YAAY,EAAE,CAACV,aAAa,CAAC;MAC7BW,OAAO,EAAE,CAAChB,uBAAuB,EAAEE,WAAW,CAAC;MAC/Ce,SAAS,EAAE,CACT;QACEC,OAAO,EAAEf,cAAc;QACvBgB,QAAQ,EAAE;UAAEC,QAAQ,EAAEhB,EAAE,CAAC;YAAEiB,GAAG,EAAGC,EAAU,IAAK;UAAG,CAAE;QAAC;OACvD,EACDhB,aAAa;KAEhB,CAAC;IAEFI,OAAO,GAAGX,OAAO,CAACwB,eAAe,CAAClB,aAAa,CAAC;IAChDI,SAAS,GAAGC,OAAO,CAACc,iBAAiB;IACrCb,aAAa,GAAGZ,OAAO,CAAC0B,MAAM,CAACnB,aAAa,CAAC;IAC7CM,QAAQ,GAAGb,OAAO,CAAC0B,MAAM,CAACxB,qBAAqB,CAAC;IAEhDS,OAAO,CAACgB,aAAa,EAAE;EACzB,CAAC,CAAC;EAEFC,SAAS,CAAC,MAAK;IACbf,QAAQ,CAACgB,MAAM,EAAE;EACnB,CAAC,CAAC;EAEFC,EAAE,CAAC,eAAe,EAAE,MAAK;IACvBC,MAAM,CAACrB,SAAS,CAAC,CAACsB,UAAU,EAAE;EAChC,CAAC,CAAC;EAEFF,EAAE,CAAC,iDAAiD,EAAE,MAAK;IACzD,MAAMG,QAAQ,GAAG,IAAIC,QAAQ,EAAE;IAC/B,MAAMC,YAAY,GAAG;MAAEC,OAAO,EAAE;IAAmB,CAAE,CAAC,CAAC;IAEvDC,KAAK,CAACzB,aAAa,EAAE,kBAAkB,CAAC,CAAC0B,GAAG,CAACC,WAAW,CAAClC,EAAE,CAAC8B,YAAY,CAAC,CAAC;IAE1EzB,SAAS,CAAC8B,qCAAqC,EAAE;IAEjDT,MAAM,CAACnB,aAAa,CAAC6B,gBAAgB,CAAC,CAACC,gBAAgB,EAAE;IAEzD7B,QAAQ,CAAC8B,SAAS,CAAC/B,aAAa,CAACgC,WAAW,GAAG,cAAc,CAAC,CAACC,KAAK,CAACV,YAAY,CAAC;IAElF;EACF,CAAC,CAAC;;EAEFL,EAAE,CAAC,sCAAsC,EAAE,MAAK;IAC9C,MAAMG,QAAQ,GAAG,IAAIC,QAAQ,EAAE;IAC/B,MAAMY,SAAS,GAAG;MAAEC,MAAM,EAAE,GAAG;MAAEC,UAAU,EAAE;IAAuB,CAAE,CAAC,CAAC;IAExEX,KAAK,CAACzB,aAAa,EAAE,kBAAkB,CAAC,CAAC0B,GAAG,CAACC,WAAW,CACtD/B,UAAU,CAACsC,SAAS,CAAC,CAAC;KACvB;;IAEDpC,SAAS,CAAC8B,qCAAqC,EAAE;IAEjDT,MAAM,CAACnB,aAAa,CAAC6B,gBAAgB,CAAC,CAACC,gBAAgB,EAAE;IAEzD;EACF,CAAC,CAAC;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}