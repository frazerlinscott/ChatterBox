{"ast":null,"code":"import { Observable } from 'rxjs';\nimport io from \"socket.io-client\";\nimport * as i0 from \"@angular/core\";\nconst SERVER_URL = 'http://localhost:3000';\nexport class SocketService {\n  constructor() {}\n  initSocket() {\n    this.socket = io(SERVER_URL);\n    return () => {\n      this.socket.disconnect();\n    };\n  }\n  join(channel) {\n    this.socket.emit('join', channel);\n  }\n  send(message, channel) {\n    const storedUser = window.sessionStorage.getItem('current.user');\n    if (storedUser) {\n      let userObject = JSON.parse(storedUser);\n      console.log(this.loggedInUser.username);\n    }\n    console.log(username);\n    this.socket.emit('message', {\n      message,\n      channel,\n      username\n    });\n  }\n  getMessage() {\n    return new Observable(observer => {\n      this.socket.on('message', data => {\n        observer.next(data);\n      });\n    });\n  }\n}\nSocketService.ɵfac = function SocketService_Factory(t) {\n  return new (t || SocketService)();\n};\nSocketService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: SocketService,\n  factory: SocketService.ɵfac,\n  providedIn: 'root'\n});\n;","map":{"version":3,"names":["Observable","io","SERVER_URL","SocketService","constructor","initSocket","socket","disconnect","join","channel","emit","send","message","storedUser","window","sessionStorage","getItem","userObject","JSON","parse","console","log","loggedInUser","username","getMessage","observer","on","data","next","factory","ɵfac","providedIn"],"sources":["/Users/frazerlinscott/Desktop/Software Frameworks/Assignments/Assignment1_SoftwareFrames_s2930588/src/app/service/socket.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {Observable} from 'rxjs';\nimport io from \"socket.io-client\";\n\n\nconst SERVER_URL = 'http://localhost:3000'\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class SocketService {\n\n  socket:any;\n\n  constructor() { }\n\n  initSocket(){\n    this.socket = io(SERVER_URL);\n    return () =>{this.socket.disconnect();}\n  }\n\n  join(channel: string): void {\n    this.socket.emit('join', channel);\n  }\n\n  send(message: string, channel: string): void {\n\n    const storedUser = window.sessionStorage.getItem('current.user');\n\n    if (storedUser) {\n\n      let userObject = JSON.parse(storedUser);\n      console.log(this.loggedInUser.username)\n    }\n\n    console.log(username);\n    this.socket.emit('message', { message, channel, username });\n  }\n\n\n  getMessage(): Observable<string> {\n    return new Observable<string>(observer => {\n      this.socket.on('message', (data: string) => {\n        observer.next(data);\n      });\n    });\n  }\n};\n"],"mappings":"AACA,SAAQA,UAAU,QAAO,MAAM;AAC/B,OAAOC,EAAE,MAAM,kBAAkB;;AAGjC,MAAMC,UAAU,GAAG,uBAAuB;AAM1C,OAAM,MAAOC,aAAa;EAIxBC,YAAA,GAAgB;EAEhBC,UAAUA,CAAA;IACR,IAAI,CAACC,MAAM,GAAGL,EAAE,CAACC,UAAU,CAAC;IAC5B,OAAO,MAAK;MAAC,IAAI,CAACI,MAAM,CAACC,UAAU,EAAE;IAAC,CAAC;EACzC;EAEAC,IAAIA,CAACC,OAAe;IAClB,IAAI,CAACH,MAAM,CAACI,IAAI,CAAC,MAAM,EAAED,OAAO,CAAC;EACnC;EAEAE,IAAIA,CAACC,OAAe,EAAEH,OAAe;IAEnC,MAAMI,UAAU,GAAGC,MAAM,CAACC,cAAc,CAACC,OAAO,CAAC,cAAc,CAAC;IAEhE,IAAIH,UAAU,EAAE;MAEd,IAAII,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACN,UAAU,CAAC;MACvCO,OAAO,CAACC,GAAG,CAAC,IAAI,CAACC,YAAY,CAACC,QAAQ,CAAC;;IAGzCH,OAAO,CAACC,GAAG,CAACE,QAAQ,CAAC;IACrB,IAAI,CAACjB,MAAM,CAACI,IAAI,CAAC,SAAS,EAAE;MAAEE,OAAO;MAAEH,OAAO;MAAEc;IAAQ,CAAE,CAAC;EAC7D;EAGAC,UAAUA,CAAA;IACR,OAAO,IAAIxB,UAAU,CAASyB,QAAQ,IAAG;MACvC,IAAI,CAACnB,MAAM,CAACoB,EAAE,CAAC,SAAS,EAAGC,IAAY,IAAI;QACzCF,QAAQ,CAACG,IAAI,CAACD,IAAI,CAAC;MACrB,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;;AApCWxB,aAAa,C;mBAAbA,aAAa;AAAA;AAAbA,aAAa,C;SAAbA,aAAa;EAAA0B,OAAA,EAAb1B,aAAa,CAAA2B,IAAA;EAAAC,UAAA,EAHZ;AAAM;AAwCnB"},"metadata":{},"sourceType":"module","externalDependencies":[]}