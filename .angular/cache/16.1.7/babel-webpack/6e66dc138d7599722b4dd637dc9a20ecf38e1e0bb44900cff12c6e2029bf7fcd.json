{"ast":null,"code":"// Import necessary modules and services\nimport { TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { FormsModule } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport { of } from 'rxjs';\nimport { ChatComponent } from './chat.component';\nimport { UploadService } from '../service/upload.service';\ndescribe('ChatComponent', () => {\n  let component;\n  let fixture;\n  let uploadService; // Declare a variable for UploadService\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      declarations: [ChatComponent],\n      imports: [HttpClientTestingModule, FormsModule],\n      providers: [{\n        provide: ActivatedRoute,\n        useValue: {\n          paramMap: of({\n            get: id => '1'\n          })\n        }\n      }, UploadService]\n    });\n    fixture = TestBed.createComponent(ChatComponent);\n    component = fixture.componentInstance;\n    uploadService = TestBed.inject(UploadService); // Inject UploadService\n    fixture.detectChanges();\n  });\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n  it('should call a method that uses the service', () => {\n    spyOn(uploadService, 'someServiceMethod').and.returnValue(of({/* your mock data here */}));\n    // Trigger the method in your component that uses the service\n    component.someComponentMethod();\n    expect(uploadService.someServiceMethod).toHaveBeenCalled();\n    // Add your expectations for the component's behavior here\n  });\n});","map":{"version":3,"names":["TestBed","HttpClientTestingModule","FormsModule","ActivatedRoute","of","ChatComponent","UploadService","describe","component","fixture","uploadService","beforeEach","configureTestingModule","declarations","imports","providers","provide","useValue","paramMap","get","id","createComponent","componentInstance","inject","detectChanges","it","expect","toBeTruthy","spyOn","and","returnValue","someComponentMethod","someServiceMethod","toHaveBeenCalled"],"sources":["/Users/frazerlinscott/Desktop/Software Frameworks/Assignments/Assignment1_SoftwareFrames_s2930588/src/app/chat/chat.component.spec.ts"],"sourcesContent":["// Import necessary modules and services\nimport { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { FormsModule } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport { of } from 'rxjs';\nimport { ChatComponent } from './chat.component';\nimport { UploadService } from '../service/upload.service';\n\ndescribe('ChatComponent', () => {\n  let component: ChatComponent;\n  let fixture: ComponentFixture<ChatComponent>;\n  let uploadService: UploadService; // Declare a variable for UploadService\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      declarations: [ChatComponent],\n      imports: [HttpClientTestingModule, FormsModule],\n      providers: [\n        {\n          provide: ActivatedRoute,\n          useValue: { paramMap: of({ get: (id: string) => '1' }) }\n        },\n        UploadService\n      ]\n    });\n\n    fixture = TestBed.createComponent(ChatComponent);\n    component = fixture.componentInstance;\n    uploadService = TestBed.inject(UploadService); // Inject UploadService\n    fixture.detectChanges();\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n\n  it('should call a method that uses the service', () => {\n    spyOn(uploadService, 'someServiceMethod').and.returnValue(of({ /* your mock data here */ }));\n    // Trigger the method in your component that uses the service\n    component.someComponentMethod();\n    expect(uploadService.someServiceMethod).toHaveBeenCalled();\n    // Add your expectations for the component's behavior here\n  });\n});\n"],"mappings":"AAAA;AACA,SAA2BA,OAAO,QAAQ,uBAAuB;AACjE,SAASC,uBAAuB,QAA+B,8BAA8B;AAC7F,SAASC,WAAW,QAAQ,gBAAgB;AAC5C,SAASC,cAAc,QAAQ,iBAAiB;AAChD,SAASC,EAAE,QAAQ,MAAM;AACzB,SAASC,aAAa,QAAQ,kBAAkB;AAChD,SAASC,aAAa,QAAQ,2BAA2B;AAEzDC,QAAQ,CAAC,eAAe,EAAE,MAAK;EAC7B,IAAIC,SAAwB;EAC5B,IAAIC,OAAwC;EAC5C,IAAIC,aAA4B,CAAC,CAAC;EAElCC,UAAU,CAAC,MAAK;IACdX,OAAO,CAACY,sBAAsB,CAAC;MAC7BC,YAAY,EAAE,CAACR,aAAa,CAAC;MAC7BS,OAAO,EAAE,CAACb,uBAAuB,EAAEC,WAAW,CAAC;MAC/Ca,SAAS,EAAE,CACT;QACEC,OAAO,EAAEb,cAAc;QACvBc,QAAQ,EAAE;UAAEC,QAAQ,EAAEd,EAAE,CAAC;YAAEe,GAAG,EAAGC,EAAU,IAAK;UAAG,CAAE;QAAC;OACvD,EACDd,aAAa;KAEhB,CAAC;IAEFG,OAAO,GAAGT,OAAO,CAACqB,eAAe,CAAChB,aAAa,CAAC;IAChDG,SAAS,GAAGC,OAAO,CAACa,iBAAiB;IACrCZ,aAAa,GAAGV,OAAO,CAACuB,MAAM,CAACjB,aAAa,CAAC,CAAC,CAAC;IAC/CG,OAAO,CAACe,aAAa,EAAE;EACzB,CAAC,CAAC;EAEFC,EAAE,CAAC,eAAe,EAAE,MAAK;IACvBC,MAAM,CAAClB,SAAS,CAAC,CAACmB,UAAU,EAAE;EAChC,CAAC,CAAC;EAEFF,EAAE,CAAC,4CAA4C,EAAE,MAAK;IACpDG,KAAK,CAAClB,aAAa,EAAE,mBAAmB,CAAC,CAACmB,GAAG,CAACC,WAAW,CAAC1B,EAAE,CAAC,CAAE,0BAA2B,CAAC,CAAC;IAC5F;IACAI,SAAS,CAACuB,mBAAmB,EAAE;IAC/BL,MAAM,CAAChB,aAAa,CAACsB,iBAAiB,CAAC,CAACC,gBAAgB,EAAE;IAC1D;EACF,CAAC,CAAC;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}